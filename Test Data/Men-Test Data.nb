(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[   1630203,      30078]
NotebookOptionsPosition[   1626378,      30008]
NotebookOutlinePosition[   1626771,      30024]
CellTagsIndexPosition[   1626728,      30021]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
NN-Based Predictions of Intra-Season Performance Based on Junior Test Results \
(M)\
\>", "Section",
 CellChangeTimes->{{3.877221503172937*^9, 
  3.877221505227026*^9}},ExpressionUUID->"ff52f1fc-74a6-4d33-8b4f-\
eeed5add4a2e"],

Cell[BoxData[
 RowBox[{"CloudPublish", "[", "]"}]], "Input",
 CellChangeTimes->{{3.877221444807392*^9, 3.877221452220858*^9}},
 CellLabel->
  "In[582]:=",ExpressionUUID->"7cbcef5d-45b4-4427-95f6-a58a26bb6a1e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Take", "[", 
   RowBox[{"a", ",", "8", ",", "8"}], "]"}], "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.877126339402794*^9, 3.877126351904428*^9}, {
   3.877126912720538*^9, 3.877126913609501*^9}, 3.877126966119071*^9, {
   3.877127075579101*^9, 3.877127076328698*^9}, {3.877127788702807*^9, 
   3.877127789861225*^9}, {3.877129363927417*^9, 3.877129391710774*^9}, {
   3.877129491928088*^9, 3.877129592293397*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellLabel->"In[41]:=",ExpressionUUID->"c13cc93b-4268-46f7-9273-78b6d0c3b23f"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"First Name\"\>", "\<\"Last Name\"\>", "\<\"Year of Birth\"\>", \
"\<\"Region\"\>", "\<\"USSA Points\"\>", "\<\"Sex\"\>", "\<\"Qualified\"\>", \
"\<\"Location\"\>"},
    {"\<\"Phoebe\"\>", "\<\"Sweet\"\>", "2000", "\<\"East\"\>", 
     "136.57`", "\<\"Female\"\>", "\<\"Y\"\>", "\<\"Craftsbury VT\"\>"},
    {"\<\"Nina\"\>", "\<\"Seemann\"\>", "2002", "\<\"East\"\>", 
     "121.54`", "\<\"Female\"\>", "\<\"Y\"\>", "\<\"Craftsbury VT\"\>"},
    {"\<\"Camille\"\>", "\<\"Bolduc\"\>", "2003", "\<\"East\"\>", 
     "201.92`", "\<\"Female\"\>", "\<\"Y\"\>", "\<\"Craftsbury VT\"\>"},
    {"\<\"Lil Q\"\>", "\<\"Massey-Bierman\"\>", "2003", "\<\"East\"\>", 
     "198.71`", "\<\"Female\"\>", "\<\"Y\"\>", "\<\"Craftsbury VT\"\>"},
    {"\<\"Maggie\"\>", "\<\"McGee\"\>", "2004", "\<\"East\"\>", 
     "231.52`", "\<\"Female\"\>", "\<\"Y\"\>", "\<\"Craftsbury VT\"\>"},
    {"\<\"Adrienne\"\>", "\<\"Remick\"\>", "2002", "\<\"East\"\>", 
     "221.76`", "\<\"Female\"\>", "\<\"Y\"\>", "\<\"Craftsbury VT\"\>"},
    {"\<\"Emma\"\>", "\<\"Charles\"\>", "2004", "\<\"East\"\>", 
     "231.6`", "\<\"Female\"\>", "\<\"Y\"\>", "\<\"Oakland, ME\"\>"}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.8771270766716757`*^9, 3.8771277902709713`*^9, {3.877129365716805*^9, 
   3.8771293919990187`*^9}, 3.877129498631547*^9, {3.877129536134862*^9, 
   3.877129592628758*^9}},
 CellLabel->
  "Out[41]//TableForm=",ExpressionUUID->"03830298-864c-4879-8603-\
b5bf57b3c7a4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"trainingset", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"605", ",", "15", ",", "35"}], "}"}], "\[Rule]", "159.78`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"614", ",", "11", ",", "44"}], "}"}], "\[Rule]", "164.63`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"586", ",", "27", ",", "60"}], "}"}], "\[Rule]", "110.23`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"673", ",", "19", ",", "48"}], "}"}], "\[Rule]", "160.61`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"694", ",", "23", ",", "60"}], "}"}], "\[Rule]", "256.83`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"656", ",", "9", ",", "32"}], "}"}], "\[Rule]", "241.39`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"653", ",", "8", ",", "48"}], "}"}], "\[Rule]", "149.08`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"679", ",", "29", ",", "62"}], "}"}], "\[Rule]", "185.41`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"591", ",", "15", ",", "54"}], "}"}], "\[Rule]", "98.12`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"578", ",", "16", ",", "37"}], "}"}], "\[Rule]", "233.01`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"642", ",", "9", ",", "41"}], "}"}], "\[Rule]", "126.76`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"666", ",", "9", ",", "52"}], "}"}], "\[Rule]", "195.43`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"685", ",", "22", ",", "60"}], "}"}], "\[Rule]", "154.05`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"665", ",", "19", ",", "53"}], "}"}], "\[Rule]", "169.14`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"731", ",", "8", ",", "54"}], "}"}], "\[Rule]", "355.01`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"649", ",", "18", ",", "59"}], "}"}], "\[Rule]", "159.86`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"675", ",", "22", ",", "58"}], "}"}], "\[Rule]", "251.46`"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"585", ",", "22", ",", "57"}], "}"}], "\[Rule]", "146.86`"}]}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.877126370742722*^9, 3.8771263786627617`*^9}, {
  3.877126411713022*^9, 3.877126432493825*^9}},
 CellLabel->
  "In[375]:=",ExpressionUUID->"757440f7-5b93-4acd-8213-b72ed164fcaf"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"p", "=", 
  RowBox[{"Predict", "[", 
   RowBox[{"trainingset", ",", 
    RowBox[{"Method", "->", "\"\<NeuralNetwork\>\""}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"q", "=", 
  RowBox[{"Predict", "[", 
   RowBox[{"trainingset", ",", 
    RowBox[{"Method", "->", "\"\<LinearRegression\>\""}]}], "]"}]}]}], "Input",\

 Background->RGBColor[0.88, 1, 0.88],
 CellLabel->
  "In[376]:=",ExpressionUUID->"b5183e3b-4950-4918-b224-66f203b53655"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["18", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[<|
   "ExampleNumber" -> 18, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical"|>, 
           "f2" -> <|"Type" -> "Numerical"|>, 
           "f3" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 3|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Numerical", "Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 18, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1475203784826948804|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {645.9444444444445, 16.72222222222222, 
                    50.77777777777777}, 
                    "StandardDeviation" -> {42.37330425610238, 
                    6.504746604984834, 9.174575712596916}, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3351294598358471705|>]}, 
                   "Invertibility" -> "Perfect", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{-0.2573241038378381, 
                   0.8994516261877938}, {-0.6450502744104483, \
-0.43205841944994094`}, {-0.7195098672478779, 0.06566806172373328}}, 
                  "Precisions" -> {0.5919102827503028, 0.9435455551803141}, 
                  "NoisePrecision" -> 4.039404099667452, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {-0.0006801558854609856, \
-0.00024202445494255392`, 0.0021950700934157343`}, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 8722503918180358647|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>, 
                    "Key" -> "(f1f2f3)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 2, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {-0.0006801558854610225, \
-0.00024202445494255392`, 0.002195070093415722}, 
                    "StandardDeviation" -> {1.000087284650148, 
                    0.9995723164454201, 0.9987588995481079}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    2143139376538970117|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                   "Mean" -> {-0.0006801558854610225, \
-0.00024202445494255392`, 0.002195070093415722}, 
                   "StandardDeviation" -> {1.000087284650148, 
                    0.9995723164454201, 0.9987588995481079}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 3, 
                   "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   2143139376538970117|>], "InputDimension" -> 0, 
                "OutputDimension" -> 3, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, 
                    "ID" -> 4922843929423532927|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, 
                    "ID" -> 365386638938414886|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, 
                    "ID" -> 8084762059231395715|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.099699, "MaxTrainingMemory" -> 188264, 
                  "DataMemory" -> 4192, "FunctionMemory" -> 44912, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 11, 10, 20, 59, 23.134482`8.116834762622261}, 
                    "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-4.306467677914701, -4.306467677914701, \
-4.260797744099717, -4.196274605521246, -4.120584106364819, \
-4.07765387661082, -4.042601145301235, -3.817664807796254, -3.79481845480472, \
-3.7386590251861964`, -3.6937309414537625`}, 
                   "LeftBoundary" -> -4.260797744099717, "LeftScale" -> 
                   0.02283496690749187, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[12.014775715516041`, 0.2144877574475317], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 967176822927612644|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1783680118875305151|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
             "Mean" -> {645.9444444444445, 16.72222222222222, 
              50.77777777777777}, 
             "StandardDeviation" -> {42.37330425610238, 6.504746604984834, 
              9.174575712596916}, 
             "Output" -> <|
              "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 5995433924943303780|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 5874757204722672291|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {184.31444444444443`}, 
             "StandardDeviation" -> {60.93164478169345}, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1753789756623536193|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>,
              "Version" -> {13.1, 0}, "ID" -> 1356618763548457018|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Numerical", "Weight" -> 1|>, "Key" -> "f1",
              "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
             "Missing" -> "Allowed"|>]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
      "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (184.31444444444443` + 
       60.93164478169345 #& ), 
      "ProcessorFunction" -> (-3.024937946526935 + 0.01641183335166498 #& ), 
      "Name" -> "value", 
      "Quantiles" -> {-1.4146088580615672`, 2.801427011647649}, "Mean" -> 
      184.31444444444443`|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 
    0, "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetGraph[<|
        "Type" -> "Graph", 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>, 
         "Outputs" -> <|
          "Mean" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
           "LogStd" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
         "Nodes" -> <|
          "2" -> <|"Type" -> "NetArray", 
             "Arrays" -> <|
              "Array" -> RawArray["Real32",{-1.2026623487472534`}]|>, 
             "Parameters" -> <|
              "Dimensions" -> 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
               "$ArrayDimensions" -> {1}|>, "Inputs" -> <||>, 
             "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>|>, 
           "1" -> <|"Type" -> "Chain", 
             "Nodes" -> <|
              "1" -> <|"Type" -> "Linear", 
                 "Arrays" -> <|"Weights" -> CompressedData["
1:eJwBhgJ5/SFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
MgAAAAMAAAApU/G+Rwv1vYNoh7+iTXY/xNHXP7hXXL+/9SO/fex0vHywnD7u
mmO/52iQu3SlGz2fNQ0/xIXIvj+akL1lcjg/nSyNve0TKT755Si+n6MTvCFJ
iD5KnLe/IPq7PaeGDr/fTxe/6URZv055uD4LkZw9Uolevg6kOz+sVXg+mfPW
PqyXRz9AkSu/UmrLvnQvO78gHMo+oAomOzuOZb5BnjY/+AEqPo74Fb8Cflw/
jBSPPif6Ar+iPee+A3QQvi9WyD76rc6+mEr6PP1Bwj5Zl4k+o3OFP55sTL6P
fB0+z5+LPpo+gz2lrcg+Ga+SP/HzGT6s0s0+n9GvPjo6aT50Cgq/fLigPXCh
yj4IV70/ue7IPMkFsL1nYGm/DOQyv7M/3L6gRuC956GGPTpsKb80m5I9ZbxF
v99EBD5jbIk+wSAqvSDgqL4AbOA9lM0APlOfUj4MsB2/LArMvmOqaD+k76U/
QP42v3wVUz/cCp4+w/c5v2E91j4Ky4a+8zVEv9b+IT4eZpw+h6HLv7dVbT+J
S1o/8MQgvtP0xj34o+M+ywaEvnqZ6j50VCy+JJtIP1I/j7946iS98YQsP/1/
v736ung+Kzcav48WWT/jWlI/hfxYv3KkML5cTKe+owKAvnOEGj8ZcDa/fPUo
P0VaJj+b9Ru/tXhHP6/cGb+AGp87OGlZvgWroj4Ud9M+Bh5xPsl4kz+uVHe+
rEt1vlD1IL+6d6e+IzjkPg2CD793cIg+B8CQP07vDD+iKxk+oqCvvWTQbL8i
gs+/sihxv7WMpT5oYj8+2RrcPuETDb9idyhR
                    "], "Biases" -> 
                   RawArray["Real32",{
                    0.1662415713071823, -0.09961794316768646, 
                    0.32554981112480164`, -0.03895267844200134, 
                    0.026986006647348404`, -0.11711698770523071`, \
-0.0018490329384803772`, -0.21284927427768707`, -0.08810210973024368, \
-0.0713057816028595, -0.10721893608570099`, 0.11300480365753174`, 
                    0.09939642250537872, 
                    0.08141794800758362, -0.07147223502397537, 
                    0.16995258629322052`, 0.017666302621364594`, 
                    0.10332654416561127`, -0.11204160004854202`, \
-0.09295991063117981, 0.10189927369356155`, 
                    0.08433710038661957, -0.22633658349514008`, 
                    0.00293967523612082, 
                    0.09507199376821518, -0.03730040788650513, 
                    0.024995766580104828`, -0.10215723514556885`, 
                    0.0514688640832901, -0.12504132091999054`, \
-0.045884277671575546`, 0.06300043314695358, 
                    0.22512124478816986`, -0.2100604623556137, 
                    0.14657224714756012`, -0.15988637506961823`, 
                    0.09150736033916473, 
                    0.03330683708190918, -0.051095739006996155`, \
-0.062419407069683075`, 
                    0.005526383873075247, -0.061654478311538696`, \
-0.15795403718948364`, -0.21940100193023682`, -0.17105408012866974`, \
-0.26515254378318787`, 0.04080977663397789, -0.17640121281147003`, 
                    0.15114234387874603`, 0.14034007489681244`}]|>, 
                 "Parameters" -> <|
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 3, "$InputDimensions" -> {3}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "2" -> <|
                "Type" -> "Elementwise", "Arrays" -> <||>, 
                 "Parameters" -> <|
                  "Function" -> 
                   NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "3" -> <|
                "Type" -> "Dropout", "Arrays" -> <||>, 
                 "Parameters" -> <|
                  "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                   "OutputPorts" -> 
                   NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "4" -> <|
                "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
                    "], "Biases" -> 
                   RawArray["Real32",{-0.056264638900756836`, 
                    0.20743033289909363`, -0.07040610164403915, \
-0.1134888231754303, -0.05717797577381134, 
                    0.15228143334388733`, -0.008128189481794834, \
-0.09413044154644012, -0.14826364815235138`, -0.09609245508909225, 
                    0.09827321767807007, -0.049553707242012024`, 
                    0.03114297427237034, -0.02640373446047306, \
-0.03339345380663872, -0.009061370976269245, -0.09825214743614197, 
                    0.02453150786459446, 0.016251476481556892`, 
                    0.22742263972759247`, -0.04466868191957474, 
                    0.006153336260467768, 
                    0.06594887375831604, -0.11166111379861832`, \
-0.20282049477100372`, -0.03444327414035797, 0.05591721460223198, 
                    0.04535047337412834, -0.12424278259277344`, 
                    0.12791100144386292`, 0.11521118879318237`, 
                    0.05920711159706116, -0.010243697091937065`, 
                    0.014077454805374146`, 
                    0.04828822240233421, -0.07872626930475235, \
-0.09209168702363968, 0.03714662417769432, 0.08806450664997101, 
                    0.023828579112887383`, 
                    0.16367584466934204`, -0.016234688460826874`, \
-0.18068884313106537`, 0.02248004823923111, -0.026014337316155434`, 
                    0.1722862720489502, -0.009757071733474731, 
                    0.0498596653342247, 
                    0.013079040683805943`, -0.040247734636068344`}]|>, 
                 "Parameters" -> <|
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "5" -> <|
                "Type" -> "Elementwise", "Arrays" -> <||>, 
                 "Parameters" -> <|
                  "Function" -> 
                   NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "6" -> <|
                "Type" -> "Linear", 
                 "Arrays" -> <|
                  "Weights" -> 
                   RawArray["Real32",{{
                    0.11596079915761948`, -0.22197158634662628`, \
-0.17007751762866974`, 0.15629735589027405`, 
                    0.10191899538040161`, -0.09801425784826279, 
                    0.15009847283363342`, 0.1595337986946106, 
                    0.13837839663028717`, 
                    0.07317785918712616, -0.08839797228574753, 
                    0.2184947431087494, -0.06876114755868912, \
-0.17075787484645844`, 0.12701722979545593`, 0.11237279325723648`, 
                    0.0865621566772461, -0.12347730249166489`, \
-0.012791935354471207`, -0.09327255934476852, 
                    0.23357655107975006`, -0.03654654324054718, \
-0.05884390324354172, 0.12931932508945465`, 
                    0.02260141260921955, -0.1737203449010849, \
-0.20786359906196594`, -0.39979177713394165`, 
                    0.10866546630859375`, -0.1444506198167801, \
-0.09505712240934372, -0.11759717762470245`, -0.01552331168204546, 
                    0.14518693089485168`, -0.20120006799697876`, 
                    0.1651909500360489, 
                    0.17747335135936737`, -0.041564587503671646`, \
-0.29594501852989197`, -0.17639997601509094`, -0.07808875292539597, \
-0.07619776576757431, 0.12988652288913727`, -0.1105971410870552, 
                    0.10653827339410782`, -0.03841139003634453, 
                    0.13663174211978912`, -0.10922832041978836`, \
-0.1192498579621315, 0.045604024082422256`}}], "Biases" -> 
                   RawArray["Real32",{-0.0800107941031456}]|>, 
                 "Parameters" -> <|
                  "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
                   50, "$InputDimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"]}, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>, 
             "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Outputs", "LogStd"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Mean"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"]}|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 1.821448, "MeanInputsPerSecond" -> 
        7686.192523750335|>, "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
         "Output" -> <|
          "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
             "Mean" -> {-0.12131932370113982`, 0.08651200969715658, 
              0.03508607974586253}, 
             "StandardDeviation" -> {1.0892644778853724`, 1.0128098885978352`,
               1.071396014492115}, 
             "Output" -> <|
              "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1445580447275447545|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>, "Key" -> 
             "(f1f2f3)", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"|>]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
      "FeatureNumber" -> 3, 
      "DistributionData" -> {NormalDistribution, Automatic}, "Calibrator" -> 
      None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 2, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 2700, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|"Value" -> None, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Predict, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 
      4.109752658507797, "PreprocessingTime" -> 0.250199`5.849830563060611, 
      "LossName" -> "StandardDeviation", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[7.864187331342894, 1.7871989582013108`], "StandardDeviation" -> 
         Around[64.28977697351306, 13.694129390173908`], "EvaluationTime" -> 
         0.003962232981152784, "TestSize" -> 4, "ModelMemory" -> 66176, 
         "ModelUtility" -> -5.0365583646477345`, "TrainingSize" -> 14, 
         "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 427656, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[7.864187331342894, 1.2637405026736799`]}, 
         "StandardDeviationHistory" -> {
           Around[64.28977697351306, 9.68321175423797]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           2, "NumberOfParameters" -> 2700, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> 0.01, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 2700|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[7.864187331342894, 1.7871989582013108`], 
              "StandardDeviation" -> 
              Around[64.28977697351306, 13.694129390173908`], 
              "EvaluationTime" -> 0.003962232981152784, "TestSize" -> 4, 
              "ModelMemory" -> 66176, "ModelUtility" -> -5.0365583646477345`, 
              "TrainingSize" -> 14, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 427656, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[7.864187331342894, 1.2637405026736799`]}, 
              "StandardDeviationHistory" -> {
                Around[64.28977697351306, 9.68321175423797]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.003962232981152784, "ModelMemory" -> 66176, 
             "StandardDeviation" -> 
             Around[64.28977697351306, 13.694129390173908`], "TrainingMemory" -> 
             427656, "TrainingTime" -> 2.3544095316632783`|>, "Index" -> 
           1|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 17700|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           2|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 2700|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           3|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 17700|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           4|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 7700|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           5|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 7700|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           6|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 6], <||>], "MaxTrainingSize" -> 18, 
      "PreprocessorEvaluationTime" -> 5.*^-6, "PreprocessorMemory" -> 67112, 
      "InputDimension" -> 3, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.877102765373339`16.341082301604636*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 14, "TimeBudgets" -> 2.0429971279893104`, 
          "ElapsedTimes" -> 2.069259, "ExperimentCounts" -> 1|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, "ID" -> 
           6448330931398477146|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, "ID" -> 
           1033804942478285849|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, "ID" -> 
           3644694514917083622|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 2.3657, 
      "MaxTrainingMemory" -> 630384, "DataMemory" -> 3496, "FunctionMemory" -> 
      237816, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 11, 10, 20, 59, 25.391803`8.157268522330636}, 
        "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877126464805312*^9, 3.877127932384633*^9, 
  3.877127965432817*^9},
 CellLabel->
  "Out[376]=",ExpressionUUID->"f14d7abe-4f73-4604-80f0-09f1c58d1cf8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LinearRegression\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LinearRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["18", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[<|
   "ExampleNumber" -> 18, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical"|>, 
           "f2" -> <|"Type" -> "Numerical"|>, 
           "f3" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 3|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Numerical", "Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 18, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1475203784826948804|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {645.9444444444445, 16.72222222222222, 
                    50.77777777777777}, 
                    "StandardDeviation" -> {42.37330425610238, 
                    6.504746604984834, 9.174575712596916}, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3351294598358471705|>]}, 
                   "Invertibility" -> "Perfect", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{-0.2573241038378381, 
                   0.8994516261877938}, {-0.6450502744104483, \
-0.43205841944994094`}, {-0.7195098672478779, 0.06566806172373328}}, 
                  "Precisions" -> {0.5919102827503028, 0.9435455551803141}, 
                  "NoisePrecision" -> 4.039404099667452, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {-0.0006801558854609856, \
-0.00024202445494255392`, 0.0021950700934157343`}, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 8722503918180358647|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>, 
                    "Key" -> "(f1f2f3)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 2, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {-0.0006801558854610225, \
-0.00024202445494255392`, 0.002195070093415722}, 
                    "StandardDeviation" -> {1.000087284650148, 
                    0.9995723164454201, 0.9987588995481079}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    2143139376538970117|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                   "Mean" -> {-0.0006801558854610225, \
-0.00024202445494255392`, 0.002195070093415722}, 
                   "StandardDeviation" -> {1.000087284650148, 
                    0.9995723164454201, 0.9987588995481079}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 3, 
                   "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   2143139376538970117|>], "InputDimension" -> 0, 
                "OutputDimension" -> 3, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, 
                    "ID" -> 4922843929423532927|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, 
                    "ID" -> 365386638938414886|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, 
                    "ID" -> 8084762059231395715|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.144337, "MaxTrainingMemory" -> 188400, 
                  "DataMemory" -> 4192, "FunctionMemory" -> 44912, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 11, 10, 20, 59, 25.555745`8.160063528351342}, 
                    "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-4.308187280572467, -4.2625087961205885`, \
-4.193294888721262, -4.120863377844668, -4.08148113715749, \
-4.0390683085715375`, -3.817262136706334, -3.797917479242584, \
-3.738672136229833, -3.695662645384793, -3.424557336190307}, 
                   "LeftBoundary" -> -4.2625087961205885`, "LeftScale" -> 
                   0.022839242225939138`, "LeftTailNorm" -> 
                   0.18181818181818182`|>], "Entropy" -> 
                Around[11.858038778929599`, 0.25029184471563437`], 
                "EntropySampleSize" -> 11|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 967176822927612644|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1783680118875305151|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
             "Mean" -> {645.9444444444445, 16.72222222222222, 
              50.77777777777777}, 
             "StandardDeviation" -> {42.37330425610238, 6.504746604984834, 
              9.174575712596916}, 
             "Output" -> <|
              "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 5995433924943303780|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 5874757204722672291|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {184.31444444444443`}, 
             "StandardDeviation" -> {60.93164478169345}, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1753789756623536193|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>,
              "Version" -> {13.1, 0}, "ID" -> 1356618763548457018|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Numerical", "Weight" -> 1|>, "Key" -> "f1",
              "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
             "Missing" -> "Allowed"|>]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
      "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (184.31444444444443` + 
       60.93164478169345 #& ), 
      "ProcessorFunction" -> (-3.024937946526935 + 0.01641183335166498 #& ), 
      "Name" -> "value", 
      "Quantiles" -> {-1.4146088580615672`, 2.801427011647649}, "Mean" -> 
      184.31444444444443`|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 
    0, "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "MeanFunction" -> 
      LinearLayer[<|
        "Type" -> "Linear", 
         "Arrays" -> <|
          "Weights" -> 
           RawArray["Real32",{{0.6530722379684448, 
             0.010319861583411694`, -0.2442297786474228}}], "Biases" -> 
           RawArray["Real32",{1.9230597959609227`*^-16}]|>, 
         "Parameters" -> <|
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 3, 
           "$InputDimensions" -> {3}|>, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "DistributionData" -> {NormalDistribution, 0.8511378976190797}, 
      "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
         "Output" -> <|
          "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
             "Mean" -> {0.0010005829440920357`, -0.001163115352594958, 
              0.0023277626048840705`}, 
             "StandardDeviation" -> {0.9982461500590688, 1.0017980456068871`, 
              0.9992843470454407}, 
             "Output" -> <|
              "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1118215739088705181|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>, "Key" -> 
             "(f1f2f3)", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"|>]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
      "Calibrator" -> None, "Method" -> "LinearRegression", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> 1., "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> "NormalEquation", "Options" -> <||>|>, 
        MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Predict, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 
      4.109752658507797, "PreprocessingTime" -> 0.228122`5.809712163989072, 
      "LossName" -> "StandardDeviation", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[5.554761803412535, 0.1887432392963882], "StandardDeviation" -> 
         Around[59.808748425648844`, 9.992023265371412], "EvaluationTime" -> 
         0.00041674175424066644`, "TestSize" -> 16, "ModelMemory" -> 15488., 
         "ModelUtility" -> -4.81717151222038, "TrainingSize" -> 14, 
         "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 71961.6, 
         "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
           Around[5.528065877249032, 0.1799339979372372], 
           Around[5.328919979118339, 0.12268850220041012`], 
           Around[5.313956532083814, 0.1265495090811178], 
           Around[6.048104825198956, 0.807224533128675]}, 
         "StandardDeviationHistory" -> {
           Around[62.286236789974176`, 11.140629991109126`], 
           Around[50.13445037997165, 12.611901075574972`], 
           Around[47.676415405582084`, 14.073576543755195`], 
           Around[79.13789112706745, 26.874081627914048`]}, 
         "Configuration" -> {
          "LinearRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           1., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 18|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 4], 
          TypeSystem`Vector[TypeSystem`AnyType, 4], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.001|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.578067385382692, 0.20511146766459717`], 
              "StandardDeviation" -> 
              Around[60.48161645407292, 10.370911566406393`], 
              "EvaluationTime" -> 0.00041674175424066644`, "TestSize" -> 16, 
              "ModelMemory" -> 15488., "ModelUtility" -> -4.829211347573086, 
              "TrainingSize" -> 14, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 71995.2, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[5.54968797271442, 0.19159723313224783`], 
                Around[5.342353197210087, 0.12274980039674521`], 
                Around[5.300593942427395, 0.13070827269004898`], 
                Around[6.119634429178868, 0.8702737570853354]}, 
              "StandardDeviationHistory" -> {
                Around[63.21620647697764, 11.289011266084913`], 
                Around[51.215265742969976`, 12.261456318209278`], 
                Around[46.621072828459916`, 14.800126727097634`], 
                Around[80.87392076788417, 27.76266900707586]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00041674175424066644`, "ModelMemory" -> 
             15488., "StandardDeviation" -> 
             Around[60.48161645407292, 10.370911566406393`], "TrainingMemory" -> 
             71995.2, "TrainingTime" -> 0.007445296664866278|>, "Index" -> 
           1|>, <|"Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 10000.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.484764194760987, 0.06090899904496995], 
              "StandardDeviation" -> 
              Around[55.672373562254286`, 7.005499951868863], 
              "EvaluationTime" -> 0.00039622329811527814`, "TestSize" -> 12, 
              "ModelMemory" -> 15488., "ModelUtility" -> -4.737491835795887, 
              "TrainingSize" -> 14, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 71990., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[5.475999291461972, 0.10265931066831549`], 
                Around[5.471298416319264, 0.10270516129655001`], 
                Around[5.506994876501725, 0.10582748412454836`]}, 
              "StandardDeviationHistory" -> {
                Around[54.45999145141262, 12.088354775588297`], 
                Around[53.65014758350443, 12.401014860759615`], 
                Around[58.90698165184583, 11.041312729407705`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00039622329811527814`, "ModelMemory" -> 
             15488., "StandardDeviation" -> 
             Around[55.672373562254286`, 7.005499951868863], "TrainingMemory" -> 
             71990., "TrainingTime" -> 0.007445296664866278|>, "Index" -> 
           2|>, <|"Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.00001|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.578100004599017, 0.20513315984232605`], 
              "StandardDeviation" -> 
              Around[60.48270945585449, 10.371489044707614`], 
              "EvaluationTime" -> 0.0003962232981152782, "TestSize" -> 16, 
              "ModelMemory" -> 15488., "ModelUtility" -> -4.82923064557973, 
              "TrainingSize" -> 14, "TrainingTime" -> 0.006636315225290107, 
              "TrainingMemory" -> 71990.40000000001, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[5.5497131524292, 0.19161077758130832`], 
                Around[5.342373428680428, 0.12275059080466098`], 
                Around[5.300580832694735, 0.1307118468481782], 
                Around[6.119732604591709, 0.8703436684645364]}, 
              "StandardDeviationHistory" -> {
                Around[63.21736969802032, 11.289258540381836`], 
                Around[51.21671686443765, 12.26107753116082], 
                Around[46.619937068559956`, 14.800893660468724`], 
                Around[80.87681419240003, 27.76378617710668]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0003962232981152782, "ModelMemory" -> 
             15488., "StandardDeviation" -> 
             Around[60.48270945585449, 10.371489044707614`], "TrainingMemory" -> 
             71990.40000000001, "TrainingTime" -> 0.007830851965842326|>, 
           "Index" -> 3|>, <|
          "Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.554761803412535, 0.1887432392963882], 
              "StandardDeviation" -> 
              Around[59.808748425648844`, 9.992023265371412], 
              "EvaluationTime" -> 0.00041674175424066644`, "TestSize" -> 16, 
              "ModelMemory" -> 15488., "ModelUtility" -> -4.81717151222038, 
              "TrainingSize" -> 14, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 71961.6, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[5.528065877249032, 0.1799339979372372], 
                Around[5.328919979118339, 0.12268850220041012`], 
                Around[5.313956532083814, 0.1265495090811178], 
                Around[6.048104825198956, 0.807224533128675]}, 
              "StandardDeviationHistory" -> {
                Around[62.286236789974176`, 11.140629991109126`], 
                Around[50.13445037997165, 12.611901075574972`], 
                Around[47.676415405582084`, 14.073576543755195`], 
                Around[79.13789112706745, 26.874081627914048`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00041674175424066644`, "ModelMemory" -> 
             15488., "StandardDeviation" -> 
             Around[59.808748425648844`, 9.992023265371412], "TrainingMemory" -> 
             71961.6, "TrainingTime" -> 0.007445296664866278|>, "Index" -> 
           4|>, <|"Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.1|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.574921804284502, 0.2030065538554259], 
              "StandardDeviation" -> 
              Around[60.378178622272344`, 10.315956557901456`], 
              "EvaluationTime" -> 0.0003962232981152782, "TestSize" -> 16, 
              "ModelMemory" -> 15488., "ModelUtility" -> -4.827380423736478, 
              "TrainingSize" -> 14, "TrainingTime" -> 0.006636315225290107, 
              "TrainingMemory" -> 71926.40000000001, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[5.547214721517068, 0.1902652220942879], 
                Around[5.340419004188544, 0.12268164049252026`], 
                Around[5.30191201772879, 0.13034165470922407`], 
                Around[6.110141473703605, 0.8633078207883967]}, 
              "StandardDeviationHistory" -> {
                Around[63.103172961523896`, 11.265685398502391`], 
                Around[51.07497337683738, 12.299082885885122`], 
                Around[46.73382841510365, 14.723728219809225`], 
                Around[80.60073973562443, 27.653559999010206`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0003962232981152782, "ModelMemory" -> 
             15488., "StandardDeviation" -> 
             Around[60.378178622272344`, 10.315956557901456`], 
             "TrainingMemory" -> 71926.40000000001, "TrainingTime" -> 
             0.007830851965842326|>, "Index" -> 5|>, <|
          "Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.01|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.577771920826793, 0.20491484238431765`], 
              "StandardDeviation" -> 
              Around[60.471735578319965`, 10.365687620820538`], 
              "EvaluationTime" -> 0.0003962232981152782, "TestSize" -> 16, 
              "ModelMemory" -> 15488., "ModelUtility" -> -4.829036657091078, 
              "TrainingSize" -> 14, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 71907.2, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[5.549459499011185, 0.19147431163585812`], 
                Around[5.342170125707352, 0.12274272069413654`], 
                Around[5.3007131995377215`, 0.13067569175300336`], 
                Around[6.1187448590509135`, 0.8696382852507842]}, 
              "StandardDeviationHistory" -> {
                Around[63.205663578010125`, 11.286776509258413`], 
                Around[51.20212013194312, 12.264897388827178`], 
                Around[46.63139108195589, 14.793156801963303`], 
                Around[80.84776752137076, 27.752535542439055`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0003962232981152782, "ModelMemory" -> 
             15488., "StandardDeviation" -> 
             Around[60.471735578319965`, 10.365687620820538`], 
             "TrainingMemory" -> 71907.2, "TrainingTime" -> 
             0.007445296664866278|>, "Index" -> 6|>, <|
          "Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 100.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.613005325968788, 0.1640863293457181], 
              "StandardDeviation" -> 
              Around[62.9788960931767, 10.333834449096114`], "EvaluationTime" -> 
              0.00047509252150064154`, "TestSize" -> 16, "ModelMemory" -> 
              15488., "ModelUtility" -> -4.868241997878607, "TrainingSize" -> 
              14, "TrainingTime" -> 0.006636315225290107, "TrainingMemory" -> 
              71939.2, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                Around[5.4599578863703275`, 0.10833182264449004`], 
                Around[5.4379448732779165`, 0.10687277419288178`], 
                Around[5.484944946091861, 0.10283447021905104`], 
                Around[6.069173598135047, 0.6840849353101789]}, 
              "StandardDeviationHistory" -> {
                Around[55.259952229977145`, 11.908786458895701`], 
                Around[52.096601495390864`, 12.871452492190981`], 
                Around[57.86319894239028, 10.586131359098344`], 
                Around[86.69583170494853, 27.733879680820007`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00047509252150064154`, "ModelMemory" -> 
             15488., "StandardDeviation" -> 
             Around[62.9788960931767, 10.333834449096114`], "TrainingMemory" -> 
             71939.2, "TrainingTime" -> 0.007830851965842326|>, "Index" -> 
           7|>, <|"Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1000.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.482236697865219, 0.061073927210204625`], 
              "StandardDeviation" -> 
              Around[55.60930314813516, 6.996507667843528], "EvaluationTime" -> 
              0.00039622329811527814`, "TestSize" -> 12, "ModelMemory" -> 
              15488., "ModelUtility" -> -4.736354604095354, "TrainingSize" -> 
              14, "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
              71748., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                Around[5.474122810724629, 0.10319007406691721`], 
                Around[5.467787249395994, 0.10307896592454267`], 
                Around[5.5048000334750355`, 0.10552897319868434`]}, 
              "StandardDeviationHistory" -> {
                Around[54.53812638398599, 12.070578843038973`], 
                Around[53.478438159541525`, 12.45010523165169], 
                Around[58.811344900877984`, 10.985646564303881`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00039622329811527814`, "ModelMemory" -> 
             15488., "StandardDeviation" -> 
             Around[55.60930314813516, 6.996507667843528], "TrainingMemory" -> 
             71748., "TrainingTime" -> 0.007445296664866278|>, "Index" -> 
           8|>, <|"Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.0001|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.3975548262491, 0.11183273181391186`], 
              "StandardDeviation" -> 
              Around[53.68462974532449, 8.771308322561431], "EvaluationTime" -> 
              0.00039622329811527814`, "TestSize" -> 12, "ModelMemory" -> 
              15488., "ModelUtility" -> -4.708433746792534, "TrainingSize" -> 
              14, "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
              71796., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                Around[5.549710865878975, 0.19160954752127957`], 
                Around[5.342371590537497, 0.1227505184566942], 
                Around[5.300582022330829, 0.1307115226181426]}, 
              "StandardDeviationHistory" -> {
                Around[63.21726405609504, 11.289236072727553`], 
                Around[51.21658503510185, 12.261111905832207`], 
                Around[46.620040144776596`, 14.800824063184436`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00039622329811527814`, "ModelMemory" -> 
             15488., "StandardDeviation" -> 
             Around[53.68462974532449, 8.771308322561431], "TrainingMemory" -> 
             71796., "TrainingTime" -> 0.007445296664866278|>, "Index" -> 
           9|>, <|"Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 100000.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.637339181914188, 0.16376681433823803`], 
              "StandardDeviation" -> 
              Around[63.899201446423874`, 10.621738680009202`], 
              "EvaluationTime" -> 0.0003962232981152782, "TestSize" -> 16, 
              "ModelMemory" -> 15488., "ModelUtility" -> -4.883163872506583, 
              "TrainingSize" -> 14, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 71907.2, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[5.476192373963645, 0.10260615265004945`], 
                Around[5.471655583791052, 0.10266807193986724`], 
                Around[5.507216721802263, 0.1058574896588938], 
                Around[6.094292048099793, 0.6928535641932376]}, 
              "StandardDeviationHistory" -> {
                Around[54.45211753711327, 12.09014789559942], 
                Around[53.66772021908272, 12.396040241511349`], 
                Around[58.916523005587585`, 11.047063147027592`], 
                Around[88.56044502391195, 28.50712799380581]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0003962232981152782, "ModelMemory" -> 
             15488., "StandardDeviation" -> 
             Around[63.899201446423874`, 10.621738680009202`], 
             "TrainingMemory" -> 71907.2, "TrainingTime" -> 
             0.007445296664866278|>, "Index" -> 10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["LinearRegression"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 18, 
      "PreprocessorEvaluationTime" -> 3.58984375*^-6, "PreprocessorMemory" -> 
      67112, "InputDimension" -> 3, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.877102765662961`16.341082301637083*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 14, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.39825900000000003`, "ExperimentCounts" -> 37|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, "ID" -> 
           6448330931398477146|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, "ID" -> 
           1033804942478285849|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, "ID" -> 
           3644694514917083622|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 0.727134, 
      "MaxTrainingMemory" -> 454968, "DataMemory" -> 3496, "FunctionMemory" -> 
      201560, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 11, 10, 20, 59, 26.133554`8.169773457147098}, 
        "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877126464805312*^9, 3.877127932384633*^9, 
  3.877127966151301*^9},
 CellLabel->
  "Out[377]=",ExpressionUUID->"8a73c3e0-25a6-4654-8465-773f27605880"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"trainingset", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"a", "[", 
         RowBox[{"[", "j", "]"}], "]"}], "[", 
        RowBox[{"[", "i", "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"{", 
          RowBox[{"6", ",", "10", ",", "15", ",", "17"}], "}"}]}], "}"}]}], 
      "]"}], "->", 
     RowBox[{
      RowBox[{"a", "[", 
       RowBox[{"[", "j", "]"}], "]"}], "[", 
      RowBox[{"[", "5", "]"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "100", ",", "200"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8771264898162537`*^9, 3.877126501374213*^9}},
 CellLabel->
  "In[314]:=",ExpressionUUID->"f309d808-1389-4462-b753-c415ae92c5ca"],

Cell[BoxData[{
 RowBox[{"pm", "=", 
  RowBox[{"PredictorMeasurements", "[", 
   RowBox[{"p", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"601", ",", "16", ",", "53"}], "}"}], "\[Rule]", "171.93`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"664", ",", "24", ",", "61"}], "}"}], "\[Rule]", "152.04`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"624", ",", "11", ",", "34"}], "}"}], "\[Rule]", "172.67`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"573", ",", "21", ",", "62"}], "}"}], "\[Rule]", "140.39`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"597", ",", "23", ",", "49"}], "}"}], "\[Rule]", "96.13`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"585", ",", "8", ",", "54"}], "}"}], "\[Rule]", "158.5`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"573", ",", "21", ",", "62"}], "}"}], "\[Rule]", "140.39`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"597", ",", "23", ",", "49"}], "}"}], "\[Rule]", "96.13`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"585", ",", "8", ",", "54"}], "}"}], "\[Rule]", "158.5`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"611", ",", "12", ",", "49"}], "}"}], "\[Rule]", "164.63`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"620", ",", "19", ",", "69"}], "}"}], "\[Rule]", "222.78`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"624", ",", "11", ",", "34"}], "}"}], "\[Rule]", "172.67`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"737", ",", "24", ",", "47"}], "}"}], "\[Rule]", 
       "335.28`"}]}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"pm2", "=", 
  RowBox[{"PredictorMeasurements", "[", 
   RowBox[{"q", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"601", ",", "16", ",", "53"}], "}"}], "\[Rule]", "171.93`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"664", ",", "24", ",", "61"}], "}"}], "\[Rule]", "152.04`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"624", ",", "11", ",", "34"}], "}"}], "\[Rule]", "172.67`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"573", ",", "21", ",", "62"}], "}"}], "\[Rule]", "140.39`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"597", ",", "23", ",", "49"}], "}"}], "\[Rule]", "96.13`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"585", ",", "8", ",", "54"}], "}"}], "\[Rule]", "158.5`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"573", ",", "21", ",", "62"}], "}"}], "\[Rule]", "140.39`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"597", ",", "23", ",", "49"}], "}"}], "\[Rule]", "96.13`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"585", ",", "8", ",", "54"}], "}"}], "\[Rule]", "158.5`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"611", ",", "12", ",", "49"}], "}"}], "\[Rule]", "164.63`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"620", ",", "19", ",", "69"}], "}"}], "\[Rule]", "222.78`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"624", ",", "11", ",", "34"}], "}"}], "\[Rule]", "172.67`"}], 
      ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"737", ",", "24", ",", "47"}], "}"}], "\[Rule]", 
       "335.28`"}]}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.877126540406492*^9, 3.877126717616001*^9}, {
  3.877127916838894*^9, 3.877127917464612*^9}, {3.877127972601448*^9, 
  3.877127973320594*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellLabel->
  "In[382]:=",ExpressionUUID->"4db357d7-da48-477a-8c63-ebebfa9f3d08"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Information", "[", "p", "]"}], ",", 
   RowBox[{"Information", "[", "q", "]"}]}], "}"}]], "Input",
 CellLabel->
  "In[380]:=",ExpressionUUID->"3a2489bb-7c3d-466c-8ade-51822bde4b87"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Predictor information\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Data type"], 
                    TextCell["Data type"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 RowBox[{"{", 
                  
                  RowBox[{"\<\"Numerical\"\>", ",", "\<\"Numerical\"\>", 
                   ",", "\<\"Numerical\"\>"}], "}"}]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Standard deviation"], 
                    TextCell["Standard deviation"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"64.289776973513056646`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "13.6941293901739076233`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "36.9015181931652449521`3.", "\", \"", 
                    "91.6780357538608683399`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    36.9015181931652449521`3., ", ", 
                    91.6780357538608683399`3., "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Method"], 
                    TextCell["Method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   
                   InterpretationBox[Cell[
                    "NeuralNetwork",ExpressionUUID->
                    "07797214-124a-4e5c-a1ff-1cf95ce6723d"],
                    TextCell["NeuralNetwork"]],
                   StyleBox[
                    TagBox[
                    
                    GridBox[{{"\"NetworkDepth\"", "2"}, {
                    "MaxTrainingRounds", "1000"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                    "Verdana", StripOnInput -> False]],
                  Annotation[#, 
                   Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                   "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"2.24`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"53.7`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"7.8641873313428938275`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "1.7871989582013108055`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "4.2897894149402722164`3.", "\", \"", 
                    "11.4385852477455145504`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    4.2897894149402722164`3., ", ", 11.4385852477455145504`3.,
                     "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Model memory"], 
                    TextCell["Model memory"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"240.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Training examples used"], 
                    TextCell["Training examples used"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 TemplateBox[{
                  "18", "\"examples\"", "examples", "\"Examples\""},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Training time"], 
                    TextCell["Training time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"2.36`", "\"s\"", "seconds", "\"Seconds\""},
                  "Quantity"]}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    MachineLearning`MLInformationObject[
     PredictorFunction[<|
      "ExampleNumber" -> 18, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Numerical"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 3|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Numerical", "Numerical", "Numerical"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 18, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1475203784826948804|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {645.9444444444445, 16.72222222222222, 
                    50.77777777777777}, 
                    "StandardDeviation" -> {42.37330425610238, 
                    6.504746604984834, 9.174575712596916}, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3351294598358471705|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.2573241038378381, 
                    0.8994516261877938}, {-0.6450502744104483, \
-0.43205841944994094`}, {-0.7195098672478779, 0.06566806172373328}}, 
                    "Precisions" -> {0.5919102827503028, 0.9435455551803141}, 
                    "NoisePrecision" -> 4.039404099667452, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {-0.0006801558854609856, \
-0.00024202445494255392`, 0.0021950700934157343`}, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 8722503918180358647|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>, 
                    "Key" -> "(f1f2f3)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 2, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {-0.0006801558854610225, \
-0.00024202445494255392`, 0.002195070093415722}, 
                    "StandardDeviation" -> {1.000087284650148, 
                    0.9995723164454201, 0.9987588995481079}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    2143139376538970117|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {-0.0006801558854610225, \
-0.00024202445494255392`, 0.002195070093415722}, 
                    "StandardDeviation" -> {1.000087284650148, 
                    0.9995723164454201, 0.9987588995481079}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    2143139376538970117|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 3, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, 
                    "ID" -> 4922843929423532927|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, 
                    "ID" -> 365386638938414886|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, 
                    "ID" -> 8084762059231395715|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.099699, "MaxTrainingMemory" -> 188264,
                     "DataMemory" -> 4192, "FunctionMemory" -> 44912, 
                    "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 11, 10, 20, 59, 23.134482`8.116834762622261}, 
                    "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}|>,
                    "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-4.306467677914701, -4.306467677914701, \
-4.260797744099717, -4.196274605521246, -4.120584106364819, \
-4.07765387661082, -4.042601145301235, -3.817664807796254, -3.79481845480472, \
-3.7386590251861964`, -3.6937309414537625`}, 
                    "LeftBoundary" -> -4.260797744099717, "LeftScale" -> 
                    0.02283496690749187, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[12.014775715516041`, 0.2144877574475317], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 967176822927612644|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 1783680118875305151|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                "Mean" -> {645.9444444444445, 16.72222222222222, 
                 50.77777777777777}, 
                "StandardDeviation" -> {42.37330425610238, 6.504746604984834, 
                 9.174575712596916}, 
                "Output" -> <|
                 "(f1f2f3)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 5995433924943303780|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Numerical"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 5874757204722672291|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {184.31444444444443`}, 
                "StandardDeviation" -> {60.93164478169345}, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 1753789756623536193|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 1356618763548457018|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "Numerical", "Weight" -> 1|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
         "InverseProcessorFunction" -> (184.31444444444443` + 
          60.93164478169345 #& ), 
         "ProcessorFunction" -> (-3.024937946526935 + 
          0.01641183335166498 #& ), "Name" -> "value", 
         "Quantiles" -> {-1.4146088580615672`, 2.801427011647649}, "Mean" -> 
         184.31444444444443`|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 
       0, "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "Method" -> "NeuralNetwork", "Network" -> 
         NetGraph[<|
           "Type" -> "Graph", 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Mean" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
              "LogStd" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>,
             "Nodes" -> <|
             "2" -> <|"Type" -> "NetArray", 
                "Arrays" -> <|
                 "Array" -> RawArray["Real32",{-1.2026623487472534`}]|>, 
                "Parameters" -> <|
                 "Dimensions" -> 
                  NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                  "$ArrayDimensions" -> {1}|>, "Inputs" -> <||>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>|>, 
              "1" -> <|"Type" -> "Chain", 
                "Nodes" -> <|
                 "1" -> <|
                   "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1:eJwBhgJ5/SFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
MgAAAAMAAAApU/G+Rwv1vYNoh7+iTXY/xNHXP7hXXL+/9SO/fex0vHywnD7u
mmO/52iQu3SlGz2fNQ0/xIXIvj+akL1lcjg/nSyNve0TKT755Si+n6MTvCFJ
iD5KnLe/IPq7PaeGDr/fTxe/6URZv055uD4LkZw9Uolevg6kOz+sVXg+mfPW
PqyXRz9AkSu/UmrLvnQvO78gHMo+oAomOzuOZb5BnjY/+AEqPo74Fb8Cflw/
jBSPPif6Ar+iPee+A3QQvi9WyD76rc6+mEr6PP1Bwj5Zl4k+o3OFP55sTL6P
fB0+z5+LPpo+gz2lrcg+Ga+SP/HzGT6s0s0+n9GvPjo6aT50Cgq/fLigPXCh
yj4IV70/ue7IPMkFsL1nYGm/DOQyv7M/3L6gRuC956GGPTpsKb80m5I9ZbxF
v99EBD5jbIk+wSAqvSDgqL4AbOA9lM0APlOfUj4MsB2/LArMvmOqaD+k76U/
QP42v3wVUz/cCp4+w/c5v2E91j4Ky4a+8zVEv9b+IT4eZpw+h6HLv7dVbT+J
S1o/8MQgvtP0xj34o+M+ywaEvnqZ6j50VCy+JJtIP1I/j7946iS98YQsP/1/
v736ung+Kzcav48WWT/jWlI/hfxYv3KkML5cTKe+owKAvnOEGj8ZcDa/fPUo
P0VaJj+b9Ru/tXhHP6/cGb+AGp87OGlZvgWroj4Ud9M+Bh5xPsl4kz+uVHe+
rEt1vlD1IL+6d6e+IzjkPg2CD793cIg+B8CQP07vDD+iKxk+oqCvvWTQbL8i
gs+/sihxv7WMpT5oYj8+2RrcPuETDb9idyhR
                    "], "Biases" -> 
                    RawArray["Real32",{
                    0.1662415713071823, -0.09961794316768646, 
                    0.32554981112480164`, -0.03895267844200134, 
                    0.026986006647348404`, -0.11711698770523071`, \
-0.0018490329384803772`, -0.21284927427768707`, -0.08810210973024368, \
-0.0713057816028595, -0.10721893608570099`, 0.11300480365753174`, 
                    0.09939642250537872, 
                    0.08141794800758362, -0.07147223502397537, 
                    0.16995258629322052`, 0.017666302621364594`, 
                    0.10332654416561127`, -0.11204160004854202`, \
-0.09295991063117981, 0.10189927369356155`, 
                    0.08433710038661957, -0.22633658349514008`, 
                    0.00293967523612082, 
                    0.09507199376821518, -0.03730040788650513, 
                    0.024995766580104828`, -0.10215723514556885`, 
                    0.0514688640832901, -0.12504132091999054`, \
-0.045884277671575546`, 0.06300043314695358, 
                    0.22512124478816986`, -0.2100604623556137, 
                    0.14657224714756012`, -0.15988637506961823`, 
                    0.09150736033916473, 
                    0.03330683708190918, -0.051095739006996155`, \
-0.062419407069683075`, 
                    0.005526383873075247, -0.061654478311538696`, \
-0.15795403718948364`, -0.21940100193023682`, -0.17105408012866974`, \
-0.26515254378318787`, 0.04080977663397789, -0.17640121281147003`, 
                    0.15114234387874603`, 0.14034007489681244`}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "2" -> <|
                   "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "3" -> <|
                   "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "4" -> <|
                   "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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
                    "], "Biases" -> 
                    RawArray["Real32",{-0.056264638900756836`, 
                    0.20743033289909363`, -0.07040610164403915, \
-0.1134888231754303, -0.05717797577381134, 
                    0.15228143334388733`, -0.008128189481794834, \
-0.09413044154644012, -0.14826364815235138`, -0.09609245508909225, 
                    0.09827321767807007, -0.049553707242012024`, 
                    0.03114297427237034, -0.02640373446047306, \
-0.03339345380663872, -0.009061370976269245, -0.09825214743614197, 
                    0.02453150786459446, 0.016251476481556892`, 
                    0.22742263972759247`, -0.04466868191957474, 
                    0.006153336260467768, 
                    0.06594887375831604, -0.11166111379861832`, \
-0.20282049477100372`, -0.03444327414035797, 0.05591721460223198, 
                    0.04535047337412834, -0.12424278259277344`, 
                    0.12791100144386292`, 0.11521118879318237`, 
                    0.05920711159706116, -0.010243697091937065`, 
                    0.014077454805374146`, 
                    0.04828822240233421, -0.07872626930475235, \
-0.09209168702363968, 0.03714662417769432, 0.08806450664997101, 
                    0.023828579112887383`, 
                    0.16367584466934204`, -0.016234688460826874`, \
-0.18068884313106537`, 0.02248004823923111, -0.026014337316155434`, 
                    0.1722862720489502, -0.009757071733474731, 
                    0.0498596653342247, 
                    0.013079040683805943`, -0.040247734636068344`}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "5" -> <|
                   "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "6" -> <|
                   "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.11596079915761948`, -0.22197158634662628`, \
-0.17007751762866974`, 0.15629735589027405`, 
                    0.10191899538040161`, -0.09801425784826279, 
                    0.15009847283363342`, 0.1595337986946106, 
                    0.13837839663028717`, 
                    0.07317785918712616, -0.08839797228574753, 
                    0.2184947431087494, -0.06876114755868912, \
-0.17075787484645844`, 0.12701722979545593`, 0.11237279325723648`, 
                    0.0865621566772461, -0.12347730249166489`, \
-0.012791935354471207`, -0.09327255934476852, 
                    0.23357655107975006`, -0.03654654324054718, \
-0.05884390324354172, 0.12931932508945465`, 
                    0.02260141260921955, -0.1737203449010849, \
-0.20786359906196594`, -0.39979177713394165`, 
                    0.10866546630859375`, -0.1444506198167801, \
-0.09505712240934372, -0.11759717762470245`, -0.01552331168204546, 
                    0.14518693089485168`, -0.20120006799697876`, 
                    0.1651909500360489, 
                    0.17747335135936737`, -0.041564587503671646`, \
-0.29594501852989197`, -0.17639997601509094`, -0.07808875292539597, \
-0.07619776576757431, 0.12988652288913727`, -0.1105971410870552, 
                    0.10653827339410782`, -0.03841139003634453, 
                    0.13663174211978912`, -0.10922832041978836`, \
-0.1192498579621315, 0.045604024082422256`}}], "Biases" -> 
                    RawArray["Real32",{-0.0800107941031456}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                "Edges" -> {
                 NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Outputs", "Output"] -> 
                  NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"]}, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Outputs", "LogStd"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Mean"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"]}|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "Training" -> <|
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 1.821448, "MeanInputsPerSecond" -> 
           7686.192523750335|>, "InputType" -> "NumericalVector", "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
            "Output" -> <|
             "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                "Mean" -> {-0.12131932370113982`, 0.08651200969715658, 
                 0.03508607974586253}, 
                "StandardDeviation" -> {1.0892644778853724`, 
                 1.0128098885978352`, 1.071396014492115}, 
                "Output" -> <|
                 "(f1f2f3)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 1445580447275447545|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>, 
                "Key" -> "(f1f2f3)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "FeatureNumber" -> 3, 
         "DistributionData" -> {NormalDistribution, Automatic}, "Calibrator" -> 
         None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>,
            "NetworkDepth" -> <|"Value" -> 2, "Options" -> <||>|>, 
           "NumberOfParameters" -> <|"Value" -> 2700, "Options" -> <||>|>, 
           "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
           "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
           "NetInitializationMethod" -> <|
            "Value" -> Automatic, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> {"ADAM", "L2Regularization" -> None}, 
             "Options" -> <||>|>, 
           MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
           ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
           TrainingProgressReporting -> <|
            "Value" -> None, "Options" -> <||>|>, 
           "NetTrainOptions" -> <|
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> <||>|>, 
           "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "ValidationSetRatio" -> <|"Value" -> None, "Options" -> <||>|>|>|>,
        "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Predict, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 
         4.109752658507797, "PreprocessingTime" -> 0.250199`5.849830563060611,
          "LossName" -> "StandardDeviation", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[7.864187331342894, 1.7871989582013108`], 
            "StandardDeviation" -> 
            Around[64.28977697351306, 13.694129390173908`], "EvaluationTime" -> 
            0.003962232981152784, "TestSize" -> 4, "ModelMemory" -> 66176, 
            "ModelUtility" -> -5.0365583646477345`, "TrainingSize" -> 14, 
            "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 427656,
             "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[7.864187331342894, 1.2637405026736799`]}, 
            "StandardDeviationHistory" -> {
              Around[64.28977697351306, 9.68321175423797]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 2, "NumberOfParameters" -> 2700, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> 0.01, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
           
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
             "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
             "TrainingTime", "TrainingMemory", "ExperimentCount", 
             "MeanCrossEntropyHistory", "StandardDeviationHistory", 
             "Configuration"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 2700|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[7.864187331342894, 1.7871989582013108`], 
                 "StandardDeviation" -> 
                 Around[64.28977697351306, 13.694129390173908`], 
                 "EvaluationTime" -> 0.003962232981152784, "TestSize" -> 4, 
                 "ModelMemory" -> 66176, 
                 "ModelUtility" -> -5.0365583646477345`, "TrainingSize" -> 14,
                  "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 427656, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[7.864187331342894, 1.2637405026736799`]}, 
                 "StandardDeviationHistory" -> {
                   Around[64.28977697351306, 9.68321175423797]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.003962232981152784, "ModelMemory" -> 
                66176, "StandardDeviation" -> 
                Around[64.28977697351306, 13.694129390173908`], 
                "TrainingMemory" -> 427656, "TrainingTime" -> 
                2.3544095316632783`|>, "Index" -> 1|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 17700|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
              2|>, <|"Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 2700|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
              3|>, <|"Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 17700|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
              4|>, <|"Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 7700|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
              5|>, <|"Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 7700|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
              6|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                 "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "ModelMemory", "StandardDeviation", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 6], <||>], "MaxTrainingSize" -> 18, 
         "PreprocessorEvaluationTime" -> 5.*^-6, "PreprocessorMemory" -> 
         67112, "InputDimension" -> 3, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.877102765373339`16.341082301604636*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 14, "TimeBudgets" -> 2.0429971279893104`, 
             "ElapsedTimes" -> 2.069259, "ExperimentCounts" -> 1|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 1], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, "ID" -> 
              6448330931398477146|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, "ID" -> 
              1033804942478285849|>, 
            "f3" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, "ID" -> 
              3644694514917083622|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 2.3657, 
         "MaxTrainingMemory" -> 630384, "DataMemory" -> 3496, 
         "FunctionMemory" -> 237816, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 11, 10, 20, 59, 25.391803`8.157268522330636}, 
           "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>]]], ",", 
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Predictor information\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Data type"], 
                    TextCell["Data type"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 RowBox[{"{", 
                  
                  RowBox[{"\<\"Numerical\"\>", ",", "\<\"Numerical\"\>", 
                   ",", "\<\"Numerical\"\>"}], "}"}]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Standard deviation"], 
                    TextCell["Standard deviation"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"59.8087484256488437495`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "9.9920232653714116111`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "39.8247018949060205273`3.", "\", \"", 
                    "79.7927949563916740772`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    39.8247018949060205273`3., ", ", 
                    79.7927949563916740772`3., "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Method"], 
                    TextCell["Method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   
                   InterpretationBox[Cell[
                    "LinearRegression",ExpressionUUID->
                    "160bbafc-9de3-4276-ad33-120298d1608c"],
                    TextCell["LinearRegression"]],
                   StyleBox[
                    TagBox[
                    
                    GridBox[{{"\"L1Regularization\"", "0"}, {
                    "\"L2Regularization\"", "1.`"}, {
                    "\"OptimizationMethod\"", "\"NormalEquation\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                    "Verdana", StripOnInput -> False]],
                  Annotation[#, 
                   Style[
                    
                    Grid[{{"L1Regularization", 0}, {"L2Regularization", 1.}, {
                    "OptimizationMethod", "NormalEquation"}}, Alignment -> 
                    Left, Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                   "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"1.54`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"337.`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"5.5547618034125347819`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1887432392963881989`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "5.1772753248197584952`3.", "\", \"", 
                    "5.9322482820053110686`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    5.1772753248197584952`3., ", ", 5.9322482820053110686`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Model memory"], 
                    TextCell["Model memory"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"205.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Training examples used"], 
                    TextCell["Training examples used"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                  "18", "\"examples\"", "examples", "\"Examples\""},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Training time"], 
                    TextCell["Training time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 TemplateBox[{
                  "727.`", "\"ms\"", "milliseconds", "\"Milliseconds\""},
                  "Quantity"]}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    MachineLearning`MLInformationObject[
     PredictorFunction[<|
      "ExampleNumber" -> 18, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Numerical"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 3|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Numerical", "Numerical", "Numerical"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 18, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1475203784826948804|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {645.9444444444445, 16.72222222222222, 
                    50.77777777777777}, 
                    "StandardDeviation" -> {42.37330425610238, 
                    6.504746604984834, 9.174575712596916}, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3351294598358471705|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.2573241038378381, 
                    0.8994516261877938}, {-0.6450502744104483, \
-0.43205841944994094`}, {-0.7195098672478779, 0.06566806172373328}}, 
                    "Precisions" -> {0.5919102827503028, 0.9435455551803141}, 
                    "NoisePrecision" -> 4.039404099667452, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {-0.0006801558854609856, \
-0.00024202445494255392`, 0.0021950700934157343`}, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 8722503918180358647|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>, 
                    "Key" -> "(f1f2f3)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 2, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {-0.0006801558854610225, \
-0.00024202445494255392`, 0.002195070093415722}, 
                    "StandardDeviation" -> {1.000087284650148, 
                    0.9995723164454201, 0.9987588995481079}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    2143139376538970117|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {-0.0006801558854610225, \
-0.00024202445494255392`, 0.002195070093415722}, 
                    "StandardDeviation" -> {1.000087284650148, 
                    0.9995723164454201, 0.9987588995481079}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    2143139376538970117|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 3, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, 
                    "ID" -> 4922843929423532927|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, 
                    "ID" -> 365386638938414886|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, 
                    "ID" -> 8084762059231395715|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.144337, "MaxTrainingMemory" -> 188400,
                     "DataMemory" -> 4192, "FunctionMemory" -> 44912, 
                    "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 11, 10, 20, 59, 25.555745`8.160063528351342}, 
                    "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}|>,
                    "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-4.308187280572467, -4.2625087961205885`, \
-4.193294888721262, -4.120863377844668, -4.08148113715749, \
-4.0390683085715375`, -3.817262136706334, -3.797917479242584, \
-3.738672136229833, -3.695662645384793, -3.424557336190307}, 
                    "LeftBoundary" -> -4.2625087961205885`, "LeftScale" -> 
                    0.022839242225939138`, "LeftTailNorm" -> 
                    0.18181818181818182`|>], "Entropy" -> 
                   Around[11.858038778929599`, 0.25029184471563437`], 
                   "EntropySampleSize" -> 11|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 967176822927612644|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 1783680118875305151|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                "Mean" -> {645.9444444444445, 16.72222222222222, 
                 50.77777777777777}, 
                "StandardDeviation" -> {42.37330425610238, 6.504746604984834, 
                 9.174575712596916}, 
                "Output" -> <|
                 "(f1f2f3)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 5995433924943303780|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Numerical"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 5874757204722672291|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {184.31444444444443`}, 
                "StandardDeviation" -> {60.93164478169345}, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 1753789756623536193|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 1356618763548457018|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "Numerical", "Weight" -> 1|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
         "InverseProcessorFunction" -> (184.31444444444443` + 
          60.93164478169345 #& ), 
         "ProcessorFunction" -> (-3.024937946526935 + 
          0.01641183335166498 #& ), "Name" -> "value", 
         "Quantiles" -> {-1.4146088580615672`, 2.801427011647649}, "Mean" -> 
         184.31444444444443`|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 
       0, "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "MeanFunction" -> 
         LinearLayer[<|
           "Type" -> "Linear", 
            "Arrays" -> <|
             "Weights" -> 
              RawArray["Real32",{{0.6530722379684448, 
                0.010319861583411694`, -0.2442297786474228}}], "Biases" -> 
              RawArray["Real32",{1.9230597959609227`*^-16}]|>, 
            "Parameters" -> <|
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 3,
               "$InputDimensions" -> {3}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "DistributionData" -> {NormalDistribution, 0.8511378976190797}, 
         "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
            "Output" -> <|
             "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                "Mean" -> {0.0010005829440920357`, -0.001163115352594958, 
                 0.0023277626048840705`}, 
                "StandardDeviation" -> {0.9982461500590688, 
                 1.0017980456068871`, 0.9992843470454407}, 
                "Output" -> <|
                 "(f1f2f3)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 1118215739088705181|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>, 
                "Key" -> "(f1f2f3)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
         "LinearRegression", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> 1., "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> "NormalEquation", "Options" -> <||>|>, 
           MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Predict, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 
         4.109752658507797, "PreprocessingTime" -> 0.228122`5.809712163989072,
          "LossName" -> "StandardDeviation", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[5.554761803412535, 0.1887432392963882], 
            "StandardDeviation" -> 
            Around[59.808748425648844`, 9.992023265371412], "EvaluationTime" -> 
            0.00041674175424066644`, "TestSize" -> 16, "ModelMemory" -> 
            15488., "ModelUtility" -> -4.81717151222038, "TrainingSize" -> 14,
             "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
            71961.6, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
              Around[5.528065877249032, 0.1799339979372372], 
              Around[5.328919979118339, 0.12268850220041012`], 
              Around[5.313956532083814, 0.1265495090811178], 
              Around[6.048104825198956, 0.807224533128675]}, 
            "StandardDeviationHistory" -> {
              Around[62.286236789974176`, 11.140629991109126`], 
              Around[50.13445037997165, 12.611901075574972`], 
              Around[47.676415405582084`, 14.073576543755195`], 
              Around[79.13789112706745, 26.874081627914048`]}, 
            "Configuration" -> {
             "LinearRegression", "L1Regularization" -> 0, "L2Regularization" -> 
              1., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
            "FinalTrainingSize" -> 18|>, 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
             "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
             "TrainingTime", "TrainingMemory", "ExperimentCount", 
             "MeanCrossEntropyHistory", "StandardDeviationHistory", 
             "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 4], 
             TypeSystem`Vector[TypeSystem`AnyType, 4], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.578067385382692, 0.20511146766459717`], 
                 "StandardDeviation" -> 
                 Around[60.48161645407292, 10.370911566406393`], 
                 "EvaluationTime" -> 0.00041674175424066644`, "TestSize" -> 
                 16, "ModelMemory" -> 15488., 
                 "ModelUtility" -> -4.829211347573086, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 71995.2, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                   Around[5.54968797271442, 0.19159723313224783`], 
                   Around[5.342353197210087, 0.12274980039674521`], 
                   Around[5.300593942427395, 0.13070827269004898`], 
                   Around[6.119634429178868, 0.8702737570853354]}, 
                 "StandardDeviationHistory" -> {
                   Around[63.21620647697764, 11.289011266084913`], 
                   Around[51.215265742969976`, 12.261456318209278`], 
                   Around[46.621072828459916`, 14.800126727097634`], 
                   Around[80.87392076788417, 27.76266900707586]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00041674175424066644`, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[60.48161645407292, 10.370911566406393`], 
                "TrainingMemory" -> 71995.2, "TrainingTime" -> 
                0.007445296664866278|>, "Index" -> 1|>, <|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 10000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.484764194760987, 0.06090899904496995], 
                 "StandardDeviation" -> 
                 Around[55.672373562254286`, 7.005499951868863], 
                 "EvaluationTime" -> 0.00039622329811527814`, "TestSize" -> 
                 12, "ModelMemory" -> 15488., 
                 "ModelUtility" -> -4.737491835795887, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 71990., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[5.475999291461972, 0.10265931066831549`], 
                   Around[5.471298416319264, 0.10270516129655001`], 
                   Around[5.506994876501725, 0.10582748412454836`]}, 
                 "StandardDeviationHistory" -> {
                   Around[54.45999145141262, 12.088354775588297`], 
                   Around[53.65014758350443, 12.401014860759615`], 
                   Around[58.90698165184583, 11.041312729407705`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00039622329811527814`, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[55.672373562254286`, 7.005499951868863], 
                "TrainingMemory" -> 71990., "TrainingTime" -> 
                0.007445296664866278|>, "Index" -> 2|>, <|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.00001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.578100004599017, 0.20513315984232605`], 
                 "StandardDeviation" -> 
                 Around[60.48270945585449, 10.371489044707614`], 
                 "EvaluationTime" -> 0.0003962232981152782, "TestSize" -> 16, 
                 "ModelMemory" -> 15488., "ModelUtility" -> -4.82923064557973,
                  "TrainingSize" -> 14, "TrainingTime" -> 
                 0.006636315225290107, "TrainingMemory" -> 71990.40000000001, 
                 "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                   Around[5.5497131524292, 0.19161077758130832`], 
                   Around[5.342373428680428, 0.12275059080466098`], 
                   Around[5.300580832694735, 0.1307118468481782], 
                   Around[6.119732604591709, 0.8703436684645364]}, 
                 "StandardDeviationHistory" -> {
                   Around[63.21736969802032, 11.289258540381836`], 
                   Around[51.21671686443765, 12.26107753116082], 
                   Around[46.619937068559956`, 14.800893660468724`], 
                   Around[80.87681419240003, 27.76378617710668]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0003962232981152782, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[60.48270945585449, 10.371489044707614`], 
                "TrainingMemory" -> 71990.40000000001, "TrainingTime" -> 
                0.007830851965842326|>, "Index" -> 3|>, <|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.554761803412535, 0.1887432392963882], 
                 "StandardDeviation" -> 
                 Around[59.808748425648844`, 9.992023265371412], 
                 "EvaluationTime" -> 0.00041674175424066644`, "TestSize" -> 
                 16, "ModelMemory" -> 15488., 
                 "ModelUtility" -> -4.81717151222038, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 71961.6, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                   Around[5.528065877249032, 0.1799339979372372], 
                   Around[5.328919979118339, 0.12268850220041012`], 
                   Around[5.313956532083814, 0.1265495090811178], 
                   Around[6.048104825198956, 0.807224533128675]}, 
                 "StandardDeviationHistory" -> {
                   Around[62.286236789974176`, 11.140629991109126`], 
                   Around[50.13445037997165, 12.611901075574972`], 
                   Around[47.676415405582084`, 14.073576543755195`], 
                   Around[79.13789112706745, 26.874081627914048`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00041674175424066644`, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[59.808748425648844`, 9.992023265371412], 
                "TrainingMemory" -> 71961.6, "TrainingTime" -> 
                0.007445296664866278|>, "Index" -> 4|>, <|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.1|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.574921804284502, 0.2030065538554259], 
                 "StandardDeviation" -> 
                 Around[60.378178622272344`, 10.315956557901456`], 
                 "EvaluationTime" -> 0.0003962232981152782, "TestSize" -> 16, 
                 "ModelMemory" -> 15488., 
                 "ModelUtility" -> -4.827380423736478, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.006636315225290107, "TrainingMemory" -> 
                 71926.40000000001, "ExperimentCount" -> 4, 
                 "MeanCrossEntropyHistory" -> {
                   Around[5.547214721517068, 0.1902652220942879], 
                   Around[5.340419004188544, 0.12268164049252026`], 
                   Around[5.30191201772879, 0.13034165470922407`], 
                   Around[6.110141473703605, 0.8633078207883967]}, 
                 "StandardDeviationHistory" -> {
                   Around[63.103172961523896`, 11.265685398502391`], 
                   Around[51.07497337683738, 12.299082885885122`], 
                   Around[46.73382841510365, 14.723728219809225`], 
                   Around[80.60073973562443, 27.653559999010206`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0003962232981152782, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[60.378178622272344`, 10.315956557901456`], 
                "TrainingMemory" -> 71926.40000000001, "TrainingTime" -> 
                0.007830851965842326|>, "Index" -> 5|>, <|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.01|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.577771920826793, 0.20491484238431765`], 
                 "StandardDeviation" -> 
                 Around[60.471735578319965`, 10.365687620820538`], 
                 "EvaluationTime" -> 0.0003962232981152782, "TestSize" -> 16, 
                 "ModelMemory" -> 15488., 
                 "ModelUtility" -> -4.829036657091078, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 71907.2, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                   Around[5.549459499011185, 0.19147431163585812`], 
                   Around[5.342170125707352, 0.12274272069413654`], 
                   Around[5.3007131995377215`, 0.13067569175300336`], 
                   Around[6.1187448590509135`, 0.8696382852507842]}, 
                 "StandardDeviationHistory" -> {
                   Around[63.205663578010125`, 11.286776509258413`], 
                   Around[51.20212013194312, 12.264897388827178`], 
                   Around[46.63139108195589, 14.793156801963303`], 
                   Around[80.84776752137076, 27.752535542439055`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0003962232981152782, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[60.471735578319965`, 10.365687620820538`], 
                "TrainingMemory" -> 71907.2, "TrainingTime" -> 
                0.007445296664866278|>, "Index" -> 6|>, <|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 100.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.613005325968788, 0.1640863293457181], 
                 "StandardDeviation" -> 
                 Around[62.9788960931767, 10.333834449096114`], 
                 "EvaluationTime" -> 0.00047509252150064154`, "TestSize" -> 
                 16, "ModelMemory" -> 15488., 
                 "ModelUtility" -> -4.868241997878607, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.006636315225290107, "TrainingMemory" -> 
                 71939.2, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                   Around[5.4599578863703275`, 0.10833182264449004`], 
                   Around[5.4379448732779165`, 0.10687277419288178`], 
                   Around[5.484944946091861, 0.10283447021905104`], 
                   Around[6.069173598135047, 0.6840849353101789]}, 
                 "StandardDeviationHistory" -> {
                   Around[55.259952229977145`, 11.908786458895701`], 
                   Around[52.096601495390864`, 12.871452492190981`], 
                   Around[57.86319894239028, 10.586131359098344`], 
                   Around[86.69583170494853, 27.733879680820007`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00047509252150064154`, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[62.9788960931767, 10.333834449096114`], 
                "TrainingMemory" -> 71939.2, "TrainingTime" -> 
                0.007830851965842326|>, "Index" -> 7|>, <|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.482236697865219, 0.061073927210204625`], 
                 "StandardDeviation" -> 
                 Around[55.60930314813516, 6.996507667843528], 
                 "EvaluationTime" -> 0.00039622329811527814`, "TestSize" -> 
                 12, "ModelMemory" -> 15488., 
                 "ModelUtility" -> -4.736354604095354, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 71748., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[5.474122810724629, 0.10319007406691721`], 
                   Around[5.467787249395994, 0.10307896592454267`], 
                   Around[5.5048000334750355`, 0.10552897319868434`]}, 
                 "StandardDeviationHistory" -> {
                   Around[54.53812638398599, 12.070578843038973`], 
                   Around[53.478438159541525`, 12.45010523165169], 
                   Around[58.811344900877984`, 10.985646564303881`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00039622329811527814`, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[55.60930314813516, 6.996507667843528], 
                "TrainingMemory" -> 71748., "TrainingTime" -> 
                0.007445296664866278|>, "Index" -> 8|>, <|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.0001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.3975548262491, 0.11183273181391186`], 
                 "StandardDeviation" -> 
                 Around[53.68462974532449, 8.771308322561431], 
                 "EvaluationTime" -> 0.00039622329811527814`, "TestSize" -> 
                 12, "ModelMemory" -> 15488., 
                 "ModelUtility" -> -4.708433746792534, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 71796., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[5.549710865878975, 0.19160954752127957`], 
                   Around[5.342371590537497, 0.1227505184566942], 
                   Around[5.300582022330829, 0.1307115226181426]}, 
                 "StandardDeviationHistory" -> {
                   Around[63.21726405609504, 11.289236072727553`], 
                   Around[51.21658503510185, 12.261111905832207`], 
                   Around[46.620040144776596`, 14.800824063184436`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00039622329811527814`, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[53.68462974532449, 8.771308322561431], 
                "TrainingMemory" -> 71796., "TrainingTime" -> 
                0.007445296664866278|>, "Index" -> 9|>, <|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 100000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.637339181914188, 0.16376681433823803`], 
                 "StandardDeviation" -> 
                 Around[63.899201446423874`, 10.621738680009202`], 
                 "EvaluationTime" -> 0.0003962232981152782, "TestSize" -> 16, 
                 "ModelMemory" -> 15488., 
                 "ModelUtility" -> -4.883163872506583, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 71907.2, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                   Around[5.476192373963645, 0.10260615265004945`], 
                   Around[5.471655583791052, 0.10266807193986724`], 
                   Around[5.507216721802263, 0.1058574896588938], 
                   Around[6.094292048099793, 0.6928535641932376]}, 
                 "StandardDeviationHistory" -> {
                   Around[54.45211753711327, 12.09014789559942], 
                   Around[53.66772021908272, 12.396040241511349`], 
                   Around[58.916523005587585`, 11.047063147027592`], 
                   Around[88.56044502391195, 28.50712799380581]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0003962232981152782, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[63.899201446423874`, 10.621738680009202`], 
                "TrainingMemory" -> 71907.2, "TrainingTime" -> 
                0.007445296664866278|>, "Index" -> 10|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["LinearRegression"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                 "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 1], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "ModelMemory", "StandardDeviation", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 18,
          "PreprocessorEvaluationTime" -> 3.58984375*^-6, 
         "PreprocessorMemory" -> 67112, "InputDimension" -> 3, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.877102765662961`16.341082301637083*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 14, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.39825900000000003`, "ExperimentCounts" -> 37|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 1], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, "ID" -> 
              6448330931398477146|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, "ID" -> 
              1033804942478285849|>, 
            "f3" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, "ID" -> 
              3644694514917083622|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 0.727134, 
         "MaxTrainingMemory" -> 454968, "DataMemory" -> 3496, 
         "FunctionMemory" -> 201560, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 11, 10, 20, 59, 26.133554`8.169773457147098}, 
           "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>]]]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.877126756357561*^9, 3.877127989447137*^9},
 CellLabel->
  "Out[380]=",ExpressionUUID->"50f9021c-81fe-4e84-ac9a-cd508952f56f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"pm", ",", "pm2"}], "}"}]], "Input",
 CellChangeTimes->{{3.8771267342388897`*^9, 3.877126738725047*^9}},
 CellLabel->
  "In[384]:=",ExpressionUUID->"bbbf05b5-5f09-493f-9529-e122bb829c90"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Predictor Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Predictor method"], 
                    TextCell["Predictor method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "NeuralNetwork",ExpressionUUID->
                   "ff11a19d-afd0-4fd2-bb41-351db4080066"],
                  TextCell["NeuralNetwork"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "13"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Standard deviation"], 
                    TextCell["Standard deviation"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"58.8378629076318375724`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "10.5553318923908854288`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "37.7271991228500667148`3.", "\", \"", 
                    "79.9485266924136084299`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    37.7271991228500667148`3., ", ", 
                    79.9485266924136084299`3., "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Standard deviation baseline"], 
                    TextCell["Standard deviation baseline"]], 
                    "\"Standard deviation of testset values\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Standard deviation of testset values", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"57.7421393200359105435`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "19.5587420933739082329`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "18.6246551332880940777`3.", "\", \"", 
                    "96.859623506783719904`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    18.6246551332880940777`3., ", ", 96.859623506783719904`3.,
                     "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["R-squared"], 
                    TextCell["R-squared"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{
                    RowBox[{"-", "0.0383123974642733955`3."}], 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.8775702303960692952`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   TemplateBox[{"\"95% confidence interval: [\"", 
                    RowBox[{"-", "1.7934528582564119858`3."}], "\", \"", 
                    "1.7168280633278651948`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", \
-1.7934528582564119858`3., ", ", 1.7168280633278651948`3., "]"}], 
                   "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"8.9927761826366356956`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "1.8237226372500860982`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "5.3453309081364634991`3.", "\", \"", 
                    "12.640221457136807004`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    5.3453309081364634991`3., ", ", 12.640221457136807004`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"2.57`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"306.`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                   FractionBox["\"Examples\"", "\"Seconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[{{{}, {
                    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
                    0.012833333333333334`], AbsoluteThickness[1.6], 
                    GeometricTransformationBox[InsetBox[
                    FormBox[
                    StyleBox[
                    GraphicsBox[
                    {RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
                    1.], CircleBox[{0, 0}, Offset[{1.8, 1.8}, {0., 0.}]]}],
                    StripOnInput->False,
                    GraphicsBoxOptions->{DefaultBaseStyle->Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}],
                    TraditionalForm], {0., 0.}], {{{105.49226135493716`, 
                    171.93}}, {{126.48846126589658`, 152.04}}, {{
                    197.49616800144292`, 172.67}}, {{121.99212187132082`, 
                    140.39}}, {{142.37672513947388`, 96.13}}, {{
                    76.574751795214, 158.5}}, {{121.99212187132082`, 
                    140.39}}, {{142.37672513947388`, 96.13}}, {{
                    76.574751795214, 158.5}}, {{113.85998570762294`, 
                    164.63}}, {{95.8915450958412, 222.78}}, {{
                    197.49616800144292`, 172.67}}, {{375.88593588615777`, 
                    335.28}}}]}, {
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{105.49226135493716`, 171.93}}]},
                    RowBox[{"{", 
                    RowBox[{"105.49226135493716`", ",", "171.93`"}], "}"}]],
                    
                    Annotation[#, {105.49226135493716`, 171.93}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{126.48846126589658`, 152.04}}]},
                    RowBox[{"{", 
                    RowBox[{"126.48846126589658`", ",", "152.04`"}], "}"}]],
                    
                    Annotation[#, {126.48846126589658`, 152.04}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{197.49616800144292`, 172.67}}]},
                    RowBox[{"{", 
                    RowBox[{"197.49616800144292`", ",", "172.67`"}], "}"}]],
                    
                    Annotation[#, {197.49616800144292`, 172.67}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{121.99212187132082`, 140.39}}]},
                    RowBox[{"{", 
                    RowBox[{"121.99212187132082`", ",", "140.39`"}], "}"}]],
                    
                    Annotation[#, {121.99212187132082`, 140.39}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{142.37672513947388`, 96.13}}]},
                    RowBox[{"{", 
                    RowBox[{"142.37672513947388`", ",", "96.13`"}], "}"}]],
                    Annotation[#, {142.37672513947388`, 96.13}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{76.574751795214, 158.5}}]},
                    RowBox[{"{", 
                    RowBox[{"76.574751795214`", ",", "158.5`"}], "}"}]],
                    Annotation[#, {76.574751795214, 158.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{121.99212187132082`, 140.39}}]},
                    RowBox[{"{", 
                    RowBox[{"121.99212187132082`", ",", "140.39`"}], "}"}]],
                    
                    Annotation[#, {121.99212187132082`, 140.39}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{142.37672513947388`, 96.13}}]},
                    RowBox[{"{", 
                    RowBox[{"142.37672513947388`", ",", "96.13`"}], "}"}]],
                    Annotation[#, {142.37672513947388`, 96.13}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{76.574751795214, 158.5}}]},
                    RowBox[{"{", 
                    RowBox[{"76.574751795214`", ",", "158.5`"}], "}"}]],
                    Annotation[#, {76.574751795214, 158.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{113.85998570762294`, 164.63}}]},
                    RowBox[{"{", 
                    RowBox[{"113.85998570762294`", ",", "164.63`"}], "}"}]],
                    
                    Annotation[#, {113.85998570762294`, 164.63}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{95.8915450958412, 222.78}}]},
                    RowBox[{"{", 
                    RowBox[{"95.8915450958412`", ",", "222.78`"}], "}"}]],
                    Annotation[#, {95.8915450958412, 222.78}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{197.49616800144292`, 172.67}}]},
                    RowBox[{"{", 
                    RowBox[{"197.49616800144292`", ",", "172.67`"}], "}"}]],
                    
                    Annotation[#, {197.49616800144292`, 172.67}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{375.88593588615777`, 335.28}}]},
                    RowBox[{"{", 
                    RowBox[{"375.88593588615777`", ",", "335.28`"}], "}"}]],
                    
                    Annotation[#, {375.88593588615777`, 335.28}, 
                    "Tooltip"]& ]}}, {{}, {}}}, {{{}, {}, 
                    TagBox[
                    {GrayLevel[0.2], AbsoluteThickness[1.], Opacity[0.5], 
                    AbsoluteDashing[{2, 4}], LineBox[CompressedData["
1:eJxFxXss1AEcAPDLaLpG181RNnKGPyj0UuLuijzy2HkkZ3YeVxzq5nHnLkvI
Y4qsmJqFmcdWCkuNIdxCCFmuMmuNnNyNa+4Y7vzupscfvt8/PvvQeekRSUYk
Ein0n/+7LPLIT4Z+Mvc2XWI3VEkHWXvn9uqr2dJpuLtl5pCrdB6OfOYdaiNd
g+1pGyoL6S78QBbyjiI1v7g34yTRZC61hd2YcQEHTdzhVIomZ3PqHFygPLY0
IWDBjFH7X9TvvrDyRYddZXcAXJh1tnZmORj2byjhjJDCYJ6ZIDBQFQ5r18Kj
T/yJhJs4pyf71FFwsW//w6LZaHih0UfQroiBw+9/eJP/JRb2kvtZvV3hwtwB
wUf6djwcTLmSUadOgJv1MeVzukR4v8vKXIqGBztZaLtaDdfhxYE5T1PjJPj5
q/Oavh3cOdLKw9aYD/cwRR3fDLh8teXTS00KPB52Ndd9JxXuJe5xyZo0mB/n
Ol2tvwm/LuxY9jYSwCaqNjdPLW5p5nxAQUqHTwkdaUodvhVCLBmJM2A3Br1k
dQdPZ5eyDKJMuGKw7VIygXeyD3MJcRZs/34h2GYdz3okKKzJFsJj+RdkjHWc
mBpN9ZKI4DtE/9cxAjcK2uDkZWfD/G2FQwWBy0asyaNiMVwm7Bmq0OD0fNpw
u0gCD7R1/tCq8Sr5ZLztBp58RCG/vIlTiq1XKnU4L7Zoy2XfbdiUHGWeQMUj
+DrW+BncqZ46vOaB62XH/WmeeAszMYTHwLW0CY7BD68bqc10j8Yzia7NazG4
v/tnyd1YXF1rnDcRj/sIBWU3UnDL1lKz8jRcNd/4uPMWXh00+3Q3A08t0Bx1
FOLMbnJ9cDZO/e1glyXBlXRWc00O/hcJS0vV
                    "]]},
                    Annotation[#, "Charting`Private`Tag$1021873#1"]& ]}, {}}},
                   
                   Axes->{False, False},
                   AxesLabel->{None, None},
                   AxesOrigin->{0, 0},
                   DisplayFunction->Identity,
                   Frame->{{True, False}, {True, False}},
                   FrameLabel->{{
                    FormBox[
                    TagBox["\"actual value\"", HoldForm], TraditionalForm], 
                    None}, {
                    FormBox[
                    TagBox["\"predicted value\"", HoldForm], TraditionalForm],
                     None}},
                   
                   FrameTicks->{{Automatic, Automatic}, {
                    Automatic, Automatic}},
                   GridLines->{Automatic, Automatic},
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.5], 
                    AbsoluteThickness[1], 
                    AbsoluteDashing[{1, 2}]],
                   ImageSize->250,
                   
                   Method->{
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}},
                   PlotRange->{{0., 391.5997730509323}, {0., 
                    391.5997730509323}},
                   PlotRangeClipping->True,
                   PlotRangePadding->{{0, 0}, {0, 0}},
                   Ticks->{Automatic, Automatic}],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    PredictorMeasurementsObject[<|
     "Model" -> PredictorFunction[<|
        "ExampleNumber" -> 18, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical"|>, 
                "f2" -> <|"Type" -> "Numerical"|>, 
                "f3" -> <|"Type" -> "Numerical"|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor[
                   "Transpose", <|"FeatureNumber" -> 3|>], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {"Numerical", "Numerical", "Numerical"},
                     "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>,
               "Processors" -> {
                MachineLearning`MLProcessor[
                "SynthesizeMissingValues", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Distribution" -> 
                  LearnedDistribution[<|
                    "ExampleNumber" -> 18, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1475203784826948804|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {645.9444444444445, 16.72222222222222, 
                    50.77777777777777}, 
                    "StandardDeviation" -> {42.37330425610238, 
                    6.504746604984834, 9.174575712596916}, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3351294598358471705|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{-0.2573241038378381, 
                    0.8994516261877938}, {-0.6450502744104483, \
-0.43205841944994094`}, {-0.7195098672478779, 0.06566806172373328}}, 
                    "Precisions" -> {0.5919102827503028, 0.9435455551803141}, 
                    "NoisePrecision" -> 4.039404099667452, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {-0.0006801558854609856, \
-0.00024202445494255392`, 0.0021950700934157343`}, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 8722503918180358647|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>, 
                    "Key" -> "(f1f2f3)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 2, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {-0.0006801558854610225, \
-0.00024202445494255392`, 0.002195070093415722}, 
                    "StandardDeviation" -> {1.000087284650148, 
                    0.9995723164454201, 0.9987588995481079}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    2143139376538970117|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {-0.0006801558854610225, \
-0.00024202445494255392`, 0.002195070093415722}, 
                    "StandardDeviation" -> {1.000087284650148, 
                    0.9995723164454201, 0.9987588995481079}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    2143139376538970117|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, 
                    "ID" -> 4922843929423532927|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, 
                    "ID" -> 365386638938414886|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, 
                    "ID" -> 8084762059231395715|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.099699, "MaxTrainingMemory" -> 188264,
                     "DataMemory" -> 4192, "FunctionMemory" -> 44912, 
                    "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 11, 10, 20, 59, 23.134482`8.116834762622261}, 
                    "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}|>,
                     "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-4.306467677914701, -4.306467677914701, \
-4.260797744099717, -4.196274605521246, -4.120584106364819, \
-4.07765387661082, -4.042601145301235, -3.817664807796254, -3.79481845480472, \
-3.7386590251861964`, -3.6937309414537625`}, 
                    "LeftBoundary" -> -4.260797744099717, "LeftScale" -> 
                    0.02283496690749187, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[12.014775715516041`, 0.2144877574475317], 
                    "EntropySampleSize" -> 10|>], 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "EvaluationStrategy" -> "ModeFinding", 
                  "Version" -> {13.1, 0}, "ID" -> 967176822927612644|>], 
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1783680118875305151|>], 
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                  "Mean" -> {645.9444444444445, 16.72222222222222, 
                   50.77777777777777}, 
                  "StandardDeviation" -> {42.37330425610238, 
                   6.504746604984834, 9.174575712596916}, 
                  "Output" -> <|
                   "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 5995433924943303780|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Imputed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|"f1" -> <|"Type" -> "Numerical"|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor["List"], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 5874757204722672291|>], 
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Mean" -> {184.31444444444443`}, 
                  "StandardDeviation" -> {60.93164478169345}, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1753789756623536193|>], 
                MachineLearning`MLProcessor[
                "FromVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1356618763548457018|>], 
                MachineLearning`MLProcessor[
                "FirstValues", <|
                 "Info" -> <|"Type" -> "Numerical", "Weight" -> 1|>, "Key" -> 
                  "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                  False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
           "InverseProcessorFunction" -> (184.31444444444443` + 
            60.93164478169345 #& ), 
           "ProcessorFunction" -> (-3.024937946526935 + 
            0.01641183335166498 #& ), "Name" -> "value", 
           "Quantiles" -> {-1.4146088580615672`, 2.801427011647649}, "Mean" -> 
           184.31444444444443`|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> (DiracDelta[#2 - #]& ), 
         "Threshold" -> 0, "PerformanceGoal" -> Automatic, "BatchProcessing" -> 
         Automatic, 
         "Model" -> <|
          "Method" -> "NeuralNetwork", "Network" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "Input" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>,
               "Outputs" -> <|
               "Mean" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                "LogStd" -> 
                NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
              "Nodes" -> <|
               "2" -> <|
                 "Type" -> "NetArray", 
                  "Arrays" -> <|
                   "Array" -> RawArray["Real32",{-1.2026623487472534`}]|>, 
                  "Parameters" -> <|
                   "Dimensions" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {1}|>, "Inputs" -> <||>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>|>, 
                "1" -> <|
                 "Type" -> "Chain", 
                  "Nodes" -> <|
                   "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1:eJwBhgJ5/SFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
MgAAAAMAAAApU/G+Rwv1vYNoh7+iTXY/xNHXP7hXXL+/9SO/fex0vHywnD7u
mmO/52iQu3SlGz2fNQ0/xIXIvj+akL1lcjg/nSyNve0TKT755Si+n6MTvCFJ
iD5KnLe/IPq7PaeGDr/fTxe/6URZv055uD4LkZw9Uolevg6kOz+sVXg+mfPW
PqyXRz9AkSu/UmrLvnQvO78gHMo+oAomOzuOZb5BnjY/+AEqPo74Fb8Cflw/
jBSPPif6Ar+iPee+A3QQvi9WyD76rc6+mEr6PP1Bwj5Zl4k+o3OFP55sTL6P
fB0+z5+LPpo+gz2lrcg+Ga+SP/HzGT6s0s0+n9GvPjo6aT50Cgq/fLigPXCh
yj4IV70/ue7IPMkFsL1nYGm/DOQyv7M/3L6gRuC956GGPTpsKb80m5I9ZbxF
v99EBD5jbIk+wSAqvSDgqL4AbOA9lM0APlOfUj4MsB2/LArMvmOqaD+k76U/
QP42v3wVUz/cCp4+w/c5v2E91j4Ky4a+8zVEv9b+IT4eZpw+h6HLv7dVbT+J
S1o/8MQgvtP0xj34o+M+ywaEvnqZ6j50VCy+JJtIP1I/j7946iS98YQsP/1/
v736ung+Kzcav48WWT/jWlI/hfxYv3KkML5cTKe+owKAvnOEGj8ZcDa/fPUo
P0VaJj+b9Ru/tXhHP6/cGb+AGp87OGlZvgWroj4Ud9M+Bh5xPsl4kz+uVHe+
rEt1vlD1IL+6d6e+IzjkPg2CD793cIg+B8CQP07vDD+iKxk+oqCvvWTQbL8i
gs+/sihxv7WMpT5oYj8+2RrcPuETDb9idyhR
                    "], "Biases" -> 
                    RawArray["Real32",{
                    0.1662415713071823, -0.09961794316768646, 
                    0.32554981112480164`, -0.03895267844200134, 
                    0.026986006647348404`, -0.11711698770523071`, \
-0.0018490329384803772`, -0.21284927427768707`, -0.08810210973024368, \
-0.0713057816028595, -0.10721893608570099`, 0.11300480365753174`, 
                    0.09939642250537872, 
                    0.08141794800758362, -0.07147223502397537, 
                    0.16995258629322052`, 0.017666302621364594`, 
                    0.10332654416561127`, -0.11204160004854202`, \
-0.09295991063117981, 0.10189927369356155`, 
                    0.08433710038661957, -0.22633658349514008`, 
                    0.00293967523612082, 
                    0.09507199376821518, -0.03730040788650513, 
                    0.024995766580104828`, -0.10215723514556885`, 
                    0.0514688640832901, -0.12504132091999054`, \
-0.045884277671575546`, 0.06300043314695358, 
                    0.22512124478816986`, -0.2100604623556137, 
                    0.14657224714756012`, -0.15988637506961823`, 
                    0.09150736033916473, 
                    0.03330683708190918, -0.051095739006996155`, \
-0.062419407069683075`, 
                    0.005526383873075247, -0.061654478311538696`, \
-0.15795403718948364`, -0.21940100193023682`, -0.17105408012866974`, \
-0.26515254378318787`, 0.04080977663397789, -0.17640121281147003`, 
                    0.15114234387874603`, 0.14034007489681244`}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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
                    "], "Biases" -> 
                    RawArray["Real32",{-0.056264638900756836`, 
                    0.20743033289909363`, -0.07040610164403915, \
-0.1134888231754303, -0.05717797577381134, 
                    0.15228143334388733`, -0.008128189481794834, \
-0.09413044154644012, -0.14826364815235138`, -0.09609245508909225, 
                    0.09827321767807007, -0.049553707242012024`, 
                    0.03114297427237034, -0.02640373446047306, \
-0.03339345380663872, -0.009061370976269245, -0.09825214743614197, 
                    0.02453150786459446, 0.016251476481556892`, 
                    0.22742263972759247`, -0.04466868191957474, 
                    0.006153336260467768, 
                    0.06594887375831604, -0.11166111379861832`, \
-0.20282049477100372`, -0.03444327414035797, 0.05591721460223198, 
                    0.04535047337412834, -0.12424278259277344`, 
                    0.12791100144386292`, 0.11521118879318237`, 
                    0.05920711159706116, -0.010243697091937065`, 
                    0.014077454805374146`, 
                    0.04828822240233421, -0.07872626930475235, \
-0.09209168702363968, 0.03714662417769432, 0.08806450664997101, 
                    0.023828579112887383`, 
                    0.16367584466934204`, -0.016234688460826874`, \
-0.18068884313106537`, 0.02248004823923111, -0.026014337316155434`, 
                    0.1722862720489502, -0.009757071733474731, 
                    0.0498596653342247, 
                    0.013079040683805943`, -0.040247734636068344`}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.11596079915761948`, -0.22197158634662628`, \
-0.17007751762866974`, 0.15629735589027405`, 
                    0.10191899538040161`, -0.09801425784826279, 
                    0.15009847283363342`, 0.1595337986946106, 
                    0.13837839663028717`, 
                    0.07317785918712616, -0.08839797228574753, 
                    0.2184947431087494, -0.06876114755868912, \
-0.17075787484645844`, 0.12701722979545593`, 0.11237279325723648`, 
                    0.0865621566772461, -0.12347730249166489`, \
-0.012791935354471207`, -0.09327255934476852, 
                    0.23357655107975006`, -0.03654654324054718, \
-0.05884390324354172, 0.12931932508945465`, 
                    0.02260141260921955, -0.1737203449010849, \
-0.20786359906196594`, -0.39979177713394165`, 
                    0.10866546630859375`, -0.1444506198167801, \
-0.09505712240934372, -0.11759717762470245`, -0.01552331168204546, 
                    0.14518693089485168`, -0.20120006799697876`, 
                    0.1651909500360489, 
                    0.17747335135936737`, -0.041564587503671646`, \
-0.29594501852989197`, -0.17639997601509094`, -0.07808875292539597, \
-0.07619776576757431, 0.12988652288913727`, -0.1105971410870552, 
                    0.10653827339410782`, -0.03841139003634453, 
                    0.13663174211978912`, -0.10922832041978836`, \
-0.1192498579621315, 0.045604024082422256`}}], "Biases" -> 
                    RawArray["Real32",{-0.0800107941031456}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, 
                  "Inputs" -> <|
                   "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath["Inputs", "Input"], 
                NeuralNetworks`NetPath["Outputs", "LogStd"] -> 
                NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                NeuralNetworks`NetPath["Outputs", "Mean"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "1", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], 
           "Training" -> <|
            "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
             TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
             "TotalTrainingTime" -> 1.821448, "MeanInputsPerSecond" -> 
             7686.192523750335|>, "InputType" -> "NumericalVector", 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|
               "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>,
               "Output" -> <|
               "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>,
               "Processors" -> {
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                  "Mean" -> {-0.12131932370113982`, 0.08651200969715658, 
                   0.03508607974586253}, 
                  "StandardDeviation" -> {1.0892644778853724`, 
                   1.0128098885978352`, 1.071396014492115}, 
                  "Output" -> <|
                   "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1445580447275447545|>], 
                MachineLearning`MLProcessor[
                "FirstValues", <|
                 "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>, 
                  "Key" -> "(f1f2f3)", "Invertibility" -> "Perfect", 
                  "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
              "Missing" -> "Allowed"|>], "FeatureNumber" -> 3, 
           "DistributionData" -> {NormalDistribution, Automatic}, 
           "Calibrator" -> None, "PostProcessor" -> 
           MachineLearning`MLProcessor["Identity"], 
           "Options" -> <|
            "NetworkType" -> <|
              "Value" -> "FullyConnected", "Options" -> <||>|>, 
             "NetworkDepth" -> <|"Value" -> 2, "Options" -> <||>|>, 
             "NumberOfParameters" -> <|"Value" -> 2700, "Options" -> <||>|>, 
             "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>,
              "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
             "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
             "NetInitializationMethod" -> <|
              "Value" -> Automatic, "Options" -> <||>|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}, 
               "Options" -> <||>|>, 
             MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
             ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
             "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
             TrainingProgressReporting -> <|
              "Value" -> None, "Options" -> <||>|>, 
             "NetTrainOptions" -> <|
              "Value" -> {
                LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
               "Options" -> <||>|>, 
             "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
             "ValidationSetRatio" -> <|
              "Value" -> None, "Options" -> <||>|>|>|>, 
         "TrainingInformation" -> <|
          "Reporting" -> None, "TrainingFunction" -> Predict, "EMIterations" -> 
           Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 
           4.109752658507797, "PreprocessingTime" -> 
           0.250199`5.849830563060611, "LossName" -> "StandardDeviation", 
           "BestModelInformation" -> 
           Dataset[<|
             "MeanCrossEntropy" -> 
              Around[7.864187331342894, 1.7871989582013108`], 
              "StandardDeviation" -> 
              Around[64.28977697351306, 13.694129390173908`], 
              "EvaluationTime" -> 0.003962232981152784, "TestSize" -> 4, 
              "ModelMemory" -> 66176, "ModelUtility" -> -5.0365583646477345`, 
              "TrainingSize" -> 14, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 427656, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[7.864187331342894, 1.2637405026736799`]}, 
              "StandardDeviationHistory" -> {
                Around[64.28977697351306, 9.68321175423797]}, 
              "Configuration" -> {
               "NeuralNetwork", "NetworkType" -> "FullyConnected", 
                "NetworkDepth" -> 2, "NumberOfParameters" -> 2700, 
                "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
                "Dropout" -> 0.01, "NetInitializationMethod" -> Automatic, 
                "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
                MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
                "EarlyStopping" -> False, TrainingProgressReporting -> None, 
                "NetTrainOptions" -> Automatic, "LossFunction" -> 
                Automatic}|>, 
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
               "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
               "TrainingTime", "TrainingMemory", "ExperimentCount", 
               "MeanCrossEntropyHistory", "StandardDeviationHistory", 
               "Configuration"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, 1], 
               TypeSystem`Vector[TypeSystem`AnyType, 1], 
               TypeSystem`Tuple[{
                 TypeSystem`Atom[String], TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`AnyType}]}], <||>], "Configurations" -> 
           Dataset[<|<|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 2|>, 
                  "NumberOfParameters" -> <|"Value" -> 2700|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> 0.01|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[7.864187331342894, 1.7871989582013108`], 
                   "StandardDeviation" -> 
                   Around[64.28977697351306, 13.694129390173908`], 
                   "EvaluationTime" -> 0.003962232981152784, "TestSize" -> 4, 
                   "ModelMemory" -> 66176, 
                   "ModelUtility" -> -5.0365583646477345`, "TrainingSize" -> 
                   14, "TrainingTime" -> 1.9952623149688797`, 
                   "TrainingMemory" -> 427656, "ExperimentCount" -> 1, 
                   "MeanCrossEntropyHistory" -> {
                    Around[7.864187331342894, 1.2637405026736799`]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.28977697351306, 9.68321175423797]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.003962232981152784, "ModelMemory" -> 
                  66176, "StandardDeviation" -> 
                  Around[64.28977697351306, 13.694129390173908`], 
                  "TrainingMemory" -> 427656, "TrainingTime" -> 
                  2.3544095316632783`|>, "Index" -> 1|>, <|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 8|>, 
                  "NumberOfParameters" -> <|"Value" -> 17700|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> None|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 1, "ModelMemory" -> 1, 
                  "StandardDeviation" -> 1, "TrainingMemory" -> 1, 
                  "TrainingTime" -> 1|>, "Index" -> 2|>, <|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 2|>, 
                  "NumberOfParameters" -> <|"Value" -> 2700|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> None|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 1, "ModelMemory" -> 1, 
                  "StandardDeviation" -> 1, "TrainingMemory" -> 1, 
                  "TrainingTime" -> 1|>, "Index" -> 3|>, <|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 8|>, 
                  "NumberOfParameters" -> <|"Value" -> 17700|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> 0.01|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 1, "ModelMemory" -> 1, 
                  "StandardDeviation" -> 1, "TrainingMemory" -> 1, 
                  "TrainingTime" -> 1|>, "Index" -> 4|>, <|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 4|>, 
                  "NumberOfParameters" -> <|"Value" -> 7700|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> None|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 1, "ModelMemory" -> 1, 
                  "StandardDeviation" -> 1, "TrainingMemory" -> 1, 
                  "TrainingTime" -> 1|>, "Index" -> 5|>, <|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 4|>, 
                  "NumberOfParameters" -> <|"Value" -> 7700|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> 0.01|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 1, "ModelMemory" -> 1, 
                  "StandardDeviation" -> 1, "TrainingMemory" -> 1, 
                  "TrainingTime" -> 1|>, "Index" -> 6|>|>, 
             TypeSystem`Assoc[
              TypeSystem`Struct[{"Value", "Options"}, {
                TypeSystem`Atom[
                 TypeSystem`Enumeration["NeuralNetwork"]], 
                TypeSystem`Assoc[TypeSystem`AnyType, 
                 TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
              
              TypeSystem`Struct[{
               "Experiments", "PredictedPerformances", "Index"}, {
                TypeSystem`Vector[
                 
                 TypeSystem`Struct[{
                  "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                   "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
                   "TrainingTime", "TrainingMemory", "ExperimentCount", 
                   "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
                  TypeSystem`AnyType, TypeSystem`AnyType, 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[TypeSystem`AnyType, 1], 
                   TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
                 TypeSystem`AnyLength], 
                
                TypeSystem`Struct[{
                 "EvaluationTime", "ModelMemory", "StandardDeviation", 
                  "TrainingMemory", "TrainingTime"}, {
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Integer], TypeSystem`AnyType, 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Atom[Real]}], 
                TypeSystem`Atom[Integer]}], 6], <||>], "MaxTrainingSize" -> 
           18, "PreprocessorEvaluationTime" -> 5.*^-6, "PreprocessorMemory" -> 
           67112, "InputDimension" -> 3, "OutputDimension" -> 1, 
           "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
           True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
           "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
           "LastReportingTime" -> 3.877102765373339`16.341082301604636*^9, 
           "RoundPartitioning" -> 
           Dataset[{<|
              "TrainingSizes" -> 14, "TimeBudgets" -> 2.0429971279893104`, 
               "ElapsedTimes" -> 2.069259, "ExperimentCounts" -> 1|>}, 
             TypeSystem`Vector[
              
              TypeSystem`Struct[{
               "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
                "ExperimentCounts"}, {
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer]}], 1], <||>]|>, "AnomalyDetector" -> 
         None, "Log" -> <|
          "Example" -> 
           MachineLearning`MLDataset[<|
             "f1" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, "ID" -> 
                6448330931398477146|>, 
              "f2" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, "ID" -> 
                1033804942478285849|>, 
              "f3" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, "ID" -> 
                3644694514917083622|>|>, <|
             "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
              0, "RawExample" -> False|>], "TrainingTime" -> 2.3657, 
           "MaxTrainingMemory" -> 630384, "DataMemory" -> 3496, 
           "FunctionMemory" -> 237816, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 11, 10, 20, 59, 25.391803`8.157268522330636}, 
             "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
           "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
           "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
      "TestSet" -> <|
       "Input" -> {{601, 16, 53}, {664, 24, 61}, {624, 11, 34}, {573, 21, 
         62}, {597, 23, 49}, {585, 8, 54}, {573, 21, 62}, {597, 23, 49}, {585,
          8, 54}, {611, 12, 49}, {620, 19, 69}, {624, 11, 34}, {737, 24, 47}},
         "Output" -> {171.93, 152.04, 172.67, 140.39, 96.13, 158.5, 140.39, 
         96.13, 158.5, 164.63, 222.78, 172.67, 335.28}|>, 
      "Predictions" -> {105.49226135493716`, 126.48846126589658`, 
       197.49616800144292`, 121.99212187132082`, 142.37672513947388`, 
       76.574751795214, 121.99212187132082`, 142.37672513947388`, 
       76.574751795214, 113.85998570762294`, 95.8915450958412, 
       197.49616800144292`, 375.88593588615777`}, "Distributions" -> {
        NormalDistribution[105.49226135493716`, 18.303463601143754`], 
        NormalDistribution[126.48846126589658`, 18.303463601143754`], 
        NormalDistribution[197.49616800144292`, 18.303463601143754`], 
        NormalDistribution[121.99212187132082`, 18.303463601143754`], 
        NormalDistribution[142.37672513947388`, 18.303463601143754`], 
        NormalDistribution[76.574751795214, 18.303463601143754`], 
        NormalDistribution[121.99212187132082`, 18.303463601143754`], 
        NormalDistribution[142.37672513947388`, 18.303463601143754`], 
        NormalDistribution[76.574751795214, 18.303463601143754`], 
        NormalDistribution[113.85998570762294`, 18.303463601143754`], 
        NormalDistribution[95.8915450958412, 18.303463601143754`], 
        NormalDistribution[197.49616800144292`, 18.303463601143754`], 
        NormalDistribution[375.88593588615777`, 18.303463601143754`]}, 
      "Modes" -> {105.49226135493716`, 126.48846126589658`, 
       197.49616800144292`, 121.99212187132082`, 142.37672513947388`, 
       76.574751795214, 121.99212187132082`, 142.37672513947388`, 
       76.574751795214, 113.85998570762294`, 95.8915450958412, 
       197.49616800144292`, 375.88593588615777`}, "Weights" -> 
      SparseArray[Automatic, {13}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.0032626153846153846`, "SingleEvaluationTime" -> 
      0.002570875, "Version" -> {13.1, 0}|>]], ",", 
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Predictor Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Predictor method"], 
                    TextCell["Predictor method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "LinearRegression",ExpressionUUID->
                   "34d995d1-6578-4528-a456-2b4309c3ad72"],
                  TextCell["LinearRegression"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "13"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Standard deviation"], 
                    TextCell["Standard deviation"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"44.2998303386001666127`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "6.839022832451533418`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "30.6217846736970997767`3.", "\", \"", 
                    "57.9778760035032334486`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    30.6217846736970997767`3., ", ", 
                    57.9778760035032334486`3., "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Standard deviation baseline"], 
                    TextCell["Standard deviation baseline"]], 
                    "\"Standard deviation of testset values\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Standard deviation of testset values", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"57.7421393200359105435`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "19.5587420933739082329`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "18.6246551332880940777`3.", "\", \"", 
                    "96.859623506783719904`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    18.6246551332880940777`3., ", ", 96.859623506783719904`3.,
                     "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["R-squared"], 
                    TextCell["R-squared"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.4114025376377768994`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.4857068998211807598`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   TemplateBox[{"\"95% confidence interval: [\"", 
                    RowBox[{"-", "0.5600112620045846201`3."}], "\", \"", 
                    "1.38281633728013853`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", \
-0.5600112620045846201`3., ", ", 1.38281633728013853`3., "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"5.2323383288985070294`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1112941798883175792`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "5.0097499691218718709`3.", "\", \"", 
                    "5.4549266886751421879`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    5.0097499691218718709`3., ", ", 5.4549266886751421879`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"1.62`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"194.`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                   FractionBox["\"Examples\"", "\"Seconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[{{{}, {
                    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
                    0.012833333333333334`], AbsoluteThickness[1.6], 
                    GeometricTransformationBox[InsetBox[
                    FormBox[
                    StyleBox[
                    GraphicsBox[
                    {RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
                    1.], CircleBox[{0, 0}, Offset[{1.8, 1.8}, {0., 0.}]]}],
                    StripOnInput->False,
                    GraphicsBoxOptions->{DefaultBaseStyle->Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}],
                    TraditionalForm], {0., 0.}], {{{138.35171937094242`, 
                    171.93}}, {{185.40548830156573`, 152.04}}, {{
                    190.34689192827926`, 172.67}}, {{97.88458872746293, 
                    140.39}}, {{141.7569036541599, 96.13}}, {{
                    120.9045804948851, 158.5}}, {{97.88458872746293, 
                    140.39}}, {{141.7569036541599, 96.13}}, {{
                    120.9045804948851, 158.5}}, {{153.8659528526204, 
                    164.63}}, {{130.5445863726282, 222.78}}, {{
                    190.34689192827926`, 172.67}}, {{276.8047333848016, 
                    335.28}}}]}, {
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{138.35171937094242`, 171.93}}]},
                    RowBox[{"{", 
                    RowBox[{"138.35171937094242`", ",", "171.93`"}], "}"}]],
                    
                    Annotation[#, {138.35171937094242`, 171.93}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{185.40548830156573`, 152.04}}]},
                    RowBox[{"{", 
                    RowBox[{"185.40548830156573`", ",", "152.04`"}], "}"}]],
                    
                    Annotation[#, {185.40548830156573`, 152.04}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{190.34689192827926`, 172.67}}]},
                    RowBox[{"{", 
                    RowBox[{"190.34689192827926`", ",", "172.67`"}], "}"}]],
                    
                    Annotation[#, {190.34689192827926`, 172.67}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{97.88458872746293, 140.39}}]},
                    RowBox[{"{", 
                    RowBox[{"97.88458872746293`", ",", "140.39`"}], "}"}]],
                    Annotation[#, {97.88458872746293, 140.39}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{141.7569036541599, 96.13}}]},
                    RowBox[{"{", 
                    RowBox[{"141.7569036541599`", ",", "96.13`"}], "}"}]],
                    Annotation[#, {141.7569036541599, 96.13}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{120.9045804948851, 158.5}}]},
                    RowBox[{"{", 
                    RowBox[{"120.9045804948851`", ",", "158.5`"}], "}"}]],
                    Annotation[#, {120.9045804948851, 158.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{97.88458872746293, 140.39}}]},
                    RowBox[{"{", 
                    RowBox[{"97.88458872746293`", ",", "140.39`"}], "}"}]],
                    Annotation[#, {97.88458872746293, 140.39}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{141.7569036541599, 96.13}}]},
                    RowBox[{"{", 
                    RowBox[{"141.7569036541599`", ",", "96.13`"}], "}"}]],
                    Annotation[#, {141.7569036541599, 96.13}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{120.9045804948851, 158.5}}]},
                    RowBox[{"{", 
                    RowBox[{"120.9045804948851`", ",", "158.5`"}], "}"}]],
                    Annotation[#, {120.9045804948851, 158.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{153.8659528526204, 164.63}}]},
                    RowBox[{"{", 
                    RowBox[{"153.8659528526204`", ",", "164.63`"}], "}"}]],
                    Annotation[#, {153.8659528526204, 164.63}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{130.5445863726282, 222.78}}]},
                    RowBox[{"{", 
                    RowBox[{"130.5445863726282`", ",", "222.78`"}], "}"}]],
                    Annotation[#, {130.5445863726282, 222.78}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{190.34689192827926`, 172.67}}]},
                    RowBox[{"{", 
                    RowBox[{"190.34689192827926`", ",", "172.67`"}], "}"}]],
                    
                    Annotation[#, {190.34689192827926`, 172.67}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{276.8047333848016, 335.28}}]},
                    RowBox[{"{", 
                    RowBox[{"276.8047333848016`", ",", "335.28`"}], "}"}]],
                    Annotation[#, {276.8047333848016, 335.28}, 
                    "Tooltip"]& ]}}, {{}, {}}}, {{{}, {}, 
                    TagBox[
                    {GrayLevel[0.2], AbsoluteThickness[1.], Opacity[0.5], 
                    AbsoluteDashing[{2, 4}], LineBox[CompressedData["
1:eJxFxW0w03EcAPAROuI8pIk62tmlduu620W7XKMrO7fG/2aJ88yYZMyMcFHI
LvJUXF1uFdaRuTC32lqi3UbqXEIWeTg7o4WGat1V5KoXvr8Xn/sQkvhhKZY4
HC7kn/+nlBvFB1/N0rZnTqnuzmA9AdsXSXj2zdgQfNuGTr+GTcPNzyicHGwF
fuQs/crDNmASbYGahu0K3J43XhKTiu2DP5u9C7JyyXAhSzhoRfSFyzVuGfeW
/WHCmkvVfskpWLfIMhOcgmB9d9CcdDAYNtmJIyYymPAos23eX4fBNhTffGct
C3akZJcfKGTDDT/j40vJ4fDw4ba8FosImI8x3ZOVkfCLOcam4VYUfMPvd4uC
EwNrS6w/EvFxcNvx9JBzpnh4M+tOS+1YAlxwmTigUyfC1CW74IH2JJjMaqy1
FHHg3FV9XpMgGf4hGiFWhabAiuK9vgQfLjwkc/iEd0mF3aZl0VEmtOqERfbW
1AVY/Ee6crY/DZY/x5GM9y/ChA4rW0NFOjzQoHhM5vJg6ZJa7kXLgA2Z+dHC
Q5kwe3V20HUHH3Z/uD6OX0fbSSPZcm4W7ENZNB19j14Lfz05EyyAxy5ZtsoU
6ARKvfbJkWy4xmukrlqCnrBNPlPtKISHakLpvSL0lNNNkqsZXdFfpA5IyIEN
LppWsQ4dGRfL9zydC3/7wODtDEJXYtS0dTq6L3A3R8NAe3u/Oc8NQ68aj9E6
E9FlAnsHWjHac/mXrU8pWplktHEqQy+zNbj562jML98sqkV7bBim3z5Ay4Wj
k4omNPNLn65Rgr462/BO0IpeeIlp93Sir1BPqre60G7dpF5jN5ohsVaqnqIN
Ht/lEiW6sF4vq1Sh8fbDHTk96K6ynvbYXvRfYlRBCw==
                    "]]},
                    Annotation[#, "Charting`Private`Tag$1022152#1"]& ]}, {}}},
                   
                   Axes->{False, False},
                   AxesLabel->{None, None},
                   AxesOrigin->{0, 0},
                   DisplayFunction->Identity,
                   Frame->{{True, False}, {True, False}},
                   FrameLabel->{{
                    FormBox[
                    TagBox["\"actual value\"", HoldForm], TraditionalForm], 
                    None}, {
                    FormBox[
                    TagBox["\"predicted value\"", HoldForm], TraditionalForm],
                     None}},
                   
                   FrameTicks->{{Automatic, Automatic}, {
                    Automatic, Automatic}},
                   GridLines->{Automatic, Automatic},
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.5], 
                    AbsoluteThickness[1], 
                    AbsoluteDashing[{1, 2}]],
                   ImageSize->250,
                   
                   Method->{
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}},
                   PlotRange->{{0., 347.835375}, {0., 347.835375}},
                   PlotRangeClipping->True,
                   PlotRangePadding->{{0, 0}, {0, 0}},
                   Ticks->{Automatic, Automatic}],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    PredictorMeasurementsObject[<|
     "Model" -> PredictorFunction[<|
        "ExampleNumber" -> 18, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical"|>, 
                "f2" -> <|"Type" -> "Numerical"|>, 
                "f3" -> <|"Type" -> "Numerical"|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor[
                   "Transpose", <|"FeatureNumber" -> 3|>], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {"Numerical", "Numerical", "Numerical"},
                     "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>,
               "Processors" -> {
                MachineLearning`MLProcessor[
                "SynthesizeMissingValues", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Distribution" -> 
                  LearnedDistribution[<|
                    "ExampleNumber" -> 18, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1475203784826948804|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {645.9444444444445, 16.72222222222222, 
                    50.77777777777777}, 
                    "StandardDeviation" -> {42.37330425610238, 
                    6.504746604984834, 9.174575712596916}, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3351294598358471705|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{-0.2573241038378381, 
                    0.8994516261877938}, {-0.6450502744104483, \
-0.43205841944994094`}, {-0.7195098672478779, 0.06566806172373328}}, 
                    "Precisions" -> {0.5919102827503028, 0.9435455551803141}, 
                    "NoisePrecision" -> 4.039404099667452, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {-0.0006801558854609856, \
-0.00024202445494255392`, 0.0021950700934157343`}, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 8722503918180358647|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>, 
                    "Key" -> "(f1f2f3)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 2, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {-0.0006801558854610225, \
-0.00024202445494255392`, 0.002195070093415722}, 
                    "StandardDeviation" -> {1.000087284650148, 
                    0.9995723164454201, 0.9987588995481079}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    2143139376538970117|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {-0.0006801558854610225, \
-0.00024202445494255392`, 0.002195070093415722}, 
                    "StandardDeviation" -> {1.000087284650148, 
                    0.9995723164454201, 0.9987588995481079}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    2143139376538970117|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, 
                    "ID" -> 4922843929423532927|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, 
                    "ID" -> 365386638938414886|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, 
                    "ID" -> 8084762059231395715|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.144337, "MaxTrainingMemory" -> 188400,
                     "DataMemory" -> 4192, "FunctionMemory" -> 44912, 
                    "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 11, 10, 20, 59, 25.555745`8.160063528351342}, 
                    "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}|>,
                     "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-4.308187280572467, -4.2625087961205885`, \
-4.193294888721262, -4.120863377844668, -4.08148113715749, \
-4.0390683085715375`, -3.817262136706334, -3.797917479242584, \
-3.738672136229833, -3.695662645384793, -3.424557336190307}, 
                    "LeftBoundary" -> -4.2625087961205885`, "LeftScale" -> 
                    0.022839242225939138`, "LeftTailNorm" -> 
                    0.18181818181818182`|>], "Entropy" -> 
                    Around[11.858038778929599`, 0.25029184471563437`], 
                    "EntropySampleSize" -> 11|>], 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "EvaluationStrategy" -> "ModeFinding", 
                  "Version" -> {13.1, 0}, "ID" -> 967176822927612644|>], 
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1783680118875305151|>], 
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                  "Mean" -> {645.9444444444445, 16.72222222222222, 
                   50.77777777777777}, 
                  "StandardDeviation" -> {42.37330425610238, 
                   6.504746604984834, 9.174575712596916}, 
                  "Output" -> <|
                   "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 5995433924943303780|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Imputed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|"f1" -> <|"Type" -> "Numerical"|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor["List"], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 5874757204722672291|>], 
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Mean" -> {184.31444444444443`}, 
                  "StandardDeviation" -> {60.93164478169345}, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1753789756623536193|>], 
                MachineLearning`MLProcessor[
                "FromVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1356618763548457018|>], 
                MachineLearning`MLProcessor[
                "FirstValues", <|
                 "Info" -> <|"Type" -> "Numerical", "Weight" -> 1|>, "Key" -> 
                  "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                  False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
           "InverseProcessorFunction" -> (184.31444444444443` + 
            60.93164478169345 #& ), 
           "ProcessorFunction" -> (-3.024937946526935 + 
            0.01641183335166498 #& ), "Name" -> "value", 
           "Quantiles" -> {-1.4146088580615672`, 2.801427011647649}, "Mean" -> 
           184.31444444444443`|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> (DiracDelta[#2 - #]& ), 
         "Threshold" -> 0, "PerformanceGoal" -> Automatic, "BatchProcessing" -> 
         Automatic, 
         "Model" -> <|
          "MeanFunction" -> 
           LinearLayer[<|
             "Type" -> "Linear", 
              "Arrays" -> <|
               "Weights" -> 
                RawArray["Real32",{{0.6530722379684448, 
                  0.010319861583411694`, -0.2442297786474228}}], "Biases" -> 
                RawArray["Real32",{1.9230597959609227`*^-16}]|>, 
              "Parameters" -> <|
               "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
                3, "$InputDimensions" -> {3}|>, 
              "Inputs" -> <|
               "Input" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`AtomT]|>,
               "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], 
           "DistributionData" -> {NormalDistribution, 0.8511378976190797}, 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|
               "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>,
               "Output" -> <|
               "(f1f2f3)" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>|>,
               "Processors" -> {
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                  "Mean" -> {0.0010005829440920357`, -0.001163115352594958, 
                   0.0023277626048840705`}, 
                  "StandardDeviation" -> {0.9982461500590688, 
                   1.0017980456068871`, 0.9992843470454407}, 
                  "Output" -> <|
                   "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1118215739088705181|>], 
                MachineLearning`MLProcessor[
                "FirstValues", <|
                 "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>, 
                  "Key" -> "(f1f2f3)", "Invertibility" -> "Perfect", 
                  "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
              "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
           "LinearRegression", "PostProcessor" -> 
           MachineLearning`MLProcessor["Identity"], 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
             "L2Regularization" -> <|"Value" -> 1., "Options" -> <||>|>, 
             "OptimizationMethod" -> <|
              "Value" -> "NormalEquation", "Options" -> <||>|>, 
             MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
         "TrainingInformation" -> <|
          "Reporting" -> None, "TrainingFunction" -> Predict, "EMIterations" -> 
           Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 
           4.109752658507797, "PreprocessingTime" -> 
           0.228122`5.809712163989072, "LossName" -> "StandardDeviation", 
           "BestModelInformation" -> 
           Dataset[<|
             "MeanCrossEntropy" -> 
              Around[5.554761803412535, 0.1887432392963882], 
              "StandardDeviation" -> 
              Around[59.808748425648844`, 9.992023265371412], 
              "EvaluationTime" -> 0.00041674175424066644`, "TestSize" -> 16, 
              "ModelMemory" -> 15488., "ModelUtility" -> -4.81717151222038, 
              "TrainingSize" -> 14, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 71961.6, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[5.528065877249032, 0.1799339979372372], 
                Around[5.328919979118339, 0.12268850220041012`], 
                Around[5.313956532083814, 0.1265495090811178], 
                Around[6.048104825198956, 0.807224533128675]}, 
              "StandardDeviationHistory" -> {
                Around[62.286236789974176`, 11.140629991109126`], 
                Around[50.13445037997165, 12.611901075574972`], 
                Around[47.676415405582084`, 14.073576543755195`], 
                Around[79.13789112706745, 26.874081627914048`]}, 
              "Configuration" -> {
               "LinearRegression", "L1Regularization" -> 0, 
                "L2Regularization" -> 1., "OptimizationMethod" -> Automatic, 
                MaxIterations -> 30}, "FinalTrainingSize" -> 18|>, 
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
               "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
               "TrainingTime", "TrainingMemory", "ExperimentCount", 
               "MeanCrossEntropyHistory", "StandardDeviationHistory", 
               "Configuration", "FinalTrainingSize"}, {
              TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, 4], 
               TypeSystem`Vector[TypeSystem`AnyType, 4], 
               TypeSystem`Tuple[{
                 TypeSystem`Atom[String], TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
               TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
           Dataset[<|<|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.001|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.578067385382692, 0.20511146766459717`], 
                   "StandardDeviation" -> 
                   Around[60.48161645407292, 10.370911566406393`], 
                   "EvaluationTime" -> 0.00041674175424066644`, "TestSize" -> 
                   16, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -4.829211347573086, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                   71995.2, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                    Around[5.54968797271442, 0.19159723313224783`], 
                    Around[5.342353197210087, 0.12274980039674521`], 
                    Around[5.300593942427395, 0.13070827269004898`], 
                    Around[6.119634429178868, 0.8702737570853354]}, 
                   "StandardDeviationHistory" -> {
                    Around[63.21620647697764, 11.289011266084913`], 
                    Around[51.215265742969976`, 12.261456318209278`], 
                    Around[46.621072828459916`, 14.800126727097634`], 
                    Around[80.87392076788417, 27.76266900707586]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.00041674175424066644`, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[60.48161645407292, 10.370911566406393`], 
                  "TrainingMemory" -> 71995.2, "TrainingTime" -> 
                  0.007445296664866278|>, "Index" -> 1|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 10000.|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.484764194760987, 0.06090899904496995], 
                   "StandardDeviation" -> 
                   Around[55.672373562254286`, 7.005499951868863], 
                   "EvaluationTime" -> 0.00039622329811527814`, "TestSize" -> 
                   12, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -4.737491835795887, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                   71990., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                    Around[5.475999291461972, 0.10265931066831549`], 
                    Around[5.471298416319264, 0.10270516129655001`], 
                    Around[5.506994876501725, 0.10582748412454836`]}, 
                   "StandardDeviationHistory" -> {
                    Around[54.45999145141262, 12.088354775588297`], 
                    Around[53.65014758350443, 12.401014860759615`], 
                    Around[58.90698165184583, 11.041312729407705`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.00039622329811527814`, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[55.672373562254286`, 7.005499951868863], 
                  "TrainingMemory" -> 71990., "TrainingTime" -> 
                  0.007445296664866278|>, "Index" -> 2|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.00001|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.578100004599017, 0.20513315984232605`], 
                   "StandardDeviation" -> 
                   Around[60.48270945585449, 10.371489044707614`], 
                   "EvaluationTime" -> 0.0003962232981152782, "TestSize" -> 
                   16, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -4.82923064557973, "TrainingSize" -> 14, 
                   "TrainingTime" -> 0.006636315225290107, "TrainingMemory" -> 
                   71990.40000000001, "ExperimentCount" -> 4, 
                   "MeanCrossEntropyHistory" -> {
                    Around[5.5497131524292, 0.19161077758130832`], 
                    Around[5.342373428680428, 0.12275059080466098`], 
                    Around[5.300580832694735, 0.1307118468481782], 
                    Around[6.119732604591709, 0.8703436684645364]}, 
                   "StandardDeviationHistory" -> {
                    Around[63.21736969802032, 11.289258540381836`], 
                    Around[51.21671686443765, 12.26107753116082], 
                    Around[46.619937068559956`, 14.800893660468724`], 
                    Around[80.87681419240003, 27.76378617710668]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.0003962232981152782, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[60.48270945585449, 10.371489044707614`], 
                  "TrainingMemory" -> 71990.40000000001, "TrainingTime" -> 
                  0.007830851965842326|>, "Index" -> 3|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 1.|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.554761803412535, 0.1887432392963882], 
                   "StandardDeviation" -> 
                   Around[59.808748425648844`, 9.992023265371412], 
                   "EvaluationTime" -> 0.00041674175424066644`, "TestSize" -> 
                   16, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -4.81717151222038, "TrainingSize" -> 14, 
                   "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                   71961.6, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                    Around[5.528065877249032, 0.1799339979372372], 
                    Around[5.328919979118339, 0.12268850220041012`], 
                    Around[5.313956532083814, 0.1265495090811178], 
                    Around[6.048104825198956, 0.807224533128675]}, 
                   "StandardDeviationHistory" -> {
                    Around[62.286236789974176`, 11.140629991109126`], 
                    Around[50.13445037997165, 12.611901075574972`], 
                    Around[47.676415405582084`, 14.073576543755195`], 
                    Around[79.13789112706745, 26.874081627914048`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.00041674175424066644`, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[59.808748425648844`, 9.992023265371412], 
                  "TrainingMemory" -> 71961.6, "TrainingTime" -> 
                  0.007445296664866278|>, "Index" -> 4|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.1|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.574921804284502, 0.2030065538554259], 
                   "StandardDeviation" -> 
                   Around[60.378178622272344`, 10.315956557901456`], 
                   "EvaluationTime" -> 0.0003962232981152782, "TestSize" -> 
                   16, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -4.827380423736478, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.006636315225290107, "TrainingMemory" -> 
                   71926.40000000001, "ExperimentCount" -> 4, 
                   "MeanCrossEntropyHistory" -> {
                    Around[5.547214721517068, 0.1902652220942879], 
                    Around[5.340419004188544, 0.12268164049252026`], 
                    Around[5.30191201772879, 0.13034165470922407`], 
                    Around[6.110141473703605, 0.8633078207883967]}, 
                   "StandardDeviationHistory" -> {
                    Around[63.103172961523896`, 11.265685398502391`], 
                    Around[51.07497337683738, 12.299082885885122`], 
                    Around[46.73382841510365, 14.723728219809225`], 
                    Around[80.60073973562443, 27.653559999010206`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.0003962232981152782, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[60.378178622272344`, 10.315956557901456`], 
                  "TrainingMemory" -> 71926.40000000001, "TrainingTime" -> 
                  0.007830851965842326|>, "Index" -> 5|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.01|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.577771920826793, 0.20491484238431765`], 
                   "StandardDeviation" -> 
                   Around[60.471735578319965`, 10.365687620820538`], 
                   "EvaluationTime" -> 0.0003962232981152782, "TestSize" -> 
                   16, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -4.829036657091078, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                   71907.2, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                    Around[5.549459499011185, 0.19147431163585812`], 
                    Around[5.342170125707352, 0.12274272069413654`], 
                    Around[5.3007131995377215`, 0.13067569175300336`], 
                    Around[6.1187448590509135`, 0.8696382852507842]}, 
                   "StandardDeviationHistory" -> {
                    Around[63.205663578010125`, 11.286776509258413`], 
                    Around[51.20212013194312, 12.264897388827178`], 
                    Around[46.63139108195589, 14.793156801963303`], 
                    Around[80.84776752137076, 27.752535542439055`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.0003962232981152782, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[60.471735578319965`, 10.365687620820538`], 
                  "TrainingMemory" -> 71907.2, "TrainingTime" -> 
                  0.007445296664866278|>, "Index" -> 6|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 100.|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.613005325968788, 0.1640863293457181], 
                   "StandardDeviation" -> 
                   Around[62.9788960931767, 10.333834449096114`], 
                   "EvaluationTime" -> 0.00047509252150064154`, "TestSize" -> 
                   16, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -4.868241997878607, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.006636315225290107, "TrainingMemory" -> 
                   71939.2, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                    Around[5.4599578863703275`, 0.10833182264449004`], 
                    Around[5.4379448732779165`, 0.10687277419288178`], 
                    Around[5.484944946091861, 0.10283447021905104`], 
                    Around[6.069173598135047, 0.6840849353101789]}, 
                   "StandardDeviationHistory" -> {
                    Around[55.259952229977145`, 11.908786458895701`], 
                    Around[52.096601495390864`, 12.871452492190981`], 
                    Around[57.86319894239028, 10.586131359098344`], 
                    Around[86.69583170494853, 27.733879680820007`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.00047509252150064154`, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[62.9788960931767, 10.333834449096114`], 
                  "TrainingMemory" -> 71939.2, "TrainingTime" -> 
                  0.007830851965842326|>, "Index" -> 7|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 1000.|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.482236697865219, 0.061073927210204625`], 
                   "StandardDeviation" -> 
                   Around[55.60930314813516, 6.996507667843528], 
                   "EvaluationTime" -> 0.00039622329811527814`, "TestSize" -> 
                   12, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -4.736354604095354, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                   71748., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                    Around[5.474122810724629, 0.10319007406691721`], 
                    Around[5.467787249395994, 0.10307896592454267`], 
                    Around[5.5048000334750355`, 0.10552897319868434`]}, 
                   "StandardDeviationHistory" -> {
                    Around[54.53812638398599, 12.070578843038973`], 
                    Around[53.478438159541525`, 12.45010523165169], 
                    Around[58.811344900877984`, 10.985646564303881`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.00039622329811527814`, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[55.60930314813516, 6.996507667843528], 
                  "TrainingMemory" -> 71748., "TrainingTime" -> 
                  0.007445296664866278|>, "Index" -> 8|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.0001|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.3975548262491, 0.11183273181391186`], 
                   "StandardDeviation" -> 
                   Around[53.68462974532449, 8.771308322561431], 
                   "EvaluationTime" -> 0.00039622329811527814`, "TestSize" -> 
                   12, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -4.708433746792534, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                   71796., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                    Around[5.549710865878975, 0.19160954752127957`], 
                    Around[5.342371590537497, 0.1227505184566942], 
                    Around[5.300582022330829, 0.1307115226181426]}, 
                   "StandardDeviationHistory" -> {
                    Around[63.21726405609504, 11.289236072727553`], 
                    Around[51.21658503510185, 12.261111905832207`], 
                    Around[46.620040144776596`, 14.800824063184436`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.00039622329811527814`, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[53.68462974532449, 8.771308322561431], 
                  "TrainingMemory" -> 71796., "TrainingTime" -> 
                  0.007445296664866278|>, "Index" -> 9|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 100000.|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.637339181914188, 0.16376681433823803`], 
                   "StandardDeviation" -> 
                   Around[63.899201446423874`, 10.621738680009202`], 
                   "EvaluationTime" -> 0.0003962232981152782, "TestSize" -> 
                   16, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -4.883163872506583, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                   71907.2, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                    Around[5.476192373963645, 0.10260615265004945`], 
                    Around[5.471655583791052, 0.10266807193986724`], 
                    Around[5.507216721802263, 0.1058574896588938], 
                    Around[6.094292048099793, 0.6928535641932376]}, 
                   "StandardDeviationHistory" -> {
                    Around[54.45211753711327, 12.09014789559942], 
                    Around[53.66772021908272, 12.396040241511349`], 
                    Around[58.916523005587585`, 11.047063147027592`], 
                    Around[88.56044502391195, 28.50712799380581]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.0003962232981152782, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[63.899201446423874`, 10.621738680009202`], 
                  "TrainingMemory" -> 71907.2, "TrainingTime" -> 
                  0.007445296664866278|>, "Index" -> 10|>|>, 
             TypeSystem`Assoc[
              TypeSystem`Struct[{"Value", "Options"}, {
                TypeSystem`Atom[
                 TypeSystem`Enumeration["LinearRegression"]], 
                TypeSystem`Assoc[TypeSystem`AnyType, 
                 TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
              
              TypeSystem`Struct[{
               "Experiments", "PredictedPerformances", "Index"}, {
                TypeSystem`Vector[
                 
                 TypeSystem`Struct[{
                  "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                   "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
                   "TrainingTime", "TrainingMemory", "ExperimentCount", 
                   "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
                  TypeSystem`AnyType, TypeSystem`AnyType, 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[
                   TypeSystem`AnyType, TypeSystem`AnyLength], 
                   TypeSystem`Vector[
                   TypeSystem`AnyType, TypeSystem`AnyLength]}], 1], 
                
                TypeSystem`Struct[{
                 "EvaluationTime", "ModelMemory", "StandardDeviation", 
                  "TrainingMemory", "TrainingTime"}, {
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], TypeSystem`AnyType, 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real]}], 
                TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 
           18, "PreprocessorEvaluationTime" -> 3.58984375*^-6, 
           "PreprocessorMemory" -> 67112, "InputDimension" -> 3, 
           "OutputDimension" -> 1, 
           "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
           True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
           "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
           "LastReportingTime" -> 3.877102765662961`16.341082301637083*^9, 
           "RoundPartitioning" -> 
           Dataset[{<|
              "TrainingSizes" -> 14, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
               0.39825900000000003`, "ExperimentCounts" -> 37|>}, 
             TypeSystem`Vector[
              
              TypeSystem`Struct[{
               "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
                "ExperimentCounts"}, {
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer]}], 1], <||>]|>, "AnomalyDetector" -> 
         None, "Log" -> <|
          "Example" -> 
           MachineLearning`MLDataset[<|
             "f1" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, "ID" -> 
                6448330931398477146|>, 
              "f2" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, "ID" -> 
                1033804942478285849|>, 
              "f3" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, "ID" -> 
                3644694514917083622|>|>, <|
             "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
              0, "RawExample" -> False|>], "TrainingTime" -> 0.727134, 
           "MaxTrainingMemory" -> 454968, "DataMemory" -> 3496, 
           "FunctionMemory" -> 201560, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 11, 10, 20, 59, 26.133554`8.169773457147098}, 
             "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
           "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
           "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
      "TestSet" -> <|
       "Input" -> {{601, 16, 53}, {664, 24, 61}, {624, 11, 34}, {573, 21, 
         62}, {597, 23, 49}, {585, 8, 54}, {573, 21, 62}, {597, 23, 49}, {585,
          8, 54}, {611, 12, 49}, {620, 19, 69}, {624, 11, 34}, {737, 24, 47}},
         "Output" -> {171.93, 152.04, 172.67, 140.39, 96.13, 158.5, 140.39, 
         96.13, 158.5, 164.63, 222.78, 172.67, 335.28}|>, 
      "Predictions" -> {138.35171937094242`, 185.40548830156573`, 
       190.34689192827926`, 97.88458872746293, 141.7569036541599, 
       120.9045804948851, 97.88458872746293, 141.7569036541599, 
       120.9045804948851, 153.8659528526204, 130.5445863726282, 
       190.34689192827926`, 276.8047333848016}, "Distributions" -> {
        NormalDistribution[138.35171937094242`, 51.86123203796313], 
        NormalDistribution[185.40548830156573`, 51.86123203796313], 
        NormalDistribution[190.34689192827926`, 51.86123203796313], 
        NormalDistribution[97.88458872746293, 51.86123203796313], 
        NormalDistribution[141.7569036541599, 51.86123203796313], 
        NormalDistribution[120.9045804948851, 51.86123203796313], 
        NormalDistribution[97.88458872746293, 51.86123203796313], 
        NormalDistribution[141.7569036541599, 51.86123203796313], 
        NormalDistribution[120.9045804948851, 51.86123203796313], 
        NormalDistribution[153.8659528526204, 51.86123203796313], 
        NormalDistribution[130.5445863726282, 51.86123203796313], 
        NormalDistribution[190.34689192827926`, 51.86123203796313], 
        NormalDistribution[276.8047333848016, 51.86123203796313]}, 
      "Modes" -> {138.35171937094242`, 185.40548830156573`, 
       190.34689192827926`, 97.88458872746293, 141.7569036541599, 
       120.9045804948851, 97.88458872746293, 141.7569036541599, 
       120.9045804948851, 153.8659528526204, 130.5445863726282, 
       190.34689192827926`, 276.8047333848016}, "Weights" -> 
      SparseArray[Automatic, {13}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.005132153846153846, "SingleEvaluationTime" -> 
      0.00162515625, "Version" -> {13.1, 0}|>]]}], "}"}]], "Output",
 CellChangeTimes->{3.877126739455634*^9, 3.877127993463017*^9, 
  3.8771280639566507`*^9},
 CellLabel->
  "Out[384]=",ExpressionUUID->"ba5c9b22-1596-4f1b-a9db-fb1f6c1154a5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"pm", "[", "\"\<ComparisonPlot\>\"", "]"}], ",", 
   RowBox[{"pm2", "[", "\"\<ComparisonPlot\>\"", "]"}]}], "}"}]], "Input",
 Background->RGBColor[0.94, 0.88, 0.94],
 CellLabel->
  "In[385]:=",ExpressionUUID->"dc9fb956-3853-474e-a2d5-e3feb9d9d4a4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     GraphicsBox[{{{}, {{{
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           GeometricTransformationBox[
            InsetBox[
             BoxData[
              FormBox[
               StyleBox[
                GraphicsBox[{
                  AbsoluteThickness[1.], 
                  RGBColor[0.34398, 0.49112, 0.89936], 
                  CircleBox[{0, 0}, 
                   Offset[{1.8, 1.8}, {0., 0.}]]}], 
                GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, StripOnInput -> False], 
               TraditionalForm]], {0., 0.}], {{{105.49226135493716`, 
            171.93}}, {{126.48846126589658`, 152.04}}, {{197.49616800144292`, 
            172.67}}, {{121.99212187132082`, 140.39}}, {{142.37672513947388`, 
            96.13}}, {{76.574751795214, 158.5}}, {{121.99212187132082`, 
            140.39}}, {{142.37672513947388`, 96.13}}, {{76.574751795214, 
            158.5}}, {{113.85998570762294`, 164.63}}, {{95.8915450958412, 
            222.78}}, {{197.49616800144292`, 172.67}}, {{375.88593588615777`, 
            335.28}}}]}}, {
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{105.49226135493716`, 171.93}}]}, 
            RowBox[{"{", 
              RowBox[{"105.49226135493716`", ",", "171.93`"}], "}"}]], 
           Annotation[#, {105.49226135493716`, 171.93}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{126.48846126589658`, 152.04}}]}, 
            RowBox[{"{", 
              RowBox[{"126.48846126589658`", ",", "152.04`"}], "}"}]], 
           Annotation[#, {126.48846126589658`, 152.04}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{197.49616800144292`, 172.67}}]}, 
            RowBox[{"{", 
              RowBox[{"197.49616800144292`", ",", "172.67`"}], "}"}]], 
           Annotation[#, {197.49616800144292`, 172.67}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{121.99212187132082`, 140.39}}]}, 
            RowBox[{"{", 
              RowBox[{"121.99212187132082`", ",", "140.39`"}], "}"}]], 
           Annotation[#, {121.99212187132082`, 140.39}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{142.37672513947388`, 96.13}}]}, 
            RowBox[{"{", 
              RowBox[{"142.37672513947388`", ",", "96.13`"}], "}"}]], 
           Annotation[#, {142.37672513947388`, 96.13}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{76.574751795214, 158.5}}]}, 
            RowBox[{"{", 
              RowBox[{"76.574751795214`", ",", "158.5`"}], "}"}]], 
           Annotation[#, {76.574751795214, 158.5}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{121.99212187132082`, 140.39}}]}, 
            RowBox[{"{", 
              RowBox[{"121.99212187132082`", ",", "140.39`"}], "}"}]], 
           Annotation[#, {121.99212187132082`, 140.39}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{142.37672513947388`, 96.13}}]}, 
            RowBox[{"{", 
              RowBox[{"142.37672513947388`", ",", "96.13`"}], "}"}]], 
           Annotation[#, {142.37672513947388`, 96.13}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{76.574751795214, 158.5}}]}, 
            RowBox[{"{", 
              RowBox[{"76.574751795214`", ",", "158.5`"}], "}"}]], 
           Annotation[#, {76.574751795214, 158.5}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{113.85998570762294`, 164.63}}]}, 
            RowBox[{"{", 
              RowBox[{"113.85998570762294`", ",", "164.63`"}], "}"}]], 
           Annotation[#, {113.85998570762294`, 164.63}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{95.8915450958412, 222.78}}]}, 
            RowBox[{"{", 
              RowBox[{"95.8915450958412`", ",", "222.78`"}], "}"}]], 
           Annotation[#, {95.8915450958412, 222.78}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{197.49616800144292`, 172.67}}]}, 
            RowBox[{"{", 
              RowBox[{"197.49616800144292`", ",", "172.67`"}], "}"}]], 
           Annotation[#, {197.49616800144292`, 172.67}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{375.88593588615777`, 335.28}}]}, 
            RowBox[{"{", 
              RowBox[{"375.88593588615777`", ",", "335.28`"}], "}"}]], 
           Annotation[#, {375.88593588615777`, 335.28}, 
            "Tooltip"]& ]}}, {{}, {}}}, {{{{}, {}, 
          TagBox[{
            Directive[
             GrayLevel[0.2], 
             Opacity[0.5], 
             AbsoluteThickness[1.], 
             AbsoluteDashing[{2, 4}]], 
            LineBox[CompressedData["
1:eJxFxXss1AEcAPDLaLpG181RNnKGPyj0UuLuijzy2HkkZ3YeVxzq5nHnLkvI
Y4qsmJqFmcdWCkuNIdxCCFmuMmuNnNyNa+4Y7vzupscfvt8/PvvQeekRSUYk
Ein0n/+7LPLIT4Z+Mvc2XWI3VEkHWXvn9uqr2dJpuLtl5pCrdB6OfOYdaiNd
g+1pGyoL6S78QBbyjiI1v7g34yTRZC61hd2YcQEHTdzhVIomZ3PqHFygPLY0
IWDBjFH7X9TvvrDyRYddZXcAXJh1tnZmORj2byjhjJDCYJ6ZIDBQFQ5r18Kj
T/yJhJs4pyf71FFwsW//w6LZaHih0UfQroiBw+9/eJP/JRb2kvtZvV3hwtwB
wUf6djwcTLmSUadOgJv1MeVzukR4v8vKXIqGBztZaLtaDdfhxYE5T1PjJPj5
q/Oavh3cOdLKw9aYD/cwRR3fDLh8teXTS00KPB52Ndd9JxXuJe5xyZo0mB/n
Ol2tvwm/LuxY9jYSwCaqNjdPLW5p5nxAQUqHTwkdaUodvhVCLBmJM2A3Br1k
dQdPZ5eyDKJMuGKw7VIygXeyD3MJcRZs/34h2GYdz3okKKzJFsJj+RdkjHWc
mBpN9ZKI4DtE/9cxAjcK2uDkZWfD/G2FQwWBy0asyaNiMVwm7Bmq0OD0fNpw
u0gCD7R1/tCq8Sr5ZLztBp58RCG/vIlTiq1XKnU4L7Zoy2XfbdiUHGWeQMUj
+DrW+BncqZ46vOaB62XH/WmeeAszMYTHwLW0CY7BD68bqc10j8Yzia7NazG4
v/tnyd1YXF1rnDcRj/sIBWU3UnDL1lKz8jRcNd/4uPMWXh00+3Q3A08t0Bx1
FOLMbnJ9cDZO/e1glyXBlXRWc00O/hcJS0vV
             "]]}, 
           Annotation[#, "Charting`Private`Tag$1022700#1"]& ]}}, {}}}, {
      DisplayFunction -> Identity, DisplayFunction -> Identity, 
       Axes -> {False, False}, AxesLabel -> {None, None}, 
       AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
       Frame -> {{True, False}, {True, False}}, FrameLabel -> {{
          FormBox[
           TagBox["\"actual value\"", HoldForm], TraditionalForm], None}, {
          FormBox[
           TagBox["\"predicted value\"", HoldForm], TraditionalForm], None}}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 300, 
       Method -> {
        "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
         "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& )}}, 
       PlotRange -> {{0., 391.5997730509323}, {0., 391.5997730509323}}, 
       PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     FormBox[
      TagBox[
       GridBox[{{
          FormBox[
           
           TemplateBox[{"\"predictions\""}, "PointLegend", 
            DisplayFunction -> (StyleBox[
              StyleBox[
               PaneBox[
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    InsetBox[
                    GraphicsBox[{
                    AbsoluteThickness[1.], 
                    RGBColor[0.34398, 0.49112, 0.89936], 
                    CircleBox[{0, 0}, 
                    Offset[{1.8, 1.8}, {0., 0.}]]}, {
                    DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                 "Grid"], Alignment -> Left, AppearanceElements -> None, 
                ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
                "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
              FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
              False]& ), 
            InterpretationFunction :> (RowBox[{"PointLegend", "[", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   "}"}], ",", 
                 RowBox[{"{", #, "}"}], ",", 
                 RowBox[{"LegendMarkers", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    GraphicsBox[{
                    AbsoluteThickness[1.], 
                    RGBColor[0.34398, 0.49112, 0.89936], 
                    CircleBox[{0, 0}, 
                    Offset[{1.8, 1.8}, {0., 0.}]]}], ",", "Automatic"}], 
                    "}"}], "}"}]}], ",", 
                 RowBox[{"Joined", "\[Rule]", 
                   RowBox[{"{", "False", "}"}]}], ",", 
                 RowBox[{"LabelStyle", "\[Rule]", 
                   RowBox[{"{", "}"}]}], ",", 
                 RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], 
               "]"}]& ), Editable -> True], TraditionalForm]}, {
          FormBox[
           
           TemplateBox[{"\"perfect predictions\""}, "LineLegend", 
            DisplayFunction -> (StyleBox[
              StyleBox[
               PaneBox[
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    GrayLevel[0.2], 
                    Opacity[0.5], 
                    AbsoluteThickness[1.], 
                    AbsoluteDashing[{2, 4}]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    GrayLevel[0.2], 
                    Opacity[0.5], 
                    AbsoluteThickness[1.], 
                    AbsoluteDashing[{2, 4}]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                 "Grid"], Alignment -> Left, AppearanceElements -> None, 
                ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
                "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
              FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
              False]& ), InterpretationFunction :> (RowBox[{"LineLegend", "[", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0.2]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.`", "]"}], ",", 
                    RowBox[{"AbsoluteDashing", "[", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "4"}], "}"}], "]"}]}], "]"}], "}"}], 
                 ",", 
                 RowBox[{"{", #, "}"}], ",", 
                 RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
                 RowBox[{"LabelStyle", "\[Rule]", 
                   RowBox[{"{", "}"}]}], ",", 
                 RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], 
               "]"}]& ), Editable -> True], TraditionalForm]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        GridBoxSpacings -> {"Columns" -> {{0}}}], "Grid"], TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], ",", 
   TemplateBox[{
     GraphicsBox[{{{}, {{{
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           GeometricTransformationBox[
            InsetBox[
             BoxData[
              FormBox[
               StyleBox[
                GraphicsBox[{
                  AbsoluteThickness[1.], 
                  RGBColor[0.34398, 0.49112, 0.89936], 
                  CircleBox[{0, 0}, 
                   Offset[{1.8, 1.8}, {0., 0.}]]}], 
                GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, StripOnInput -> False], 
               TraditionalForm]], {0., 0.}], {{{138.35171937094242`, 
            171.93}}, {{185.40548830156573`, 152.04}}, {{190.34689192827926`, 
            172.67}}, {{97.88458872746293, 140.39}}, {{141.7569036541599, 
            96.13}}, {{120.9045804948851, 158.5}}, {{97.88458872746293, 
            140.39}}, {{141.7569036541599, 96.13}}, {{120.9045804948851, 
            158.5}}, {{153.8659528526204, 164.63}}, {{130.5445863726282, 
            222.78}}, {{190.34689192827926`, 172.67}}, {{276.8047333848016, 
            335.28}}}]}}, {
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{138.35171937094242`, 171.93}}]}, 
            RowBox[{"{", 
              RowBox[{"138.35171937094242`", ",", "171.93`"}], "}"}]], 
           Annotation[#, {138.35171937094242`, 171.93}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{185.40548830156573`, 152.04}}]}, 
            RowBox[{"{", 
              RowBox[{"185.40548830156573`", ",", "152.04`"}], "}"}]], 
           Annotation[#, {185.40548830156573`, 152.04}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{190.34689192827926`, 172.67}}]}, 
            RowBox[{"{", 
              RowBox[{"190.34689192827926`", ",", "172.67`"}], "}"}]], 
           Annotation[#, {190.34689192827926`, 172.67}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{97.88458872746293, 140.39}}]}, 
            RowBox[{"{", 
              RowBox[{"97.88458872746293`", ",", "140.39`"}], "}"}]], 
           Annotation[#, {97.88458872746293, 140.39}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{141.7569036541599, 96.13}}]}, 
            RowBox[{"{", 
              RowBox[{"141.7569036541599`", ",", "96.13`"}], "}"}]], 
           Annotation[#, {141.7569036541599, 96.13}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{120.9045804948851, 158.5}}]}, 
            RowBox[{"{", 
              RowBox[{"120.9045804948851`", ",", "158.5`"}], "}"}]], 
           Annotation[#, {120.9045804948851, 158.5}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{97.88458872746293, 140.39}}]}, 
            RowBox[{"{", 
              RowBox[{"97.88458872746293`", ",", "140.39`"}], "}"}]], 
           Annotation[#, {97.88458872746293, 140.39}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{141.7569036541599, 96.13}}]}, 
            RowBox[{"{", 
              RowBox[{"141.7569036541599`", ",", "96.13`"}], "}"}]], 
           Annotation[#, {141.7569036541599, 96.13}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{120.9045804948851, 158.5}}]}, 
            RowBox[{"{", 
              RowBox[{"120.9045804948851`", ",", "158.5`"}], "}"}]], 
           Annotation[#, {120.9045804948851, 158.5}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{153.8659528526204, 164.63}}]}, 
            RowBox[{"{", 
              RowBox[{"153.8659528526204`", ",", "164.63`"}], "}"}]], 
           Annotation[#, {153.8659528526204, 164.63}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{130.5445863726282, 222.78}}]}, 
            RowBox[{"{", 
              RowBox[{"130.5445863726282`", ",", "222.78`"}], "}"}]], 
           Annotation[#, {130.5445863726282, 222.78}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{190.34689192827926`, 172.67}}]}, 
            RowBox[{"{", 
              RowBox[{"190.34689192827926`", ",", "172.67`"}], "}"}]], 
           Annotation[#, {190.34689192827926`, 172.67}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[{
             Opacity[0.], 
             PointBox[{{276.8047333848016, 335.28}}]}, 
            RowBox[{"{", 
              RowBox[{"276.8047333848016`", ",", "335.28`"}], "}"}]], 
           Annotation[#, {276.8047333848016, 335.28}, 
            "Tooltip"]& ]}}, {{}, {}}}, {{{{}, {}, 
          TagBox[{
            Directive[
             GrayLevel[0.2], 
             Opacity[0.5], 
             AbsoluteThickness[1.], 
             AbsoluteDashing[{2, 4}]], 
            LineBox[CompressedData["
1:eJxFxW0w03EcAPAROuI8pIk62tmlduu620W7XKMrO7fG/2aJ88yYZMyMcFHI
LvJUXF1uFdaRuTC32lqi3UbqXEIWeTg7o4WGat1V5KoXvr8Xn/sQkvhhKZY4
HC7kn/+nlBvFB1/N0rZnTqnuzmA9AdsXSXj2zdgQfNuGTr+GTcPNzyicHGwF
fuQs/crDNmASbYGahu0K3J43XhKTiu2DP5u9C7JyyXAhSzhoRfSFyzVuGfeW
/WHCmkvVfskpWLfIMhOcgmB9d9CcdDAYNtmJIyYymPAos23eX4fBNhTffGct
C3akZJcfKGTDDT/j40vJ4fDw4ba8FosImI8x3ZOVkfCLOcam4VYUfMPvd4uC
EwNrS6w/EvFxcNvx9JBzpnh4M+tOS+1YAlxwmTigUyfC1CW74IH2JJjMaqy1
FHHg3FV9XpMgGf4hGiFWhabAiuK9vgQfLjwkc/iEd0mF3aZl0VEmtOqERfbW
1AVY/Ee6crY/DZY/x5GM9y/ChA4rW0NFOjzQoHhM5vJg6ZJa7kXLgA2Z+dHC
Q5kwe3V20HUHH3Z/uD6OX0fbSSPZcm4W7ENZNB19j14Lfz05EyyAxy5ZtsoU
6ARKvfbJkWy4xmukrlqCnrBNPlPtKISHakLpvSL0lNNNkqsZXdFfpA5IyIEN
LppWsQ4dGRfL9zydC3/7wODtDEJXYtS0dTq6L3A3R8NAe3u/Oc8NQ68aj9E6
E9FlAnsHWjHac/mXrU8pWplktHEqQy+zNbj562jML98sqkV7bBim3z5Ay4Wj
k4omNPNLn65Rgr462/BO0IpeeIlp93Sir1BPqre60G7dpF5jN5ohsVaqnqIN
Ht/lEiW6sF4vq1Sh8fbDHTk96K6ynvbYXvRfYlRBCw==
             "]]}, 
           Annotation[#, "Charting`Private`Tag$1022889#1"]& ]}}, {}}}, {
      DisplayFunction -> Identity, DisplayFunction -> Identity, 
       Axes -> {False, False}, AxesLabel -> {None, None}, 
       AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
       Frame -> {{True, False}, {True, False}}, FrameLabel -> {{
          FormBox[
           TagBox["\"actual value\"", HoldForm], TraditionalForm], None}, {
          FormBox[
           TagBox["\"predicted value\"", HoldForm], TraditionalForm], None}}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 300, 
       Method -> {
        "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
         "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& )}}, 
       PlotRange -> {{0., 347.835375}, {0., 347.835375}}, PlotRangeClipping -> 
       True, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     FormBox[
      TagBox[
       GridBox[{{
          FormBox[
           
           TemplateBox[{"\"predictions\""}, "PointLegend", 
            DisplayFunction -> (StyleBox[
              StyleBox[
               PaneBox[
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    InsetBox[
                    GraphicsBox[{
                    AbsoluteThickness[1.], 
                    RGBColor[0.34398, 0.49112, 0.89936], 
                    CircleBox[{0, 0}, 
                    Offset[{1.8, 1.8}, {0., 0.}]]}, {
                    DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                 "Grid"], Alignment -> Left, AppearanceElements -> None, 
                ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
                "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
              FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
              False]& ), 
            InterpretationFunction :> (RowBox[{"PointLegend", "[", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   "}"}], ",", 
                 RowBox[{"{", #, "}"}], ",", 
                 RowBox[{"LegendMarkers", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    GraphicsBox[{
                    AbsoluteThickness[1.], 
                    RGBColor[0.34398, 0.49112, 0.89936], 
                    CircleBox[{0, 0}, 
                    Offset[{1.8, 1.8}, {0., 0.}]]}], ",", "Automatic"}], 
                    "}"}], "}"}]}], ",", 
                 RowBox[{"Joined", "\[Rule]", 
                   RowBox[{"{", "False", "}"}]}], ",", 
                 RowBox[{"LabelStyle", "\[Rule]", 
                   RowBox[{"{", "}"}]}], ",", 
                 RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], 
               "]"}]& ), Editable -> True], TraditionalForm]}, {
          FormBox[
           
           TemplateBox[{"\"perfect predictions\""}, "LineLegend", 
            DisplayFunction -> (StyleBox[
              StyleBox[
               PaneBox[
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    GrayLevel[0.2], 
                    Opacity[0.5], 
                    AbsoluteThickness[1.], 
                    AbsoluteDashing[{2, 4}]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    GrayLevel[0.2], 
                    Opacity[0.5], 
                    AbsoluteThickness[1.], 
                    AbsoluteDashing[{2, 4}]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                 "Grid"], Alignment -> Left, AppearanceElements -> None, 
                ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
                "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
              FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
              False]& ), InterpretationFunction :> (RowBox[{"LineLegend", "[", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0.2]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.`", "]"}], ",", 
                    RowBox[{"AbsoluteDashing", "[", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "4"}], "}"}], "]"}]}], "]"}], "}"}], 
                 ",", 
                 RowBox[{"{", #, "}"}], ",", 
                 RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
                 RowBox[{"LabelStyle", "\[Rule]", 
                   RowBox[{"{", "}"}]}], ",", 
                 RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], 
               "]"}]& ), Editable -> True], TraditionalForm]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        GridBoxSpacings -> {"Columns" -> {{0}}}], "Grid"], TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}], "}"}]], "Output",\

 CellChangeTimes->{3.877126770624967*^9, 3.877128067440619*^9},
 CellLabel->
  "Out[385]=",ExpressionUUID->"fc74bd6d-7f66-40c8-96cf-80d90d602f70"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CloudDeploy", "[", 
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "x1", ",", "x3"}], "}"}], "->", 
     RowBox[{"p", "[", 
      RowBox[{"{", 
       RowBox[{"x", ",", "x1", ",", "x3"}], "}"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", 
        RowBox[{"Style", "[", 
         RowBox[{"\"\<3k TT (sec)\>\"", ",", "24"}], "]"}]}], "}"}], ",", "0",
       ",", "1000"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x1", ",", "0", ",", 
        RowBox[{"Style", "[", 
         RowBox[{"\"\<Pullups #\>\"", ",", "24"}], "]"}]}], "}"}], ",", "0", 
      ",", "50"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x3", ",", "0", ",", 
        RowBox[{"Style", "[", 
         RowBox[{"\"\<Pushups #\>\"", ",", "24"}], "]"}]}], "}"}], ",", "0", 
      ",", "50"}], "}"}]}], "]"}], "]"}]], "Input",
 Background->RGBColor[1., 1., 0.85],
 CellLabel->
  "In[323]:=",ExpressionUUID->"aa5bf5aa-22e8-4104-b5c7-9bd039c7c18d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/79cfc77d-b6d3-4813-aed7-a8512243f74e\"\
", "https://www.wolframcloud.com/obj/79cfc77d-b6d3-4813-aed7-a8512243f74e"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/79cfc77d-b6d3-4813-aed7-a8512243f74e"],
  SelectWithContents->True]], "Output",
 CellChangeTimes->{3.8771268263567944`*^9},
 CellLabel->
  "Out[323]=",ExpressionUUID->"d8e7d887-813c-4282-b9b8-c32338e07b4d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Take", "[", 
   RowBox[{"a", ",", "8", ",", "8"}], "]"}], "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.877127115146307*^9, 3.877127115916822*^9}, {
   3.8771271908956137`*^9, 3.87712719207059*^9}, {3.8771272236683283`*^9, 
   3.8771272325125732`*^9}, 3.8771277991998663`*^9},
 CellLabel->
  "In[368]:=",ExpressionUUID->"721c6f13-7719-4593-9f42-2c0a202e7a29"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"First Name\"\>", "\<\"Last Name\"\>", "\<\"Year of Birth\"\>", \
"\<\"Region\"\>", "\<\"USSA Points\"\>", "\<\"Sex\"\>", "\<\"Qualified\"\>", \
"\<\"Location\"\>"},
    {"\<\"Phoebe\"\>", "\<\"Sweet\"\>", "2000", "\<\"East\"\>", 
     "136.57`", "\<\"Female\"\>", "\<\"Y\"\>", "\<\"Craftsbury VT\"\>"},
    {"\<\"Nina\"\>", "\<\"Seemann\"\>", "2002", "\<\"East\"\>", 
     "121.54`", "\<\"Female\"\>", "\<\"Y\"\>", "\<\"Craftsbury VT\"\>"},
    {"\<\"Camille\"\>", "\<\"Bolduc\"\>", "2003", "\<\"East\"\>", 
     "201.92`", "\<\"Female\"\>", "\<\"Y\"\>", "\<\"Craftsbury VT\"\>"},
    {"\<\"Lil Q\"\>", "\<\"Massey-Bierman\"\>", "2003", "\<\"East\"\>", 
     "198.71`", "\<\"Female\"\>", "\<\"Y\"\>", "\<\"Craftsbury VT\"\>"},
    {"\<\"Maggie\"\>", "\<\"McGee\"\>", "2004", "\<\"East\"\>", 
     "231.52`", "\<\"Female\"\>", "\<\"Y\"\>", "\<\"Craftsbury VT\"\>"},
    {"\<\"Adrienne\"\>", "\<\"Remick\"\>", "2002", "\<\"East\"\>", 
     "221.76`", "\<\"Female\"\>", "\<\"Y\"\>", "\<\"Craftsbury VT\"\>"},
    {"\<\"Emma\"\>", "\<\"Charles\"\>", "2004", "\<\"East\"\>", 
     "231.6`", "\<\"Female\"\>", "\<\"Y\"\>", "\<\"Oakland, ME\"\>"}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.877127040929161*^9, 3.8771271162974443`*^9, 3.877127192402401*^9, {
   3.877127224609776*^9, 3.877127232835248*^9}, 3.877127799479534*^9},
 CellLabel->
  "Out[368]//TableForm=",ExpressionUUID->"90d36ff4-6f34-4dbe-a615-\
007251aa8321"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"trainingset", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"605", ",", "15", ",", "35", ",", "67", ",", "45"}], "}"}], 
     "\[Rule]", "159.78`"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"614", ",", "11", ",", "44", ",", "57", ",", "45"}], "}"}], 
     "\[Rule]", "164.63`"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"586", ",", "27", ",", "60", ",", "63", ",", "45"}], "}"}], 
     "\[Rule]", "110.23`"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"673", ",", "19", ",", "48", ",", "49", ",", "34"}], "}"}], 
     "\[Rule]", "160.61`"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"694", ",", "23", ",", "60", ",", "59", ",", "34"}], "}"}], 
     "\[Rule]", "256.83`"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"656", ",", "9", ",", "32", ",", "66", ",", "30"}], "}"}], 
     "\[Rule]", "241.39`"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"653", ",", "8", ",", "48", ",", "57", ",", "46"}], "}"}], 
     "\[Rule]", "149.08`"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"679", ",", "29", ",", "62", ",", "61", ",", "42"}], "}"}], 
     "\[Rule]", "185.41`"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"591", ",", "15", ",", "54", ",", "69", ",", "26"}], "}"}], 
     "\[Rule]", "98.12`"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"578", ",", "16", ",", "37", ",", "63", ",", "34"}], "}"}], 
     "\[Rule]", "233.01`"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"642", ",", "9", ",", "41", ",", "76", ",", "20"}], "}"}], 
     "\[Rule]", "126.76`"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"666", ",", "9", ",", "52", ",", "75", ",", "28"}], "}"}], 
     "\[Rule]", "195.43`"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"685", ",", "22", ",", "60", ",", "66", ",", "56"}], "}"}], 
     "\[Rule]", "154.05`"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"665", ",", "19", ",", "53", ",", "78", ",", "36"}], "}"}], 
     "\[Rule]", "169.14`"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"731", ",", "8", ",", "54", ",", "66", ",", "54"}], "}"}], 
     "\[Rule]", "355.01`"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"649", ",", "18", ",", "59", ",", "61", ",", "40"}], "}"}], 
     "\[Rule]", "159.86`"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"675", ",", "22", ",", "58", ",", "67", ",", "22"}], "}"}], 
     "\[Rule]", "251.46`"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.87712727776649*^9, 3.87712730245646*^9}, {
  3.8771273398073807`*^9, 3.877127345862762*^9}},
 CellLabel->
  "In[356]:=",ExpressionUUID->"2e1cb6b2-06c4-4277-b1a3-8c9bc243b5f6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"p2", "=", 
  RowBox[{"Predict", "[", 
   RowBox[{"trainingset", ",", 
    RowBox[{"Method", "->", "\"\<NeuralNetwork\>\""}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"q2", "=", 
  RowBox[{"Predict", "[", 
   RowBox[{"trainingset", ",", 
    RowBox[{"Method", "->", "\"\<LinearRegression\>\""}]}], "]"}]}]}], "Input",\

 CellChangeTimes->{{3.877126255227037*^9, 3.8771262562344227`*^9}, 
   3.8771273617101507`*^9, {3.8771276469483624`*^9, 3.877127678703459*^9}},
 CellLabel->
  "In[357]:=",ExpressionUUID->"df75e094-af84-48e1-8deb-4eb78ef03649"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "5", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "5", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["17", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[<|
   "ExampleNumber" -> 17, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical"|>, 
           "f2" -> <|"Type" -> "Numerical"|>, 
           "f3" -> <|"Type" -> "Numerical"|>, 
           "f4" -> <|"Type" -> "Numerical"|>, 
           "f5" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 5|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5)" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 17, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7100669430970155518|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {649.5294117647059, 16.41176470588235, 
                    50.411764705882355`, 64.70588235294117, 
                    37.470588235294116`}, 
                    "StandardDeviation" -> {40.86292386397267, 
                    6.562449538444979, 9.311970938966981, 7.176470588235281, 
                    10.13507391109661}, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4772792621860920984|>]}, 
                   "Invertibility" -> "Perfect", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{
                   0.3294464620128585, -0.24670478291864095`}, {
                   0.5266978779192711, -0.20091067530452414`}, {
                   0.6075928250009178, -0.38220632047567493`}, \
{-0.31353029417700407`, -0.6809418760462183}, {0.3828630142795621, 
                   0.5375947736621413}}, 
                  "Precisions" -> {0.5140556558990445, 0.863155175120625}, 
                  "NoisePrecision" -> 1.5886875059025845`, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157116188`, \
-0.0018584586044933286`, -0.00024375769149080384`, 8.562084148579801*^-6, 
                    0.00021587557870743752`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7856623779326335863|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "Key" -> "(f1f2f3f4f5)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 2, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157115991`, \
-0.001858458604493322, -0.00024375769149081688`, 8.562084148556943*^-6, 
                    0.00021587557870744406`}, 
                    "StandardDeviation" -> {0.9973443489182671, 
                    1.0001052004380495`, 1.000282671403912, 
                    0.9982239732130878, 1.0001417047326489`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 5, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1764544953284831100|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                   "Mean" -> {-0.0013497098157115991`, -0.001858458604493322, \
-0.00024375769149081688`, 8.562084148556943*^-6, 0.00021587557870744406`}, 
                   "StandardDeviation" -> {0.9973443489182671, 
                    1.0001052004380495`, 1.000282671403912, 
                    0.9982239732130878, 1.0001417047326489`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 5, 
                   "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   1764544953284831100|>], "InputDimension" -> 0, 
                "OutputDimension" -> 5, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, 
                    "ID" -> 4922843929423532927|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, 
                    "ID" -> 365386638938414886|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, 
                    "ID" -> 8084762059231395715|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, 
                    "ID" -> 717539068447703646|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, 
                    "ID" -> 3403397587327662634|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.089636, "MaxTrainingMemory" -> 193192, 
                  "DataMemory" -> 6400, "FunctionMemory" -> 51568, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 11, 10, 20, 54, 42.044446`8.376283612062736}, 
                    "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-4.406902047628646, -4.406902047628646, \
-4.168656228344961, -4.127362310486287, -3.8790302555384786`, \
-3.8157144014569915`, -3.7752140087029566`, -3.538288180712346, \
-3.4944058955364734`, -3.4490724744232923`, -3.432924033093133}, 
                   "LeftBoundary" -> -4.168656228344961, "LeftScale" -> 
                   0.11912290964184223`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[19.043784917961784`, 0.5368425024100205], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 5966421770916112094|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4f5)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1020916197684206682|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Mean" -> {649.5294117647059, 16.41176470588235, 
              50.411764705882355`, 64.70588235294117, 37.470588235294116`}, 
             "StandardDeviation" -> {40.86292386397267, 6.562449538444979, 
              9.311970938966981, 7.176470588235281, 10.13507391109661}, 
             "Output" -> <|
              "(f1f2f3f4f5)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 2859614146361296001|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1892463177288152845|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {186.5176470588235}, 
             "StandardDeviation" -> {61.9974481950585}, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 5696177821155824089|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>,
              "Version" -> {13.1, 0}, "ID" -> 5443556393657702637|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Numerical", "Weight" -> 1|>, "Key" -> "f1",
              "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
             "Missing" -> "Allowed"|>]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
      "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (186.5176470588235 + 
       61.9974481950585 #& ), 
      "ProcessorFunction" -> (-3.008472969274401 + 0.016129696126423874` #& ),
       "Name" -> "value", 
      "Quantiles" -> {-1.4258271853496902`, 2.7177304525673383`}, "Mean" -> 
      186.51764705882354`|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 
    0, "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetGraph[<|
        "Type" -> "Graph", 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
         "Outputs" -> <|
          "Mean" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
           "LogStd" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
         "Nodes" -> <|
          "2" -> <|"Type" -> "NetArray", 
             "Arrays" -> <|
              "Array" -> RawArray["Real32",{-1.349244475364685}]|>, 
             "Parameters" -> <|
              "Dimensions" -> 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
               "$ArrayDimensions" -> {1}|>, "Inputs" -> <||>, 
             "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>|>, 
           "1" -> <|"Type" -> "Chain", 
             "Nodes" -> <|
              "1" -> <|"Type" -> "Linear", 
                 "Arrays" -> <|"Weights" -> CompressedData["
1:eJwVkX001Xccx6+nPF0it1keargpD62Op7nc7+dbHvLQHKFmq84p8tCK5inV
MSLSJI5RCUdWNyq3stCR7v19vo3rIOYpcbGOhXXGYnZttLZp+uP1Pud13n++
rCK/Co1R5/F4yTorExpxckdSUsTpsFXvJToiztkp7v3ptILWCpK2JLSVXJQH
d7mwwrCPaV9ZKV1zby0z1VBj6UnFJGi7G5E5e7KU0w7i8J9ukrLVncBrVaDx
6G6usWMGtjVvwO2yepKXcIqLChZxyoEzsGoimckPJcsqb3PYrOzHtI9e4+Tb
/ZAdZg8zGWEY6c6jT+7vI8ZhlbBQJ6DjzQasdzkT9fN12ZJlMkSWNYg7H4hR
uKMVAmLjyNfxvfjc/xUYuZeQ8fZqFHVfxkJhEHoddQDB4hiX9nKWpG76EAZy
1CHVy49m8Io4/2EXGK05AyOJ2eIvbwTDhiUfqshNBCO3YiisyQFDS19492MX
PjxuIw6pl5JL9WforjvFsnwrB6x6bslcJ7SYUHcvvg1Rcncr4slvaiq8D9ny
zFEBK947Qp5WlRBRVQkXbeGP5beqiJAYgd7Uf+Rg9Tw+fJeH0/e0aZUglkZ6
6zJ/O1faoJ4FMTM8Njd/EtjUEGe6ToGDY+bk6SdDUHvjHLOO2ExLAwzoz752
yKrWyRMDbkLWFB+/TWgE41M6WLKVT+szvZlpvj0Xb6VBg+uauU7PA5B8cRGj
Qw1p3eQSuHmLWArhc5LzndyeAREO/jAL6f3lODeqQ5tc7Sj7Ro6hUmP617wC
bevc5R2H7bF49nNILXOER6ousiUnhvb5eaMsYx96iJ6hchpQ4FkMVi0NOOnj
BJXtofSfN8OgqHAkW+VHOG1bRzbwnYQV1Fmw3BZTGH5lBl6utyD/QC/G9ijJ
LvNW/F2lDb+eOAhlRuo4EjiGHmFNRM3NAIy9+EwmNaG/2Efj1Xg+FL1uxAtC
Q9op5dGdlzSp+moLurEb8XhIFDTr6TOV0VoqidrIBPufibN0hOJ+m2BQxfWR
rD/ssMnRj9PaPA25CfHixWUT6tJWywVaKuD65esk+zMt6un9KVdp7YkaMypZ
j/M1HDqbIxc2FXC+EWrMozQfDXuroSboMLpHb2DXivTAW/8oWfPCnIiS78rU
aq3pvPkT/KKuDEzae0l4qEq+s+8ImT32p0x7WEiFdwpg5I0U85YvQJF+5WOR
gyYtYS5Q/rKFBF7xAbPwNu5BvwL/5p/n9uxeT1fv7+Uy0xeIzff2TKIQMo+p
Qxibkk+Uj66SNC0+bTWuIGeDMtB6nMnpbe6x9EUHLOv+K04bLyCb3NajMrcf
1sZV08WCJs5wzo41tXdzW3LN6QfHNJFaDIJEeoK1X9GBibyelX6asunGbWC2
YEj/B4tc5wg=
                    "], "Biases" -> 
                   RawArray["Real32",{-0.006046982016414404, 
                    0.01094768289476633, -0.01573706977069378, 
                    0.0047432659193873405`, -0.004794590640813112, \
-0.00441701477393508, 0.007639972493052483, 
                    0.01084557082504034, -0.005566687323153019, \
-0.0013205497525632381`, 0.014802632853388786`, -0.006487568374723196, 
                    0.009240119718015194, 
                    0.0021974407136440277`, -0.00760944839566946, 
                    0.006094099022448063, -0.0016266591846942902`, \
-0.005242404527962208, -0.012635694816708565`, -0.009575792588293552, 
                    0.012568864971399307`, 
                    0.005971658509224653, -0.009663637727499008, 
                    0.006410474423319101, -0.005092632491141558, 
                    0.0028124761302024126`, 0.005427641794085503, 
                    0.003340229857712984, -0.010113236494362354`, 
                    0.004436654504388571, 0.0058419788256287575`, 
                    0.018462566658854485`, -0.003280350472778082, \
-0.010081307962536812`, -0.0029648032505065203`, -0.00011102357530035079`, 
                    0.0069335815496742725`, 0.013816557824611664`, 
                    0.009950462728738785, 0.022978467866778374`, 
                    0.007311551366001368, 
                    0.0021261130459606647`, -0.022344592958688736`, \
-0.008314860984683037, -0.00019943434745073318`, -0.008403168991208076, 
                    0.0012194984592497349`, 0.003228035755455494, 
                    0.004011283162981272, 0.01198896486312151}]|>, 
                 "Parameters" -> <|
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 5, "$InputDimensions" -> {5}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "2" -> <|
                "Type" -> "Elementwise", "Arrays" -> <||>, 
                 "Parameters" -> <|
                  "Function" -> 
                   NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "3" -> <|
                "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
                    "], "Biases" -> 
                   RawArray["Real32",{-0.015191205777227879`, 
                    0.00992884486913681, -0.007910537533462048, 
                    0.00468669505789876, -0.00858481414616108, \
-0.003707603085786104, -0.0015921351732686162`, 
                    0.006122278980910778, -0.0007066000252962112, 
                    0.008964158594608307, 0.0018779976526275277`, 
                    0.01389048621058464, 0.0020606450270861387`, 
                    0.006666568573564291, 0.006086943671107292, 
                    0.003852485679090023, 
                    0.001534137176349759, -0.00703401118516922, \
-0.012214618735015392`, 
                    0.004385023843497038, -0.004440641961991787, \
-0.0024265428073704243`, 
                    0.00453503243625164, -0.008752086199820042, \
-0.004861998837441206, -0.012879853136837482`, -0.004502273164689541, 
                    0.002359964419156313, 0.004534502513706684, 
                    0.009017699398100376, -0.006794629152864218, 
                    0.0019111580913886428`, -0.013047679327428341`, \
-0.0019220622489228845`, 
                    0.006048730108886957, -0.0049022892490029335`, \
-0.0015169120160862803`, 0.007940838113427162, 
                    0.009368786588311195, -0.015916137024760246`, \
-0.0021480126306414604`, -0.0126749686896801, -0.009588179178535938, \
-0.004214525688439608, -0.00006005383329465985, 0.004377466160804033, 
                    0.01086745597422123, -0.011768260039389133`, 
                    0.008027357049286366, -0.011080080643296242`}]|>, 
                 "Parameters" -> <|
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "4" -> <|
                "Type" -> "Elementwise", "Arrays" -> <||>, 
                 "Parameters" -> <|
                  "Function" -> 
                   NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "5" -> <|
                "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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

                    "], "Biases" -> 
                   RawArray["Real32",{0.003958416637033224, 
                    0.004005723167210817, -0.007912641391158104, 
                    0.007184411399066448, -0.00028486401424743235`, \
-0.007075212895870209, -0.0033020651899278164`, 0.003618840128183365, 
                    0.010765993036329746`, -0.0033256516326218843`, 
                    0.0009680944494903088, -0.002772249048575759, \
-0.003420497989282012, 
                    0.0017016272759065032`, -0.001040459144860506, \
-0.007172346115112305, -0.0006041122251190245, 
                    0.0037209908477962017`, -0.0031647218856960535`, 
                    0.009016493335366249, 
                    0.021091680973768234`, -0.0016538702184334397`, 
                    0.0014768631663173437`, -0.010863260366022587`, \
-0.0060304864309728146`, -0.007687366101890802, 
                    0.006995909381657839, -0.00729708606377244, 
                    0.007859603501856327, 
                    0.0004169284366071224, -0.0105108842253685, 
                    0.009919397532939911, 0.003148322692140937, 
                    0.0033018167596310377`, -0.0015713160391896963`, 
                    0.013760658912360668`, -0.006225240882486105, 
                    0.010298637673258781`, -0.006064248271286488, 
                    0.0024536754935979843`, -0.0030491393990814686`, \
-0.0008770367712713778, -0.012365905568003654`, -0.010700110346078873`, \
-0.0012887706980109215`, -0.005197481717914343, 0.0018902270821854472`, 
                    0.005515063181519508, 
                    0.004066209774464369, -0.014230777509510517`}]|>, 
                 "Parameters" -> <|
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "6" -> <|
                "Type" -> "Elementwise", "Arrays" -> <||>, 
                 "Parameters" -> <|
                  "Function" -> 
                   NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "7" -> <|
                "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
K6PKe6t/0IsLq/hDYjJ8azFkjSfx4rChl/lAWG9OiEgH1xmxgk7VOEy//ZWK
r4Ti51EDqMFcoKbzv4TX/RXZanGp0LR7L5+ttcGsFYogF/gI8i1VuOeWw7DT
vhtuKTcXbpjL8Okl17Bdqwdi9W2InTkenk+eBPqaZ0SvkL9im68Gtvw0gUbV
sZh6MIfnvEkQqx+ni/HjTPF5xxDeZKAC423+iPuW74SjZsSB7cuh8U02uGxe
hdHSSlyunQIZa9fxy5gCOlJuyx6L3OD6i3BQq28VdvcdSjVFvXH/iTz6rbUV
F/WI4H6TFNFbN18MXDOMTxorcKiTGzmPmouqIaX0xVUGm4LG4hvqSft2Z1BP
sY76VMjiuU2efF39j1A3Pxq/Z0Zh6c+9gk2dNqVkBWDgpbl8bYIr+pmb4auP
wHJl3yF/QhoFrfwP3gtXxXspa/h3tjFdnJgDb4+nUmdzEXyY4Us6vY0h7sJl
mpumwwoNx/ntMmXUMNTATdsQ7RsGcEzcafzVUwZrVl+E1as+CLkVGmwzfS4F
1r6jQovL4lTLJKEe9sGaV2vxmde5f25tQQf29+GMkZ1woUud7U0ihTsDvFl7
2x+6uzhLWj/oMGgcKKTngfN50AkZrrzsSZsHaXDp0p4ctDqGOTtcfPkjG5aZ
TkL5MyHgsnQOV8zyx6s7FOiYrTf1vVeEL6zKJTg9A96sahCdDY7gnqU9ePdz
a+GSih1FLntMRsa9+PwSQ+qmqoWfRtSS/N1TOLfogRDgcBDyJW7sd7VW/NH7
DFCytXhx32tB76Mumu85SvrzztOrhyHstHOWREFxDzwe0iwkxfuhjmYhW5/S
FyXuMWLIxlcQ7LoAyz70IsejueA8Ygl+KmBY2/MtBagX0/J1zizfcoUmu1YJ
Vco+VDTYBwOrhrFRtIROL/0iCKsiwX7icbrQq5UCAflL92bQbFVFnaHjMfBW
pbi7ZRd4XIjF8s/vhJZtNaLPzqmkqS7HxdsuiyrNETD2bDlpFT4Rwh+P5Z1G
BiKM0sX17zzEiVkeYmHBd3jY4zgu1LbnjS4hPFsnFt43fgEl/avwX+YkWFjj
ii7mm0Ct8gLppNyl/iMjOdvdhMa8arddv7uUL46Ikzy+okIT8zvFqx/fU0an
Muo0+OHbI/MhVsWQpn2fzv8Z+tPEwL3wsLLM7k12EC+fdRquvoyD0aV1lNox
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
                    "], "Biases" -> 
                   RawArray[
                    "Real32",{-0.011454882100224495`, \
-0.0024466600734740496`, -0.0062698060646653175`, -0.006350464187562466, \
-0.01420646719634533, -0.0020564538426697254`, -0.004923837259411812, \
-0.007839137688279152, 0.0018522355239838362`, 
                    0.0033349047880619764`, -0.005911992397159338, 
                    0.007079094648361206, -0.008707951754331589, 
                    0.0037979090120643377`, -0.012772182933986187`, \
-0.005552406422793865, 0.0018411882920190692`, -0.0027217422612011433`, 
                    0.002663832390680909, -0.00036231084959581494`, \
-0.010474298149347305`, -0.010254411026835442`, -0.001265915110707283, \
-0.0027711489237844944`, -0.00960750412195921, -0.009026489220559597, \
-0.01522766798734665, 0.008727367036044598, 0.00820887926965952, 
                    0.006508607883006334, 0.013287140056490898`, 
                    0.006551782134920359, -0.014525720849633217`, 
                    0.014075977727770805`, 0.013234032317996025`, 
                    0.0066650933586061, 0.004600803833454847, 
                    0.006622860208153725, 0.0047165281139314175`, 
                    0.005374656990170479, -0.0028713305946439505`, \
-0.0045578936114907265`, 0.0027967377100139856`, 
                    0.008611409924924374, -0.010763956233859062`, \
-0.009074881672859192, -0.010235066525638103`, -0.008815506473183632, 
                    0.001875711721368134, -0.003190170507878065}]|>, 
                 "Parameters" -> <|
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "8" -> <|
                "Type" -> "Elementwise", "Arrays" -> <||>, 
                 "Parameters" -> <|
                  "Function" -> 
                   NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "9" -> <|
                "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
+0eJrZG+L2TFt7l9xh2otPSt0N/aCHtCAsDcJwV3VZzlqqM1uODNKtyGmzbU
2ffDruiCGdvWHUW/rwdS3S9b5qYyierlvOHoTUeQkq0kVfn5bJR/LN+bew9e
Z1QL7+8mzvKnL6V/t6LIiz048nMK7JcbYTt26BjPndNkivpAHk8UmdryzWzv
Rwl21HYQHm6PhR+zb+GhDAGzf+bL+k9H8ravfIWjDsbQzGMJuODhN9i1sQFO
6N6iJbvi4KeHOTOvkWCibn54KHEYffUSZQ4KCmxqWTsnn30Do7rjMPqoHLmv
P0SmLBNuGYtQZt9kqKqw5Zx2KlC3Zis3udKN4ZJpbO6CozAs/xOcMfoL2T/G
s/W355ENDKKs1HtoVFNn2uu0qKn8E/+uNRnUHM9zap6PYfOsE/D6sSZT+7Ef
94dV0oH9ohTXrMxWNUxirrOb+Lii57hhnDjXc+warj2zk3VmVbKvz8ZQtLoI
Nez2RKO5Jfx1qyJIerSazRCVxAkFVTBY7cwqpV9jdlgFzFslJpTZ2IGVH3ay
yDInwaGwu8iJy0CQ2QI4MfCASzp1Ab82OlL3r614b14p6Yas45ZDOT+iSgA2
iasoK/Ed53nICoKPbKepPdOwMv8BqCwYTe1+b/g2j7Wwynose/HiMhv6oIoK
kc5gM1UNjWLW8/l5JUD3/IRrpq8TcqvzMM3HFV+e0cCFjcpwQGM6ZOppsKvJ
eVD+3xiaEryUovUlsVRjBWaFjqH8ZmM2N/MCVm98jUftH9JME2dmrvEfZx/d
xBYclqIOPxfB/IoJ5KLqIfjUuIWPmnMW3NPKmIlFNyvRtWSJp9L4hQuPsp/B
PK5cI8Xsd6exVxe30VurOHxwTh5XXzoBPzucQEZ+I2xMiccpW8Owf3McbA6s
hBOXs6Db7yQfEJAFep0T+Tu1d8je/YLgunQ7GmsGwHNpN6447A526p6Flp36
mHFVnBojjmCFTgNvNW4+1npl8gMFWrCieTJtebIfV4wvwCWXxXHGFm/MH96H
l+QewMqCmXB0n4C5tq9gh+o7+f1K8fyRKwfwYsks9kFWmWXnRfMjpk6iC291
2CPrI6C64N8tDBrQiU5feJRyhC5+0ue6tBNo9KS/YLC8FlLRRaC13AnXXHBl
66PPs6PTFEnhVzIZto2kGR2n4M7Ki6AgWYyeVcMEYYtSuFyfVfRsqT0pWX5C
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
                    "], "Biases" -> 
                   RawArray[
                    "Real32",{-0.003890459192916751, -0.009899696335196495, 
                    0.011075889691710472`, 0.012002960778772831`, 
                    0.0005898661911487579, 
                    0.022760450839996338`, -0.0017692804103717208`, 
                    0.005867197178304195, 0.0043998039327561855`, 
                    0.014974010176956654`, -0.011614223010838032`, \
-0.003612771863117814, 0.0018114635022357106`, 0.006100725848227739, 
                    0.024660823866724968`, 
                    0.0019417561125010252`, -0.00084365822840482, 
                    0.005112693179398775, -0.004272230435162783, 
                    0.0022969264537096024`, -0.014299198053777218`, 
                    0.002154908375814557, 
                    0.004296044819056988, -0.006315417587757111, 
                    0.0054327878169715405`, -0.0015854031080380082`, \
-0.012183688580989838`, -0.007415319327265024, -0.003730680327862501, \
-0.007657618261873722, 
                    0.005530729424208403, -0.006119224708527327, \
-0.006294914521276951, 
                    0.0025990866124629974`, -0.02020091935992241, \
-0.010795877315104008`, -0.005420763976871967, -0.008827952668070793, \
-0.006055284757167101, -0.0057368408888578415`, -0.004129256121814251, \
-0.0034777687396854162`, 0.002275161212310195, 
                    0.008353485725820065, -0.004834156017750502, \
-0.0074602095410227776`, 0.008196385577321053, 
                    0.0021919775754213333`, -0.009609933942556381, 
                    0.01513321977108717}]|>, 
                 "Parameters" -> <|
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "10" -> <|
                "Type" -> "Elementwise", "Arrays" -> <||>, 
                 "Parameters" -> <|
                  "Function" -> 
                   NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "11" -> <|
                "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
+jl3EdLKh4L26mzhq3Qz/B82+hvl
                    "], "Biases" -> 
                   RawArray[
                    "Real32",{-0.009307891130447388, -0.010295778512954712`, \
-0.020732589066028595`, -0.013359702192246914`, 
                    0.0020933884661644697`, -0.009114128537476063, 
                    0.00702575733885169, -0.03471606224775314, \
-0.001055296859703958, -0.0015444025630131364`, -0.006065328139811754, 
                    0.0008057019440457225, 
                    0.006259543355554342, -0.03326950967311859, 
                    0.013674905523657799`, -0.002381682861596346, 
                    0.01283654011785984, -0.013366002589464188`, \
-0.0031081652268767357`, 0.006257378030568361, 
                    0.010249562561511993`, -0.0012249996652826667`, \
-0.011047985404729843`, -0.008879889734089375, -0.006087625399231911, 
                    0.006269737612456083, 
                    0.006964119151234627, -0.0128671545535326, \
-0.010994422249495983`, -0.0005347082042135298, 0.0031243343837559223`, 
                    0.01187820453196764, -0.0052745952270925045`, 
                    0.014310749247670174`, -0.0017243404872715473`, \
-0.00924238283187151, -0.018464185297489166`, -0.00623256666585803, \
-0.0028044525533914566`, -0.003753631142899394, 
                    0.0010286940960213542`, -0.005507062654942274, 
                    0.01283167488873005, 0.0029130084440112114`, 
                    0.007418884430080652, -0.005398102104663849, \
-0.0023388261906802654`, 0.0010039197513833642`, 0.017699776217341423`, 
                    0.003882001154124737}]|>, 
                 "Parameters" -> <|
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "12" -> <|
                "Type" -> "Elementwise", "Arrays" -> <||>, 
                 "Parameters" -> <|
                  "Function" -> 
                   NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "13" -> <|
                "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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

                    "], "Biases" -> 
                   RawArray["Real32",{
                    0.008605330251157284, -0.013563851825892925`, \
-0.010247569531202316`, 0.0077054682187736034`, 
                    0.00989424716681242, -0.02047424204647541, 
                    0.0025077015161514282`, -0.004346033558249474, \
-0.005007414612919092, 
                    0.013156643137335777`, -0.014213476330041885`, \
-0.02974701300263405, 0.004919057246297598, 
                    0.005460901185870171, -0.013274638913571835`, \
-0.00980954710394144, -0.0002228411176474765, -0.007731318008154631, 
                    
                    0.006746198050677776, -0.014977846294641495`, \
-0.006894973572343588, 
                    0.002596050500869751, -0.007050016894936562, \
-0.007096574641764164, 0.0008390707662329078, -0.013392195105552673`, 
                    0.004832372069358826, -0.007933628745377064, \
-0.0018833448411896825`, -0.003652469953522086, -0.002458451082929969, 
                    0.004565519746392965, -0.006077323574572802, 
                    0.004803829360753298, 
                    0.005920048803091049, -0.03271349519491196, 
                    0.006789540871977806, -0.0055248248390853405`, 
                    0.003520538564771414, -0.0011972173815593123`, 
                    0.003071031766012311, 0.003139632288366556, 
                    0.017375683411955833`, -0.0033819302916526794`, 
                    0.006370672956109047, 
                    0.004703974816948175, -0.007177188992500305, \
-0.004041415173560381, -0.011589898727834225`, -0.006907782983034849}]|>, 
                 "Parameters" -> <|
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "14" -> <|
                "Type" -> "Elementwise", "Arrays" -> <||>, 
                 "Parameters" -> <|
                  "Function" -> 
                   NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "15" -> <|
                "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
Ke/hjg==
                    "], "Biases" -> 
                   RawArray[
                    "Real32",{-0.0006336949882097542, -0.0036344307009130716`,
                     0.0006130927940830588, 
                    0.0022091176360845566`, -0.005063506308943033, \
-0.023275991901755333`, -0.0014721878105774522`, -0.01004006341099739, \
-0.011116872541606426`, 0.0010409848764538765`, 
                    0.003875535214319825, -0.003946042153984308, \
-0.002830029930919409, -0.007085997611284256, 
                    0.002824218478053808, -0.00820755772292614, \
-0.0004634876095224172, -0.0035649628844112158`, -0.007489099632948637, \
-0.0045754872262477875`, 0.0035229730419814587`, -0.008536048233509064, 
                    0.0047198752872645855`, -0.01001805905252695, \
-0.010288627818226814`, -0.005234026350080967, -0.0064338194206357, \
-0.004237765911966562, -0.0018292965833097696`, 
                    0.007385347504168749, -0.0066727809607982635`, \
-0.0013747266493737698`, -0.004189292434602976, -0.005138010252267122, \
-0.005556740332394838, -0.010280081070959568`, -0.0006718160584568977, \
-0.002747728256508708, 0.002193993655964732, -0.002315705409273505, 
                    0.0014361236244440079`, -0.0051640672609210014`, 
                    0.001792451017536223, -0.009429221041500568, \
-0.006163599900901318, 0.00030756607884541154`, -0.0035621679853647947`, 
                    0.002510549034923315, 
                    0.0020478488877415657`, -0.013989239931106567`}]|>, 
                 "Parameters" -> <|
                  "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                   "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "16" -> <|
                "Type" -> "Elementwise", "Arrays" -> <||>, 
                 "Parameters" -> <|
                  "Function" -> 
                   NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
               "17" -> <|
                "Type" -> "Linear", 
                 "Arrays" -> <|
                  "Weights" -> 
                   RawArray[
                    "Real32",{{-0.013634650968015194`, -0.10313615202903748`, 
                    0.045605313032865524`, -0.09101683646440506, 
                    0.11689754575490952`, 0.10403399169445038`, 
                    0.050191204994916916`, -0.1290348321199417, 
                    0.1029035821557045, -0.26533690094947815`, \
-0.010752696543931961`, -0.06381276994943619, 0.05459394305944443, 
                    0.0908244326710701, 0.004103268962353468, 
                    0.06316772848367691, 0.07258658111095428, 
                    0.0908803716301918, 
                    0.09701042622327805, -0.10368365049362183`, \
-0.1389431357383728, -0.0021193011198192835`, 0.10442284494638443`, 
                    0.0949895903468132, -0.08022850006818771, \
-0.07051189988851547, 0.15945148468017578`, 0.08642613887786865, 
                    0.11687086522579193`, 
                    0.22529108822345734`, -0.19818003475666046`, \
-0.1927887350320816, -0.01008946169167757, 0.2750571370124817, 
                    0.1598864644765854, -0.1606169044971466, \
-0.17477458715438843`, -0.10940900444984436`, -0.10037269443273544`, \
-0.07840756326913834, -0.05113198235630989, -0.0465751551091671, \
-0.0627509355545044, -0.10523460805416107`, 0.11102096736431122`, 
                    0.1367153823375702, 
                    0.05152688920497894, -0.09076007455587387, \
-0.07642100751399994, -0.04319033399224281}}], "Biases" -> 
                   RawArray["Real32",{-0.0007615134818479419}]|>, 
                 "Parameters" -> <|
                  "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
                   50, "$InputDimensions" -> {50}|>, 
                 "Inputs" -> <|
                  "Input" -> 
                   NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                 "Outputs" -> <|
                  "Output" -> 
                   NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "16", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "17", "Outputs", "Output"]}, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
             "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Outputs", "LogStd"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Mean"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"]}|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 3.210468, "MeanInputsPerSecond" -> 
        4360.734945808523|>, "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3f4f5)" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5)" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Mean" -> {-0.0812613174801503, -0.11663060452178584`, \
-0.07748450547430653, -0.09780138648281839, 0.19723469688244114`}, 
             "StandardDeviation" -> {1.0676099376867996`, 0.890189106027844, 
              0.9884952360559629, 1.0008109855781255`, 0.886800952000408}, 
             "Output" -> <|
              "(f1f2f3f4f5)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 2283713745384451654|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>, "Key" -> 
             "(f1f2f3f4f5)", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "FeatureNumber" -> 5, 
      "DistributionData" -> {NormalDistribution, Automatic}, "Calibrator" -> 
      None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 8, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 17800, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|"Value" -> None, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Predict, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 
      4.127093226053854, "PreprocessingTime" -> 0.251263`5.851673534301465, 
      "LossName" -> "StandardDeviation", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[8.212578737341302, 2.891301425403568], "StandardDeviation" -> 
         Around[64.43283545804485, 18.239050621373703`], "EvaluationTime" -> 
         0.010540925533894597`, "TestSize" -> 3, "ModelMemory" -> 167112, 
         "ModelUtility" -> -5.150234236667144, "TrainingSize" -> 14, 
         "TrainingTime" -> 3.1622776601683795`, "TrainingMemory" -> 743696, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[8.212578737341302, 2.0444588443571936`]}, 
         "StandardDeviationHistory" -> {
           Around[64.43283545804485, 12.896956376778057`]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           8, "NumberOfParameters" -> 17800, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> None, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 17800|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[8.212578737341302, 2.891301425403568], 
              "StandardDeviation" -> 
              Around[64.43283545804485, 18.239050621373703`], 
              "EvaluationTime" -> 0.010540925533894597`, "TestSize" -> 3, 
              "ModelMemory" -> 167112, "ModelUtility" -> -5.150234236667144, 
              "TrainingSize" -> 14, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 743696, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[8.212578737341302, 2.0444588443571936`]}, 
              "StandardDeviationHistory" -> {
                Around[64.43283545804485, 12.896956376778057`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.010540925533894597`, "ModelMemory" -> 
             167112, "StandardDeviation" -> 
             Around[64.43283545804485, 18.239050621373703`], "TrainingMemory" -> 
             743696, "TrainingTime" -> 3.6998648623970043`|>, "Index" -> 
           1|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 7800|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           2|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 17800|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           3|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 2800|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           4|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 7800|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           5|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 2800|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           6|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 6], <||>], "MaxTrainingSize" -> 17, 
      "PreprocessorEvaluationTime" -> 3.58984375*^-6, "PreprocessorMemory" -> 
      76920, "InputDimension" -> 5, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.877102485820874`16.341082270290514*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 14, "TimeBudgets" -> 2.5237090947142975`, 
          "ElapsedTimes" -> 3.594288, "ExperimentCounts" -> 1|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, "ID" -> 
           2873047750387000173|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, "ID" -> 
           1314440341876764847|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, "ID" -> 
           2051880494423027750|>, 
         "f4" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, "ID" -> 
           1203773393871153081|>, 
         "f5" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, "ID" -> 
           145883235305585233|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 3.893275, 
      "MaxTrainingMemory" -> 959712, "DataMemory" -> 4120, "FunctionMemory" -> 
      352912, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 11, 10, 20, 54, 45.841026`8.413829306202118}, 
        "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.87712736240327*^9, 3.877127369810527*^9}, {
  3.877127660955585*^9, 3.877127685886579*^9}},
 CellLabel->
  "Out[357]=",ExpressionUUID->"9294710f-607f-4167-aae8-8d170219d080"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "5", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LinearRegression\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "5", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], 
                   Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LinearRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["17", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[<|
   "ExampleNumber" -> 17, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical"|>, 
           "f2" -> <|"Type" -> "Numerical"|>, 
           "f3" -> <|"Type" -> "Numerical"|>, 
           "f4" -> <|"Type" -> "Numerical"|>, 
           "f5" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 5|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5)" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 17, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7100669430970155518|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {649.5294117647059, 16.41176470588235, 
                    50.411764705882355`, 64.70588235294117, 
                    37.470588235294116`}, 
                    "StandardDeviation" -> {40.86292386397267, 
                    6.562449538444979, 9.311970938966981, 7.176470588235281, 
                    10.13507391109661}, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4772792621860920984|>]}, 
                   "Invertibility" -> "Perfect", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{
                   0.3294464620128585, -0.24670478291864095`}, {
                   0.5266978779192711, -0.20091067530452414`}, {
                   0.6075928250009178, -0.38220632047567493`}, \
{-0.31353029417700407`, -0.6809418760462183}, {0.3828630142795621, 
                   0.5375947736621413}}, 
                  "Precisions" -> {0.5140556558990445, 0.863155175120625}, 
                  "NoisePrecision" -> 1.5886875059025845`, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157116188`, \
-0.0018584586044933286`, -0.00024375769149080384`, 8.562084148579801*^-6, 
                    0.00021587557870743752`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7856623779326335863|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "Key" -> "(f1f2f3f4f5)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 2, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157115991`, \
-0.001858458604493322, -0.00024375769149081688`, 8.562084148556943*^-6, 
                    0.00021587557870744406`}, 
                    "StandardDeviation" -> {0.9973443489182671, 
                    1.0001052004380495`, 1.000282671403912, 
                    0.9982239732130878, 1.0001417047326489`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 5, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1764544953284831100|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                   "Mean" -> {-0.0013497098157115991`, -0.001858458604493322, \
-0.00024375769149081688`, 8.562084148556943*^-6, 0.00021587557870744406`}, 
                   "StandardDeviation" -> {0.9973443489182671, 
                    1.0001052004380495`, 1.000282671403912, 
                    0.9982239732130878, 1.0001417047326489`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 5, 
                   "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   1764544953284831100|>], "InputDimension" -> 0, 
                "OutputDimension" -> 5, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, 
                    "ID" -> 4922843929423532927|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, 
                    "ID" -> 365386638938414886|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, 
                    "ID" -> 8084762059231395715|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, 
                    "ID" -> 717539068447703646|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, 
                    "ID" -> 3403397587327662634|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.129596, "MaxTrainingMemory" -> 192968, 
                  "DataMemory" -> 6400, "FunctionMemory" -> 51568, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 11, 10, 20, 54, 46.011235`8.41543886705018}, 
                    "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-4.406902047628646, -4.406902047628646, \
-4.168656228344961, -4.127362310486287, -3.8790302555384786`, \
-3.8157144014569915`, -3.7752140087029566`, -3.538288180712346, \
-3.4944058955364734`, -3.4490724744232923`, -3.432924033093133}, 
                   "LeftBoundary" -> -4.168656228344961, "LeftScale" -> 
                   0.11912290964184223`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[19.043784917961784`, 0.5368425024100205], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 5966421770916112094|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4f5)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1020916197684206682|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Mean" -> {649.5294117647059, 16.41176470588235, 
              50.411764705882355`, 64.70588235294117, 37.470588235294116`}, 
             "StandardDeviation" -> {40.86292386397267, 6.562449538444979, 
              9.311970938966981, 7.176470588235281, 10.13507391109661}, 
             "Output" -> <|
              "(f1f2f3f4f5)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 2859614146361296001|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 1892463177288152845|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {186.5176470588235}, 
             "StandardDeviation" -> {61.9974481950585}, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 5696177821155824089|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>,
              "Version" -> {13.1, 0}, "ID" -> 5443556393657702637|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Numerical", "Weight" -> 1|>, "Key" -> "f1",
              "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
             "Missing" -> "Allowed"|>]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
      "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (186.5176470588235 + 
       61.9974481950585 #& ), 
      "ProcessorFunction" -> (-3.008472969274401 + 0.016129696126423874` #& ),
       "Name" -> "value", 
      "Quantiles" -> {-1.4258271853496902`, 2.7177304525673383`}, "Mean" -> 
      186.51764705882354`|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 
    0, "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "MeanFunction" -> 
      LinearLayer[<|
        "Type" -> "Linear", 
         "Arrays" -> <|
          "Weights" -> 
           RawArray["Real32",{{
             0.0001022566357278265, -0.000029769986213068478`, \
-4.256757620169083*^-6, -5.452260666061193*^-6, 0.000017828686395660043`}}], 
           "Biases" -> RawArray["Real32",{2.742919529220611*^-16}]|>, 
         "Parameters" -> <|
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 5, 
           "$InputDimensions" -> {5}|>, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "DistributionData" -> {NormalDistribution, 1.243077490388852}, 
      "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3f4f5)" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5)" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Mean" -> {0.0015238368206923285`, 
              0.0001960125331606793, -0.003053086958476699, 
              0.0003484793101807369, -0.0017051122868508132`}, 
             "StandardDeviation" -> {0.999579510982794, 0.9973638566085912, 
              1.0002751161218724`, 0.9997172300055037, 1.0009988024737557`}, 
             "Output" -> <|
              "(f1f2f3f4f5)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 598096601813410430|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>, "Key" -> 
             "(f1f2f3f4f5)", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
      "LinearRegression", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> 100000., "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> "NormalEquation", "Options" -> <||>|>, 
        MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Predict, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 
      4.127093226053854, "PreprocessingTime" -> 0.285607`5.90731384094226, 
      "LossName" -> "StandardDeviation", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[5.545772961414833, 0.060480592063955174`], 
         "StandardDeviation" -> Around[58.78047698301086, 7.789540791684971], 
         "EvaluationTime" -> 0.000610371555321924, "TestSize" -> 12, 
         "ModelMemory" -> 15488., "ModelUtility" -> -4.793121644845749, 
         "TrainingSize" -> 14, "TrainingTime" -> 0.007289798786266461, 
         "TrainingMemory" -> 73008., "ExperimentCount" -> 4, 
         "MeanCrossEntropyHistory" -> {
           Around[5.542983344995577, 0.11239757473183765`], 
           Around[5.50966671240032, 0.10653285506897352`], 
           Around[5.551854439441349, 0.12343335235780473`], 
           Around[5.578587348822083, 0.13307851591148315`]}, 
         "StandardDeviationHistory" -> {
           Around[58.99547026541086, 13.151832462077266`], 
           Around[51.020741836078734`, 15.72731542197369], 
           Around[60.23165460944468, 14.938595357984449`], 
           Around[64.87404122110915, 14.457898745223057`]}, 
         "Configuration" -> {
          "LinearRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           100000., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 17|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 4], 
          TypeSystem`Vector[TypeSystem`AnyType, 4], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 100000.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.545772961414833, 0.060480592063955174`], 
              "StandardDeviation" -> 
              Around[58.78047698301086, 7.789540791684971], "EvaluationTime" -> 
              0.000610371555321924, "TestSize" -> 12, "ModelMemory" -> 15488.,
               "ModelUtility" -> -4.793121644845749, "TrainingSize" -> 14, 
              "TrainingTime" -> 0.007289798786266461, "TrainingMemory" -> 
              73008., "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                Around[5.542983344995577, 0.11239757473183765`], 
                Around[5.50966671240032, 0.10653285506897352`], 
                Around[5.551854439441349, 0.12343335235780473`], 
                Around[5.578587348822083, 0.13307851591148315`]}, 
              "StandardDeviationHistory" -> {
                Around[58.99547026541086, 13.151832462077266`], 
                Around[51.020741836078734`, 15.72731542197369], 
                Around[60.23165460944468, 14.938595357984449`], 
                Around[64.87404122110915, 14.457898745223057`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000610371555321924, "ModelMemory" -> 15488.,
              "StandardDeviation" -> 
             Around[58.78047698301086, 7.789540791684971], "TrainingMemory" -> 
             73008., "TrainingTime" -> 0.00852906457993176|>, "Index" -> 
           1|>, <|"Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.01|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.761444548940688, 0.28851435171801093`], 
              "StandardDeviation" -> 
              Around[72.78383707914007, 14.742706427725231`], 
              "EvaluationTime" -> 0.000562495157696018, "TestSize" -> 9, 
              "ModelMemory" -> 15488., "ModelUtility" -> -5.020358914730533, 
              "TrainingSize" -> 14, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 72900., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[5.534717558068659, 0.16921119591922218`], 
                Around[6.282267582921669, 0.6418679997359864], 
                Around[5.467348505831736, 0.18537386851378437`]}, 
              "StandardDeviationHistory" -> {
                Around[64.18104494711723, 13.255549543309627`], 
                Around[95.06127341741073, 23.000519709698143`], 
                Around[59.109192872892265`, 17.171270669186253`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000562495157696018, "ModelMemory" -> 15488.,
              "StandardDeviation" -> 
             Around[72.78383707914007, 14.742706427725231`], "TrainingMemory" -> 
             72900., "TrainingTime" -> 0.007382200930418258|>, "Index" -> 
           2|>, <|"Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.00001|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.762213073936855, 0.2891908756145487], 
              "StandardDeviation" -> 
              Around[72.81229258816217, 14.76442112532492], "EvaluationTime" -> 
              0.000562495157696018, "TestSize" -> 9, "ModelMemory" -> 15488., 
              "ModelUtility" -> -5.02079190454368, "TrainingSize" -> 14, 
              "TrainingTime" -> 0.006718000670412151, "TrainingMemory" -> 
              73032., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                Around[5.534682922478275, 0.16927824477692485`], 
                Around[6.284479207170306, 0.6436115123807173], 
                Around[5.467477092161981, 0.18547361733290976`]}, 
              "StandardDeviationHistory" -> {
                Around[64.17884816653434, 13.260083028702061`], 
                Around[95.13867833805087, 23.043382803327937`], 
                Around[59.11935125990129, 17.1757078335859]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000562495157696018, "ModelMemory" -> 15488.,
              "StandardDeviation" -> 
             Around[72.81229258816217, 14.76442112532492], "TrainingMemory" -> 
             73032., "TrainingTime" -> 0.007860060784382217|>, "Index" -> 
           3|>, <|"Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.755563731549198, 0.18980549387942885`], 
              "StandardDeviation" -> 
              Around[73.29785803350558, 11.12566529112454], "EvaluationTime" -> 
              0.0005556556723208886, "TestSize" -> 12, "ModelMemory" -> 
              15488., "ModelUtility" -> -5.017590247083016, "TrainingSize" -> 
              14, "TrainingTime" -> 0.006636315225290107, "TrainingMemory" -> 
              73035.2, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                Around[5.537018835452896, 0.162857584923597], 
                Around[6.082550758596856, 0.49237622361394645`], 
                Around[5.460532768414772, 0.17520207393443116`], 
                Around[5.942152563732269, 0.616728779125768]}, 
              "StandardDeviationHistory" -> {
                Around[64.342053390633, 12.905678991735893`], 
                Around[88.31834443982007, 19.599927716359378`], 
                Around[58.47860980099668, 16.678389530697014`], 
                Around[82.05242450257255, 26.88458118417234]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005556556723208886, "ModelMemory" -> 
             15488., "StandardDeviation" -> 
             Around[73.29785803350558, 11.12566529112454], "TrainingMemory" -> 
             73035.2, "TrainingTime" -> 0.007764488813589425|>, "Index" -> 
           4|>, <|"Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 100.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.52704752920782, 0.059833333436540785`], 
              "StandardDeviation" -> 
              Around[59.06307435441815, 7.1277709070352655`], 
              "EvaluationTime" -> 0.0005556556723208886, "TestSize" -> 12, 
              "ModelMemory" -> 15488., "ModelUtility" -> -4.795608508697825, 
              "TrainingSize" -> 14, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 73097.6, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[5.531514416788595, 0.11645358574404258`], 
                Around[5.494124840785624, 0.1088831297755258], 
                Around[5.535454201843598, 0.12152542072185327`], 
                Around[5.547096657413462, 0.12483529941674258`]}, 
              "StandardDeviationHistory" -> {
                Around[60.13420798295833, 12.973819118386215`], 
                Around[52.8969016822823, 14.7623356585785], 
                Around[60.14538357694005, 13.948029801011218`], 
                Around[63.07580417549193, 12.887058680571473`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005556556723208886, "ModelMemory" -> 
             15488., "StandardDeviation" -> 
             Around[59.06307435441815, 7.1277709070352655`], "TrainingMemory" -> 
             73097.6, "TrainingTime" -> 0.007382200930418258|>, "Index" -> 
           5|>, <|"Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.0001|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.762206151614397, 0.28918477557449224`], 
              "StandardDeviation" -> 
              Around[72.81203627080747, 14.764225053841171`], 
              "EvaluationTime" -> 0.000562495157696018, "TestSize" -> 9, 
              "ModelMemory" -> 15488., "ModelUtility" -> -5.020788003909638, 
              "TrainingSize" -> 14, "TrainingTime" -> 0.006718000670412151, 
              "TrainingMemory" -> 73034., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[5.534683249753409, 0.1692776444683391], 
                Around[6.284459271315347, 0.643595780574491], 
                Around[5.467475933774436, 0.1854727235442694]}, 
              "StandardDeviationHistory" -> {
                Around[64.1788689040908, 13.260042036424538`], 
                Around[95.13798004273157, 23.04299550738775], 
                Around[59.119259865600014`, 17.175668039506018`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000562495157696018, "ModelMemory" -> 15488.,
              "StandardDeviation" -> 
             Around[72.81203627080747, 14.764225053841171`], "TrainingMemory" -> 
             73034., "TrainingTime" -> 0.007860060784382217|>, "Index" -> 
           6|>, <|"Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1.*^6|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.545795103598917, 0.06048169504948894], 
              "StandardDeviation" -> 
              Around[58.780381496412176`, 7.790319220786534], 
              "EvaluationTime" -> 0.0006174552215907863, "TestSize" -> 12, 
              "ModelMemory" -> 15488., "ModelUtility" -> -4.793122649622534, 
              "TrainingSize" -> 14, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 73040., "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[5.542997781911346, 0.11239398949153957`], 
                Around[5.509685521772135, 0.1065309092188283], 
                Around[5.551872364079654, 0.12343499929930912`], 
                Around[5.578624746632535, 0.13308921629493362`]}, 
              "StandardDeviationHistory" -> {
                Around[58.994284804719925`, 13.15201486589744], 
                Around[51.01900798760274, 15.728315521454363`], 
                Around[60.231653911012614`, 14.939724030257922`], 
                Around[64.87657928231343, 14.459903245463327`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006174552215907863, "ModelMemory" -> 
             15488., "StandardDeviation" -> 
             Around[58.780381496412176`, 7.790319220786534], "TrainingMemory" -> 
             73040., "TrainingTime" -> 0.007382200930418258|>, "Index" -> 
           7|>, <|"Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.828874730655696, 0.2309158294220318], 
              "StandardDeviation" -> 
              Around[75.93805452584338, 12.453011937371743`], 
              "EvaluationTime" -> 0.0005900972800902686, "TestSize" -> 12, 
              "ModelMemory" -> 15488., "ModelUtility" -> -5.055342536277571, 
              "TrainingSize" -> 14, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 71264., "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[5.534682903229695, 0.16927830708545105`], 
                Around[6.284481196998263, 0.6436130829374975], 
                Around[5.467477209369381, 0.18547370723997095`], 
                Around[6.028857613025443, 0.6841911689155443]}, 
              "StandardDeviationHistory" -> {
                Around[64.17884694687201, 13.260087015896893`], 
                Around[95.13874803652833, 23.043421474021667`], 
                Around[59.11936050719379, 17.17571181577855], 
                Around[85.3152626127794, 28.34197665472279]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005900972800902686, "ModelMemory" -> 
             15488., "StandardDeviation" -> 
             Around[75.93805452584338, 12.453011937371743`], "TrainingMemory" -> 
             71264., "TrainingTime" -> 0.007382200930418258|>, "Index" -> 
           8|>, <|"Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.001|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.762136864206496, 0.2891238075392723], 
              "StandardDeviation" -> 
              Around[72.80946847902437, 14.76226682696847], "EvaluationTime" -> 
              0.0005966925845716652, "TestSize" -> 9, "ModelMemory" -> 15488.,
               "ModelUtility" -> -5.020748976540439, "TrainingSize" -> 14, 
              "TrainingTime" -> 0.006718000670412151, "TrainingMemory" -> 
              72956., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                Around[5.534686370015957, 0.16927160321192455`], 
                Around[6.284259946812004, 0.6434385442562445], 
                Around[5.467464275791524, 0.18546374111869726`]}, 
              "StandardDeviationHistory" -> {
                Around[64.17906663655944, 13.259632749513159`], 
                Around[95.13099884411103, 23.039125723974024`], 
                Around[59.11833995640268, 17.175268845380003`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005966925845716652, "ModelMemory" -> 
             15488., "StandardDeviation" -> 
             Around[72.80946847902437, 14.76226682696847], "TrainingMemory" -> 
             72956., "TrainingTime" -> 0.007860060784382217|>, "Index" -> 
           9|>, <|"Value" -> "LinearRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.1|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.754576052418996, 0.28244900256016603`], 
              "StandardDeviation" -> 
              Around[72.53176000661027, 14.54946533403942], "EvaluationTime" -> 
              0.000562495157696018, "TestSize" -> 9, "ModelMemory" -> 15488., 
              "ModelUtility" -> -5.01651267676352, "TrainingSize" -> 14, 
              "TrainingTime" -> 0.007534855121632593, "TrainingMemory" -> 
              72988., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                Around[5.535018969362517, 0.16860673913559598`], 
                Around[6.262446890652057, 0.6263541347291746], 
                Around[5.466262297242416, 0.18446678648849757`]}, 
              "StandardDeviationHistory" -> {
                Around[64.20035014985204, 13.215745834665299`], 
                Around[94.37271094267881, 22.623610560216054`], 
                Around[59.02221892729996, 17.13053783734946]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000562495157696018, "ModelMemory" -> 15488.,
              "StandardDeviation" -> 
             Around[72.53176000661027, 14.54946533403942], "TrainingMemory" -> 
             72988., "TrainingTime" -> 0.008815780492310134|>, "Index" -> 
           10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["LinearRegression"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 17, 
      "PreprocessorEvaluationTime" -> 4.34375*^-6, "PreprocessorMemory" -> 
      76920, "InputDimension" -> 5, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.877102486191059`16.341082270331977*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 14, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.39938000000000007`, "ExperimentCounts" -> 35|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, "ID" -> 
           2873047750387000173|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, "ID" -> 
           1314440341876764847|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, "ID" -> 
           2051880494423027750|>, 
         "f4" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, "ID" -> 
           1203773393871153081|>, 
         "f5" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, "ID" -> 
           145883235305585233|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 0.784037, 
      "MaxTrainingMemory" -> 473896, "DataMemory" -> 4120, "FunctionMemory" -> 
      215464, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 11, 10, 20, 54, 46.660674`8.421525984375092}, 
        "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.87712736240327*^9, 3.877127369810527*^9}, {
  3.877127660955585*^9, 3.877127686680541*^9}},
 CellLabel->
  "Out[358]=",ExpressionUUID->"331d8430-1d48-4422-8115-bea7d22954ee"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"p2m", "=", 
    RowBox[{"PredictorMeasurements", "[", 
     RowBox[{"p2", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"665", ",", "1", ",", "30", ",", "62", ",", "25"}], "}"}], 
         "\[Rule]", "219.17`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"770", ",", "8", ",", "44", ",", "52", ",", "30"}], "}"}], 
         "\[Rule]", "231.6`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"700", ",", "14", ",", "35", ",", "54", ",", "29"}], "}"}], 
         "\[Rule]", "214.42`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"810", ",", "10", ",", "34", ",", "65", ",", "28"}], "}"}], 
         "\[Rule]", "229.23`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"722", ",", "9", ",", "49", ",", "55", ",", "37"}], "}"}], 
         "\[Rule]", "181.47`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"761", ",", "4", ",", "39", ",", "50", ",", "40"}], "}"}], 
         "\[Rule]", "187.52`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"794", ",", "5", ",", "31", ",", "42", ",", "33"}], "}"}], 
         "\[Rule]", "232.97`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"710", ",", "17", ",", "36", ",", "46", ",", "29"}], "}"}], 
         "\[Rule]", "184.39`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"742", ",", "4", ",", "40", ",", "61", ",", "15"}], "}"}], 
         "\[Rule]", "199.15`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "4", ",", "34", ",", "61", ",", "27"}], "}"}], 
         "\[Rule]", "164.26`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"715", ",", "8", ",", "43", ",", "54", ",", "23"}], "}"}], 
         "\[Rule]", "157.23`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"713", ",", "10", ",", "53", ",", "67", ",", "53"}], "}"}], 
         "\[Rule]", "153.67`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"601", ",", "16", ",", "53", ",", "62", ",", "32"}], "}"}], 
         "\[Rule]", "171.93`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"664", ",", "24", ",", "61", ",", "63", ",", "45"}], "}"}], 
         "\[Rule]", "152.04`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"624", ",", "11", ",", "34", ",", "64", ",", "42"}], "}"}], 
         "\[Rule]", "172.67`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"665", ",", "1", ",", "30", ",", "62", ",", "25"}], "}"}], 
         "\[Rule]", "219.17`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"770", ",", "8", ",", "44", ",", "52", ",", "30"}], "}"}], 
         "\[Rule]", "231.6`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"700", ",", "14", ",", "35", ",", "54", ",", "29"}], "}"}], 
         "\[Rule]", "214.42`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"728", ",", "12", ",", "60", ",", "65", ",", "34"}], "}"}], 
         "\[Rule]", "155.61`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"624", ",", "11", ",", "34", ",", "64", ",", "42"}], "}"}], 
         "\[Rule]", "172.67`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"737", ",", "24", ",", "47", ",", "59", ",", "31"}], "}"}], 
         "\[Rule]", "335.28`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"638", ",", "25", ",", "50", ",", "58", ",", "46"}], "}"}], 
         "\[Rule]", "275.08`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"620", ",", "19", ",", "69", ",", "58", ",", "54"}], "}"}], 
         "\[Rule]", "222.78`"}]}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"q2m2", "=", 
    RowBox[{"PredictorMeasurements", "[", 
     RowBox[{"q2", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"665", ",", "1", ",", "30", ",", "62", ",", "25"}], "}"}], 
         "\[Rule]", "219.17`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"770", ",", "8", ",", "44", ",", "52", ",", "30"}], "}"}], 
         "\[Rule]", "231.6`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"700", ",", "14", ",", "35", ",", "54", ",", "29"}], "}"}], 
         "\[Rule]", "214.42`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"810", ",", "10", ",", "34", ",", "65", ",", "28"}], "}"}], 
         "\[Rule]", "229.23`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"722", ",", "9", ",", "49", ",", "55", ",", "37"}], "}"}], 
         "\[Rule]", "181.47`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"761", ",", "4", ",", "39", ",", "50", ",", "40"}], "}"}], 
         "\[Rule]", "187.52`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"794", ",", "5", ",", "31", ",", "42", ",", "33"}], "}"}], 
         "\[Rule]", "232.97`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"710", ",", "17", ",", "36", ",", "46", ",", "29"}], "}"}], 
         "\[Rule]", "184.39`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"742", ",", "4", ",", "40", ",", "61", ",", "15"}], "}"}], 
         "\[Rule]", "199.15`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "4", ",", "34", ",", "61", ",", "27"}], "}"}], 
         "\[Rule]", "164.26`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"715", ",", "8", ",", "43", ",", "54", ",", "23"}], "}"}], 
         "\[Rule]", "157.23`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"713", ",", "10", ",", "53", ",", "67", ",", "53"}], "}"}], 
         "\[Rule]", "153.67`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"601", ",", "16", ",", "53", ",", "62", ",", "32"}], "}"}], 
         "\[Rule]", "171.93`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"664", ",", "24", ",", "61", ",", "63", ",", "45"}], "}"}], 
         "\[Rule]", "152.04`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"624", ",", "11", ",", "34", ",", "64", ",", "42"}], "}"}], 
         "\[Rule]", "172.67`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"665", ",", "1", ",", "30", ",", "62", ",", "25"}], "}"}], 
         "\[Rule]", "219.17`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"770", ",", "8", ",", "44", ",", "52", ",", "30"}], "}"}], 
         "\[Rule]", "231.6`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"700", ",", "14", ",", "35", ",", "54", ",", "29"}], "}"}], 
         "\[Rule]", "214.42`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"728", ",", "12", ",", "60", ",", "65", ",", "34"}], "}"}], 
         "\[Rule]", "155.61`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"624", ",", "11", ",", "34", ",", "64", ",", "42"}], "}"}], 
         "\[Rule]", "172.67`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"737", ",", "24", ",", "47", ",", "59", ",", "31"}], "}"}], 
         "\[Rule]", "335.28`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"638", ",", "25", ",", "50", ",", "58", ",", "46"}], "}"}], 
         "\[Rule]", "275.08`"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"620", ",", "19", ",", "69", ",", "58", ",", "54"}], "}"}], 
         "\[Rule]", "222.78`"}]}], "}"}]}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.877127433568925*^9, 3.877127561116373*^9}, {
  3.8771276881332417`*^9, 3.877127724638174*^9}},
 CellLabel->
  "In[363]:=",ExpressionUUID->"4550a008-7dd9-4e88-a038-4790ce143e6f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Information", "[", "p2", "]"}], ",", 
   RowBox[{"Information", "[", "q2", "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.8771277052974997`*^9, 
  3.8771277072479897`*^9}},ExpressionUUID->"4f87f671-b305-46cb-a728-\
608a03cb3839"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Predictor information\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Data type"], 
                    TextCell["Data type"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{
                    InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "5", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                    "RowDefault"],
                   TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]],
                  Annotation[#, 
                   
                   Short[{"Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Standard deviation"], 
                    TextCell["Standard deviation"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"64.4328354580448490196`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "18.2390506213737033647`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "27.9547342152974422902`3.", "\", \"", 
                    "100.9109367007922628545`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    27.9547342152974422902`3., ", ", 
                    100.9109367007922628545`3., "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Method"], 
                    TextCell["Method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   
                   InterpretationBox[Cell[
                    "NeuralNetwork",ExpressionUUID->
                    "dcb14edf-f02e-48ed-baa8-7d92550a795b"],
                    TextCell["NeuralNetwork"]],
                   StyleBox[
                    TagBox[
                    
                    GridBox[{{"\"NetworkDepth\"", "8"}, {
                    "MaxTrainingRounds", "1000"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                    "Verdana", StripOnInput -> False]],
                  Annotation[#, 
                   Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                   "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"2.67`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"51.`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"8.2125787373413015047`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "2.8913014254035678263`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "2.429975886534165852`3.", "\", \"", 
                    "13.9951815881484371573`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 2.429975886534165852`3.,
                     ", ", 13.9951815881484371573`3., "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Model memory"], 
                    TextCell["Model memory"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"355.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Training examples used"], 
                    TextCell["Training examples used"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 TemplateBox[{
                  "17", "\"examples\"", "examples", "\"Examples\""},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Training time"], 
                    TextCell["Training time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"4.07`", "\"s\"", "seconds", "\"Seconds\""},
                  "Quantity"]}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    MachineLearning`MLInformationObject[
     PredictorFunction[<|
      "ExampleNumber" -> 17, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Numerical"|>, 
              "f4" -> <|"Type" -> "Numerical"|>, 
              "f5" -> <|"Type" -> "Numerical"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 5|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5)" -> <|
               "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 17, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7100669430970155518|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {649.5294117647059, 16.41176470588235, 
                    50.411764705882355`, 64.70588235294117, 
                    37.470588235294116`}, 
                    "StandardDeviation" -> {40.86292386397267, 
                    6.562449538444979, 9.311970938966981, 7.176470588235281, 
                    10.13507391109661}, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4772792621860920984|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{
                    0.3294464620128585, -0.24670478291864095`}, {
                    0.5266978779192711, -0.20091067530452414`}, {
                    0.6075928250009178, -0.38220632047567493`}, \
{-0.31353029417700407`, -0.6809418760462183}, {0.3828630142795621, 
                    0.5375947736621413}}, 
                    "Precisions" -> {0.5140556558990445, 0.863155175120625}, 
                    "NoisePrecision" -> 1.5886875059025845`, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157116188`, \
-0.0018584586044933286`, -0.00024375769149080384`, 8.562084148579801*^-6, 
                    0.00021587557870743752`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7856623779326335863|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "Key" -> "(f1f2f3f4f5)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 2, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157115991`, \
-0.001858458604493322, -0.00024375769149081688`, 8.562084148556943*^-6, 
                    0.00021587557870744406`}, 
                    "StandardDeviation" -> {0.9973443489182671, 
                    1.0001052004380495`, 1.000282671403912, 
                    0.9982239732130878, 1.0001417047326489`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 5, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1764544953284831100|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157115991`, \
-0.001858458604493322, -0.00024375769149081688`, 8.562084148556943*^-6, 
                    0.00021587557870744406`}, 
                    "StandardDeviation" -> {0.9973443489182671, 
                    1.0001052004380495`, 1.000282671403912, 
                    0.9982239732130878, 1.0001417047326489`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 5, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1764544953284831100|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 5, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, 
                    "ID" -> 4922843929423532927|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, 
                    "ID" -> 365386638938414886|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, 
                    "ID" -> 8084762059231395715|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, 
                    "ID" -> 717539068447703646|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, 
                    "ID" -> 3403397587327662634|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.09762, "MaxTrainingMemory" -> 193176, 
                    "DataMemory" -> 6400, "FunctionMemory" -> 51568, 
                    "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 11, 10, 20, 49, 25.822304`8.164569972008364}, 
                    "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}|>,
                    "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-4.406902047628646, -4.406902047628646, \
-4.168656228344961, -4.127362310486287, -3.8790302555384786`, \
-3.8157144014569915`, -3.7752140087029566`, -3.538288180712346, \
-3.4944058955364734`, -3.4490724744232923`, -3.432924033093133}, 
                    "LeftBoundary" -> -4.168656228344961, "LeftScale" -> 
                    0.11912290964184223`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[19.043784917961784`, 0.5368425024100205], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 5966421770916112094|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4f5)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 1020916197684206682|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                "Mean" -> {649.5294117647059, 16.41176470588235, 
                 50.411764705882355`, 64.70588235294117, 37.470588235294116`},
                 "StandardDeviation" -> {40.86292386397267, 6.562449538444979,
                  9.311970938966981, 7.176470588235281, 10.13507391109661}, 
                "Output" -> <|
                 "(f1f2f3f4f5)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 2859614146361296001|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Numerical"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 1892463177288152845|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {186.5176470588235}, 
                "StandardDeviation" -> {61.9974481950585}, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 5696177821155824089|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 5443556393657702637|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "Numerical", "Weight" -> 1|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
         "InverseProcessorFunction" -> (186.5176470588235 + 
          61.9974481950585 #& ), 
         "ProcessorFunction" -> (-3.008472969274401 + 
          0.016129696126423874` #& ), "Name" -> "value", 
         "Quantiles" -> {-1.4258271853496902`, 2.7177304525673383`}, "Mean" -> 
         186.51764705882354`|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 
       0, "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "Method" -> "NeuralNetwork", "Network" -> 
         NetGraph[<|
           "Type" -> "Graph", 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Mean" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
              "LogStd" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>,
             "Nodes" -> <|
             "2" -> <|"Type" -> "NetArray", 
                "Arrays" -> <|
                 "Array" -> RawArray["Real32",{-1.349244475364685}]|>, 
                "Parameters" -> <|
                 "Dimensions" -> 
                  NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                  "$ArrayDimensions" -> {1}|>, "Inputs" -> <||>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>|>, 
              "1" -> <|"Type" -> "Chain", 
                "Nodes" -> <|
                 "1" -> <|
                   "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1:eJwVkX001Xccx6+nPF0it1keargpD62Op7nc7+dbHvLQHKFmq84p8tCK5inV
MSLSJI5RCUdWNyq3stCR7v19vo3rIOYpcbGOhXXGYnZttLZp+uP1Pud13n++
rCK/Co1R5/F4yTorExpxckdSUsTpsFXvJToiztkp7v3ptILWCpK2JLSVXJQH
d7mwwrCPaV9ZKV1zby0z1VBj6UnFJGi7G5E5e7KU0w7i8J9ukrLVncBrVaDx
6G6usWMGtjVvwO2yepKXcIqLChZxyoEzsGoimckPJcsqb3PYrOzHtI9e4+Tb
/ZAdZg8zGWEY6c6jT+7vI8ZhlbBQJ6DjzQasdzkT9fN12ZJlMkSWNYg7H4hR
uKMVAmLjyNfxvfjc/xUYuZeQ8fZqFHVfxkJhEHoddQDB4hiX9nKWpG76EAZy
1CHVy49m8Io4/2EXGK05AyOJ2eIvbwTDhiUfqshNBCO3YiisyQFDS19492MX
PjxuIw6pl5JL9WforjvFsnwrB6x6bslcJ7SYUHcvvg1Rcncr4slvaiq8D9ny
zFEBK947Qp5WlRBRVQkXbeGP5beqiJAYgd7Uf+Rg9Tw+fJeH0/e0aZUglkZ6
6zJ/O1faoJ4FMTM8Njd/EtjUEGe6ToGDY+bk6SdDUHvjHLOO2ExLAwzoz752
yKrWyRMDbkLWFB+/TWgE41M6WLKVT+szvZlpvj0Xb6VBg+uauU7PA5B8cRGj
Qw1p3eQSuHmLWArhc5LzndyeAREO/jAL6f3lODeqQ5tc7Sj7Ro6hUmP617wC
bevc5R2H7bF49nNILXOER6ousiUnhvb5eaMsYx96iJ6hchpQ4FkMVi0NOOnj
BJXtofSfN8OgqHAkW+VHOG1bRzbwnYQV1Fmw3BZTGH5lBl6utyD/QC/G9ijJ
LvNW/F2lDb+eOAhlRuo4EjiGHmFNRM3NAIy9+EwmNaG/2Efj1Xg+FL1uxAtC
Q9op5dGdlzSp+moLurEb8XhIFDTr6TOV0VoqidrIBPufibN0hOJ+m2BQxfWR
rD/ssMnRj9PaPA25CfHixWUT6tJWywVaKuD65esk+zMt6un9KVdp7YkaMypZ
j/M1HDqbIxc2FXC+EWrMozQfDXuroSboMLpHb2DXivTAW/8oWfPCnIiS78rU
aq3pvPkT/KKuDEzae0l4qEq+s+8ImT32p0x7WEiFdwpg5I0U85YvQJF+5WOR
gyYtYS5Q/rKFBF7xAbPwNu5BvwL/5p/n9uxeT1fv7+Uy0xeIzff2TKIQMo+p
Qxibkk+Uj66SNC0+bTWuIGeDMtB6nMnpbe6x9EUHLOv+K04bLyCb3NajMrcf
1sZV08WCJs5wzo41tXdzW3LN6QfHNJFaDIJEeoK1X9GBibyelX6asunGbWC2
YEj/B4tc5wg=
                    "], "Biases" -> 
                    RawArray["Real32",{-0.006046982016414404, 
                    0.01094768289476633, -0.01573706977069378, 
                    0.0047432659193873405`, -0.004794590640813112, \
-0.00441701477393508, 0.007639972493052483, 
                    0.01084557082504034, -0.005566687323153019, \
-0.0013205497525632381`, 0.014802632853388786`, -0.006487568374723196, 
                    0.009240119718015194, 
                    0.0021974407136440277`, -0.00760944839566946, 
                    0.006094099022448063, -0.0016266591846942902`, \
-0.005242404527962208, -0.012635694816708565`, -0.009575792588293552, 
                    0.012568864971399307`, 
                    0.005971658509224653, -0.009663637727499008, 
                    0.006410474423319101, -0.005092632491141558, 
                    0.0028124761302024126`, 0.005427641794085503, 
                    0.003340229857712984, -0.010113236494362354`, 
                    0.004436654504388571, 0.0058419788256287575`, 
                    0.018462566658854485`, -0.003280350472778082, \
-0.010081307962536812`, -0.0029648032505065203`, -0.00011102357530035079`, 
                    0.0069335815496742725`, 0.013816557824611664`, 
                    0.009950462728738785, 0.022978467866778374`, 
                    0.007311551366001368, 
                    0.0021261130459606647`, -0.022344592958688736`, \
-0.008314860984683037, -0.00019943434745073318`, -0.008403168991208076, 
                    0.0012194984592497349`, 0.003228035755455494, 
                    0.004011283162981272, 0.01198896486312151}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 5, "$InputDimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "2" -> <|
                   "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "3" -> <|
                   "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1:eJwtl2k01u/zgInsyRqRLCGUUpbk+cwkoaJoL6VFO9U3aV8RoSJrQhsVSqVU
Up7PDBXtoWgTaZdo0SZK/v3O+b+455z7zJkX82Jmrst0/spJi7vJyMisVvoX
JgWsHxkSErBxssL/PosCltsPXf6/5ND/f76xv+jGHhUuGO+O6u8N6aRYJuz8
a8u3wpJo29ka3lizFDUEWxwl8adFp3zhslE/7PX9rQRyDPFB9HbsL7ccLGP/
kFNMiHBnXQKFeQzle2+ahJ/HDsDH0g+0vaUbz5jxWirrGUODtKdheOEu2LV3
LLvZymKLfRn9Tq+ADV+2YZiGIi+XtWGZvScAeutwlGMqG5dEc5yZNiW+1uC5
a9IxW10W5u61YF07AYw0zbn25AhcNdSMk08uoDlvD/KKiEqhMn+pOOC/Dvrt
3SgWvjbnnKXJHB8ti7td0rGnXADEGKUKgQqOkKo6BH+eW0hdZ+Tpx/o2sWN0
FXXLKRZsD+6B6nEAFd9leclOXV5pdBUOq/wgazs7zBpaR2MWWnC6ex79TCwX
a9+volxxD95XahROT+uD1RAPswrWcO40Z8E2qAdWWNqLP57Fk0+xFs3KnkFu
JnoYvcEWPyfugqbJr0jZdDnfMlLiR9kz8MDCJHg3fyT0iy8UOxzayXWlLpgc
PAaeJsVS4aOJYKVzHcoH3qOx3d/CrfSLdE+qD0dOuPAh/Zv09eZ6PvdkHYWH
PhdvPoqmNca7IXTeQvxcYcJ928aRddgl6lK8QzdWefDGbW2Cze8oOqC5keeW
tEFf35m05NMeGrRNwsPyQYwfPUDcZopkc/+qkFdaSH7ivz6SAXNn11DM0Dg+
vfc7eV/VAIM/6nx18nDu2jpcnOHkh9t2q4p/L8Wydu043ujkxTQ7jfDjcNg4
q5P0Fw/l65vkMfdvE8W2ukDYlEYQV8rzjJem3GHhThOaV2CTRR5kOnQK8rpf
qUXTRBBhESZ//gHeloq8isbwxx/zsGL/YcqO9sQvXqcg87kIsVsVxSy/wfy5
PhtNtxZQfV6skD2sJ1Y+PiV4foulcQrxwu7bMynbjuDFoUPwaUoFueq7S3Zd
O8iRgfdp692pILn312WuSzUFfmOhRKG/EPNiDq6Zfh3YYTZeVOsPERdjyUZi
xIMSm0BbcTkMtlsmHM3ShqeRNZSnYErdZcy4ZsgeftTQlxqzxsOUick094Aq
9Rlgz8b+HuT2wQqqH6uiga8cFV9phboKAyH82xVyCwyAqpkBFN41G9bnaIu2
/Q8Vf/jak4PcM2B4ZiTsPq3Dn8ZoY7yfAgqjW2DbETl0G6ApxBdd5OAFV0XQ
0QHvxu7cNMqM33g9oM73O3CKXwfMr5kBg2RRXLdsCAQarAan4ef421N5jFu9
HyafVsfo0d8Ejba5lBvQm/yOrGKDlQnwZ2RTcX/nATh1lCE92vSBDvsaQZFz
T1y0ZTqJ/oZ0Ve0kFNcaY3NoJE18cBlUbu6CwK2NlL5jLGtlJkNFSQ+M9plN
+7Miacskfb5edo8GKEtFjaJ44UnUfpquIYsXVueiGBFAA/ZqgbxxDOfGfxUb
TS/y9k+p9LsmClb/sBYOrVrB0auGUTcTPXpVfopu9L5L1UdfCOKG46TaeBxS
hiZRVG266Cm5IHEL+wuh0w4I4FEM5vl/6G/DEUj/Uyd6Fq4mScIRoXXJWdG5
KwlGLz/FyheMScWlPz7u043fjrsK9as+CPhTF07nGGFNgCd7pMeAwoq5uOqL
EZ8eOhTYKRLbj3pRQedvsbZiJSwJvCluXCPLdU0r+dpEHypafxDilYrpzuoE
1Oi9gxreOBOa7KQV3leBrY2FN/suUeyEBvr2YB60N1yi/RrXIfN9HoVvuQnN
/dRQddlLAacsg12Hl0D91E7oOhspRNqsZceZdyD7Px1Mtb8KHX6XSaYlT0xr
sMfS5JeCpUsq1I5xQYlmjahkmYWTat6BV6/DdPKwDMo9mYwD/jrT4fn1lLvK
nm/1NuBuEy7CzkJnPFUpi6N6vhc9Q52p9+V4nsyrYb3iXt6XFII5azfhWqXu
7HRyH+2fMAle1Q9BV3NFNLLagksU7krjpvmTi7a5eGl6MaWd80S3H3b8gvZT
+K9omjVulGhzo0IoSL8NaTONKGWqKPk2Zw4NqEnA0La7tHTULJ47KBUsXUpo
6cJyUHtBoOR9CTL6IaQVOEPK/gzofWcRXB48gG8dMcHgj+f4opYXLT8rC8n6
WdL+/rF006KOTurJoWZzMg/vUIadejKctW355RWVX2imdJcwcOIIHNlWR8e/
JAmqt2Nxyvc4+DL0u3R70GnsOF8jfprtjXOGIGvO/iNEXkkWHcOCWcH6Ax1q
/Qm2dSFwbOYyjG9ukHbr6U8LNFNZ3qCWlNX3wolXfbnx9E5alraEXb8O5N5v
upPesDR4+WskacadwNqgHXBRIU0Y/UWdi1JG8KjgCngfupuae9hDutZumPIq
n7UOp4vfB2ZCjKYPhj00xIHGpRB+fwi7V52lms4K6VuVPjis13Est/lDFmZ7
cNIVb1x1L0YyaEk89Zh1F6as1yLZJ+Pwu70WfdTS4CfTlPDJ1mzyC8jmmesG
8pFwibCz/DBkGjjwnsfXIOZ9vOh3aT322X+fFEPMeOrLsbzA9C0I/+puhZfC
4z3KNO3BQsF2jDGviVXAcDdZUN02XTjyE/hm8QwhQ3JHuK8eimmWZYK5UbQY
sdgSrtd/Fzy3h2Dz7GVoVtBMOW/7Y8xUde6d35NszI+JUR/d8fbgZ+LKk5O4
7bIm6jvfByE6HPtv3YLhF13h071j4PjQEnKey3GiEClYl9hQZrkC/zII4bsT
dIUtNrZsd2cEt/nfEN72ECjg7VpR3sCffzZX0xzFQ9xvbAR2JgyghF6Pofc1
F36o9gf+SIvxy3gNPthjK7fPniOJNvOA7ybhxd33D6QHHj8lJ//ThTZhkHRl
4QTu0fmalHpdgv1uB3nomlTR+X0rPXzakwN+e1N/20uCl8coOF4qy9uux3BM
1VlBZuwO0WrFQdinc4CjdzvzdZ886ltnhHemPCDl3+F4f0QqedRaCE5vksn7
ha+YeLYGhj41IBdlUZBpj6QFp70l1vOB6xeqUXJMDPMte5YMWYiVZUtp72ZN
PHPBgHsq7sLxP+ShrnOs0PVuCbkfGQ2HLP+S75NMqoj3hCPjU3H+n0Fi6Ns+
eCFumBi05x7Ev0Eevuo0qOetoaNJcpy9YxIZ6nmy79Jn0PXcWYiv0sS48fpY
nTcaN840x+PTd5Gzmg8vnf2OFX8EgP3keXz83WOa3nIEHDWSICLdHD0Ouwub
Y7Jh3o8SarU7ABJJgTB+63x43L8nLN59i49MOQ6VuZ9I36kDPih5gsUFewwK
7oebDTvAt2W2VLRVRptXCUJKexSqFHbAI70IevL3ltD44hetVr8vyKeU0bCH
LaBzNRKWfZ2MkjnTeZ/OQXi9aZS4bZGWYPhaEf5MPCZ8Km9k+czufOH0KTp4
ZjnHT+8gufUTQTU4EpYaZUHOsTSKjAokkrPl/v+lQLysBf4aKki6R4exWsZK
/v1yOfa6OwwH65hhs6czRt/WwcoZUTRhYztN7z+N7hgr0Z3rMlAWlyWOHBMO
R9oe06CIXnwDa//xiTwNGH1ZPPhzA6dOqOYhVk7ipROqaJZpzE9X6vGa80vQ
44cm7ttsg4dji2je7XPkoPwOnt1QES025oBaVN6/Wfw4vGlhBmVXrGPD1bt4
nNFCwfJ4JLkUe/Gm2EFcfUuXPqxaAY/MqrF15me2OqTG/fqcoE1L7IRzrVJY
3dUFrB2II5M+ivpagejhNB8vrGqGm2vsuMJNFpfXWQl6y0wxaHk1vVPw4KAb
40XzWdeFAZv/A/MrWXxjyBvacPMBGf4APBMWRQtb/MFhWzGd9PFkjaf6YFl7
ElojtfnT8L+gEqXLKSu90OLXfbjiWSnU3MkgpTHzIdRPkT/3CqazrXuwzOOK
0NP5kmD/QQBV9oSYBRJp/qa7cP9FkbQ1vIR3OKhiWbYduOU8F2aOXSz4lH2k
VcNqKXjVL7Aeug/a326mZ29CaJOXG/ideAjS+4PROHUeBHVtEBbY7sT8rnXI
1TZ4UuLCtgN7co3pGhoy/htt+m8GHL0xkI4WptMghbP4LVSdl+yuoe2v3HCI
3VDy8pFDk/mmXLKqEOSea5CC1jvx/fwArN8UKNmvro7uzzIwt6lAnNgggbUj
XWCBZCt+vLMG2wfXgVebG4bEboJHct484Z2Ep/3aBSMCWsmdWsV3hU6gPr+C
Bm8axKeVjkFl0GVIcUM8pZpPTuenkmPuPiqdpY1FPhl8cUEZab2dws/aUOhy
iiYjiypab6yEp8YlCue3dEMss+dNKrIU6KSN2QcThy+bqEc60dZgNblCVEj9
xUvPz0Q2iJI0PJkmLl3rwR9uHxQG+kigvasXLonJhBnlB8SSVG3aYLJdapSm
Ih5N/kRt6qMJIoLpuXAQkzK7KFrhBOu2GPKWK2p4fOh9evbbmMOc9wlF494K
vdqSyILT+LDsOvKZewWcwkRyyO/L3n8yBOU1M6l0eAM0X+zGrUb3hP/U9UlF
7qm0JW0y98uMorZVVrjjXQm9z66nkCsdLvZuX2mF5wn2zm4g35nqPP60IRXZ
hQufUxYJd1x2UcnXE1AyYCeFWJeRaT9PDOxmhNfrLFGv8wVtTG8h0xudZDhv
KRQVrcDdqfr42moM7Z4bzAEaEcXxoj5U3A6HaUnD0L1xIThdtccJw3vTvPLj
wqA/ltz0/CoUbtyIQbmvINfVHIc7LYSq1JX4+KQKxt3cxkqapXC9fI44edY5
uKZoAQsNLDFnagEcGREvZkjqKDqQqYdOIs700SbtGbOpMiARRuYfIKuKu+Dp
ayCGGL6FEavfwmm/WfxqnAUfqPgl9NlSC0b/do76uU1cekKZf2oMwXNR/8Sh
/0j8uz1IxBoSOgLG0KuM/aQUtxy/BRNtGXdTVFq6QHjwZTs/ubWUUh9PkQSP
TqBCD19ck+cEkoFTOcHclXL9J5D0uCsfXa8m3lTZgE/b7RGCl7LX6kv0wSsB
t7w/Qy3DjsLMNdYSRU930PALZLPou2Q44ijXlNTB8RgHLnhhiYf63BaOPhkA
Df9cOFinFJakjeS+tSocZGPIV5+chqlRsaCg3wz5eEPINPwivv7VF2X7l8Ph
qd4os38iNGpW0I6Dhi7DZ4ZDpJcCL887J3XLTRJ0/ksX/ONGind6/REamv7d
7co4+H5zPM/5d2sCYpTYr28QupYPAMdT5rjmSjr71GyjPx/niPpfUmnexnVg
lllEv0aoiUcjg1FzWAYovrDgzWOV6dUhd+w6KMcutkGsbNeXB+e/FcRL6yCg
0JbnrPfn8xa9oajLGx5/lMf8jT1QY+se+LVVHRq8GYqHN9HgZZ6M2t5CU+sJ
YdjQxfTS/gc5j14OEyq+E/5pcFmxvY6a5afw9LfNtKzTkdIfWwp5XWfh+qxk
dM02FRv1DLDSXcLF5wyg6VuZ8GpCHD5b/oR2qkjwS1s9BaXMYt15xvTpZ18e
57oTS4Z3wZK/e+lHZ45YPfIYmnzsPiL37Hf8tXKJuH97mrDn73Aan+5D739H
8LUsI7ylPweXFS2H3crx5F33kuSGGcI9fC/Ipx7nyNuL2CTUFIKMu9F7W2PM
mBYAjw1DoWLrLgpUfuri1TWJ+2luhuYLf6hsqhPsm0BgtVcdDz8ZykPWnxM7
LzvgwqY8OrLpncTvkxGUhS+kvCO9ec5IS3rS7InXNjrQqE3eFNd8jX00CsD4
jR/2H6IDhYuC6HzDLHZpHQZFpjI8eng/TFiri+FyaSS4+qOkZAiojFjPMovG
UFuWBZ+6WUQrW05zsaoGPs6sl66useaoUbP5ZEof1Pf/QDvSpvPKZ8q4vtmA
8tQ2COfnqHHFs1TJIZVnxWOPAE/6tBL9+o4HtUGvXByq9bF0zhOodT1KiioX
hFmH4uGHlwn8+JIAkX6PIb25lOJ8Y7HXlnBYOcYPeq+8A31zb6D1qjnUy+KL
8PftZ3LWSqM+OrZ0asU+0tylIjG9dBZaNO9SrK01Cz2601ylArq9fgE7ZO+g
CwndeUH1NunOMDXYfXKXkJCzkDRGuLCMtR1uviyATqwOtN4KEYv85+LkFe1k
PD2H+8tul/wqG4Qpo3TwxAZPmF3aDfXtLRiHDsM+M23QNaMTBhQup1/S+xCR
exJmmiDLxzyiCwMjaX/2STpVUE8Rfd2hofGVxNL0AXm15ArT9FNhzOCT4LRC
ky+YvpaWNknoxDsl3tXtxD/f/wSVyY9ATt6NPs2OhGgXD8EvQhX9x7+hRlk1
ps0zIahJnQK69cC3/3x1xRkLGJgajFqdifhLayVnLX4Fe5aHSDMrLsKLPrHw
okwD1I5OIYUhPWnyhW5Q/CcD+qSsxxff4/mmuw3fGl9G6/YOgAsl5VRkdpT2
vq+kkIgjsKU5FFevksdzvt3RdIw/F319KsgkWwqFoXn00DARJj22AtM5QAfO
+7JeuLMgnnHjLU6K4s7r4ZKqip48Xj6Q80Praa1TKGWH/KUhexPQcd5yHnoo
0yVt4QJK0UymBvNPtMIxCe6e3gRTHJqgIyCOzm26If6Os0IZUz2c5KAI5yKT
2Tp+H3/piiEDUMPHvsXiBQrDrSdSSN/RGmVtGsQJtQ5o3q6CvyrWQX52Fbh+
nyIq+M7h6YNyoHKjMriN+0hx7lukZxV0YNPDWTyoaCN+KfXCJvuB3DwmChp5
Db6ufC986nsLr9l2l6yttQDPj29EmePm8GirJp8YbIQVFYEYMFILLtovgDle
b6CfEsC1C4N5+4wHNKWHhHs5BIlDHjpx0oWpQsTMF5Br0J8SrqynipAzVHPe
BKSBNyCw1Q7GLLUlp3LVfxx/AX4WydMVyyyh/HgEPB54V7j//AXsmmPGR4rt
+Vf8DJqQcQ2vrisS52YUwfyrPlA6QYcDVrqjcetyiW5glXTwvIE8YNMy8Jkc
Vpx71Y942VgeusceG9a+pJ6ixogsvRfkM22KNHxLFVu/H8EFoxwo3DaCDudu
5d2RteT6274wzeMrxNUWUe7rd9KJ1SMwS7VVHKmgKhWPX6cPa4uh4pahkNuz
jmw71HjxswCpVv1nUps3QrQpiqL+C3ug+Mgd45SLaL/5KUhZYipO84qAfncH
gndvTfiwVR0fnhwF5R+USj6O6MUDCzc7F5cdgJnRRfgy9BtMGtRAXj99oGKy
Fi6fvw5mbPDkcWMKwFZhPeuvDqGLdXIw8XsGFl4Lh37DeqJJ6yNh1LIn4vnA
kVy4T572TNBnh6uz2LtWGzzWTWD1bSrsNlodXxhmQmC3OaAaaUPV2iux/p4D
3z82knIgindwEpfpvXDxSrSDptepPCi4Fy5aNIrWfDTinFlG3JsuCwnz5YS8
iV9ho3OUZLnCZFaJS6TRX9Nh+fiRdMDupPRAa7eSkcbpENheDXq7PpFOqDfX
/1BCSfBDyg6+5HKofAIG5j8T96abCsYfprNYrMCrJw9Ec7tmuPZRj6KhhO5Z
GtGD52thmnceWUyMwT5iBkKVP4SrlAkbzGZT8fEtMK3NgRfX/EfBGmE86msT
KScr0NSjyWT59JjgVlBIs3Y30biTyhzra8ZPnl6m57tUUTfAWXT5XEqaTQro
lWzKSltfCaPvxeKV5L7oY22Gq/s9hl/ZV+jJcx1hWsoZCr08GvW7z6eOsrN0
zr4e3Pp6U1KyPt98PoM9JA7suvozCXevwPoRKvy8ZCY5BeawpC6ND/FgUtNv
Ei0nGmL/hq1sY9Wbf//jq9SH2mLL8dV06lgOeMvtFouXKZP39MN0tk93PPF3
KmdsSOR2aSuUhryj0nVhlBlLouiuzGbrOiDppxl5OtRTkssGvLjdTvgcvpMm
fj4G19Ju06nATazY+RmezbPi1nXHuaaIQWv4UXiVsR1/PBnCxxJMod1wK2UH
7YecJSZsfz2bDN+cxA4PC1Z/8J9wc8lvwJPBaG9ZB1HTU7jZrA6XFMqjvt1x
nO7xmz6vTef2cTtZSD5HaxNjKXtTHi253Qw5TTF4OmQi601zhW/vzfj2dAcc
1scNOoM6pYq+2pzyWA5DxpdTQdwjkktAbp1xW/ix9ia9eKlHVa6a2M3tr0tw
YDPZ/vN5xeoOuDBqKTx1m4RvPdP4YsxUfJcaA3+duuPGramY7QUY9n0tbdR7
AGWrZFGc0ZdriydJhJKq4iEfigTjBXIY9/IcvOgZh8KGEtAeMwit+h3A0bLD
2GrtRHwSlwc3+yZQXYoNbg5qh4T+fWFZy1dx8P7XcEnlKhiPBur4tYnzrRej
E4/CqqBYLA0dLJ2tK4VFIRLM80ij+QFHxTkRO+HXmaticI0JK59WhHgw5vPz
NGH5MVPUHyYHH/dkgj55wI/oyzRe/qLYMqgfKCxNhAO3a8DBtp0Sc81pb/Uo
+qC/Gya0xYkbM//x4dNIvhNrAR3XrCHfwpJGbHkIaV6JbL7oLyn0sOfNncrY
fvogH4lbhgXmJym8ZwFe3uCK/iNfg3F+d8zxe0GVJyPg0eujsPT3flTcW0+L
rYr4skci3zI7B2KWFkX0ChRkfsyAzycPoFuTLOoU2XH43lU8epSvmJQ0BKxP
6rFd4VTuLWmmnAF3YXO3lXjVIIg/FZyhPWH36FaUMe3fNRKz/tjgkRuzWG6L
IReWH+RnZ0KxPaVT/HPzDN1QPAKBNl/onWMIbt11gLwEI3wyfRQO+uYI8run
0POdWZDsnAvGsnPguf8Z+rCHaErwRpC89sC/PUzgXYKT0NGmhCGu+bRG7S5t
c/V0mVplx286tPhn+FW4uNifLW4b4vkmVb6erI7vNb6RQbA6+g9JYGn2VTog
FwH1qZXwx0MLindp4PakSDZXPcQmk6PwU89S+O2eINbZlRB+WYNPJJvBMbWT
Huhvh76P30i6cp34oaU7151eKza0zAf9ci3+8SxeZK9VHF+4AGf94y6ZOFMe
NF4V25392eXyGJxcnsn568KZsjqhdPFHIf7aHXHOq53UqKTJvg/leO/BWrIM
VeCdqxfi55fHKFtrJ+19oUzqcS8l7UuXsNrFAH7WHge3shxh/hYV/uZzHJaU
hpJ8SzrHTArE5T+ssaxXqzjlvygx/8430nPQg5Lhs1Ehyh+3PLMWE2QO4aj0
WC6c3in0sP8IvptV0Gp4Bbjp6lF+ZoIY6abL82tL+Yhddzz/6ilAbAheHPjI
xfHNBXFH7lQMGHgAJm3cDvN63JAmDt8C3HcUH5+LlL0wlad120K3suNo+L3V
0uUzV4Dp509SJzoDTjtO4/G0NPqpeYl6Xm6HvMMimXoIuPGwPmsstiWv+M08
dukVweOqSApYJ078oCHEcTbPrVtNoZcGCoMPnaOoIVckscFl9LP2DNhMdxMO
NFQJMpm/YPGA82Lr3RCyiCqH8ZFV4qGnO7lldgTkr9IQR/iOQ9M9A3np7whR
Gu/HivEm6GQbCC98G2lL0zoxzs2RCjNyQe5uJMwLccHorfvBPNKWshXNOO/4
CPaVCYJss2/kZGyJK7/0xe8N4ZC/9xQvaD4Ep4Zeh4sRZ4UQzTbx70kbbvGq
pJejUqj2aXfQLtjB++R6grxHhmA02xf7a/lBwY7popLRHrLZMIDuLLsDYc+a
hbRFqTz3mTaWf5AnOed8vheoB3edPtKZogSKW/PWZZxKgvSLSz3cn7SHj6bm
kZGLExUvSYA29TU0tOUhPEty5lW6O0iXj8HbrRk4TW0GZnwtoRMHFDklvkjy
+VgMqTV50DX/SJ5v64xnf94lbe0HMLE6FcM/ttIV3guqYaEQ/7aUDOplyczq
GN2Zdk1qnxsmPLowDD54DKbkI410R9pIWZIY0fDTWnHMiqvCuMmtlEVX4MY/
bvVL0UMXaTi11nbjT57deN78Y7hA+CO4fQiB2hPmaH7WQ3w/bxHbnHLEK7d/
UV19KN2LqqR30025XGU1D//zSPC5fAGeWwbxwsR0MWDFEj4mG44uelZS14tS
fm6sDAl7rHDHyPegIH8WZ2/TpmEvy2ncRlOevSYKXZ9WQsjVIZz1QZEbjQzZ
6aiU7huQcKVuLoyd1AfzD6ui1/c8uGU5Dp0+t7gccpBh37N7OS6URcFnA0TI
9sCOwQ2Sr5tz6UZsGC1dJo+VR6LpSx8NNH/ZJKrkFEPVc11um6HK768sgdDp
EbQWuuPzWeFi2NUiWLVlPEu9nWlE5z1QSJARhqiMhutjh3JaYwLsTfwgyCYG
8L4DqaQ33xU+VBpgr2k1sKj8KB6wcGJ/Syl4WtqQceJ7QWdGAaVLq+lx1Xna
0N5Af/8+puJn7mC94g+UL7CCCIMc1BZn8RSzDqFn/R6h553+fKW8Sur8fDhb
dtflM3LXhN/l0/C/pfdh0J8K6tF4XSwNXg3ByucljYsGcxFNpknmwXxJppBm
GETDDbdPUruQATC3vBHMHz8Si88n4a3eE7DPgL58+po7tBfLYuaWh0LbNnku
94kFp6XDifWfgrGiFfecKsvVc1qEFG8ijj8hFOywoDtaq3F3QR6UZY1EmeRC
ePHMhOsTAvFgyXje/sOf1n3eTBbfX1N62Bqh83Qf1pacpwMh1jC7UgdY/i01
OPbj1u1xNM17Oh1Mn8V/d+py8bTZ+CwzSHhuYQoPNl/gVd99MK1ZKjxw9JN4
PpwORjuPUK1lhDRnbiqqmnrwt7kZ2DLxKxlM9YQhNlbCvlkmfOr7NaGp+CwF
dXykdg89emHxhEo2zuT047potW8y7HNQE6Nv+fEP18G8994Rujr+ITk+X8Mn
Fh6DEfIv6OWaeTh00GYcPGm3uFnZkruf+g0+226ITptm8ROzU1TT9Zp8jF/C
hr61JM5oEzVuR0HUeSN+75JJDku9BadyZ3zgJBWN8j8LYYn28PbmddgWPREr
mioh6WEsJwYewQBJC4Vn52JySx49t/0gXfd9PWi5aeKIhd3w6Asr1ny/hJYl
zcH/cmshOukbrQ4cj5cux9A6DX9hoaiGVfGLOU6qi3XJeWQ7qB2ChpwQf/YZ
Cd/u1YD6hSti/3sSaJ+bBUerVLnr7AJWqPdjX53ROPLVDvhWuxhrE2y5enwZ
+O/4TdtfVdD+sFKaWKaG84oN+cKGm7TLx5jCxu6ngytmg5myO8xqKQTHLyp4
NqgSd8Zo060bb0n39mX8avEYdiTdFHY2G2AM98JDi7tT/X0TGrmnN/ebj7jw
YbPYixKFGWsT8XrPIjY5e5D2xS8l3VMm+EjXBj1L96LzgiIy+AnCWps1/NQ3
DPcKx8FXZx13/d7JJmnGlGWnywMr9IsLt26A+tYzPCCkE2IVa6Gy47ygFf2H
Jim/gTGxUWjp+Ii0Nifi2o+Toe1zCci59GEzxxZhk7oGPosbyg+qtXlBhyOP
q0gH90Xr0S9vLGHLIb6w8T18C+zF53xuQcd2E47v5yh+1R7DO3KqyF3Gmu9s
O0lnLsdw/UNDOFLig+cT+mFXuBHff24ujjPzxR+QLhQumcPV1/YL+9MCadG1
r2AxzwIXh8hjhnaDMPzXPVjv8Id+1/fC1IY9sL2zL6coHibFoDRpXXUs7Ype
CslTHZE7NKD7vQQq+PESVPP3QfaaTho6KxW/2ixES/tHlJI2BaZbjeclA+9I
Li/dR5llFnQwyZ/Pz1SAhwXWPGpqBg2er4I/uzbDvepc/tu7B+cE3ABX7TR0
rfTlnnr5oOk8m8L9VSBKLRxu2t+mxnM5EOlcSu88pBS8bxE03nniMtVCpGAv
DyG9fze+rDtQdF0oCg1qzmjjNY0Xv/tYnDqpAG7Ybxf1zI9Ctd5zl21+wAqn
emCuhTKED9Kn3g0VhAOyaSOm0Dp6QmZ7CooNFn+gO8MiifS3C37lZ3BtZSJH
e9eQT7omf2nzwHezs1A7U6TiP14oY5NEZXWW7NCtjlSex4CjfZuYUJZMs4+l
iI/mesDRpgtCrZI3y4btKb4taaLr3+Wxm7sSL2vMwA6yxlF93wu/7KzBI7Yf
rpBNFhLP3aN5W+x4u5MHDu9ZK1y/Fwr5tU7cjuU0rVAXw1Y8FVY13qIV+xLA
un8lmNrthcX1McKDru48Q14Rd9/sK30ZnUjhEVUuDW1OMM8vVXr8WAvVxuyg
krkutO+nLI5vmUlfF2uJi0PtxOjKY9K14SUkdM7lMQfus7nvK2HiAV/u6pZB
f6pe0xjZJ6JnRbXgHPOK8i6Z4Ycb9VD9NYX2lRbxXxNVnlelQ7MLyiXd9RTQ
KSGRan01YAxOITnfQVjX+o1MQgwp4l13GGB7XfB/3QlVunrgOkSdJie70aYg
F6G74Xqu7jYPX7uMQ5VSG1w+OBIDG9R5gvpeWrZmDNdflsFo7df0+0Q1jVuZ
RD4do/hn8GaM6dYHw7YCBdrYo4dmL7Gq9DDUz7QR11+JgONV2vz7li/ekDst
jQg0YX2/Vkr750dfv/rymaeJdHirJ7rOC4Rdq+7RXatm+j5xCxzaXwdaMUro
1PEI9Hcf4LDCcPANMmCdSA26kmqJ5xzH8PNHCZf/D04SHeU=
                    "], "Biases" -> 
                    RawArray["Real32",{-0.015191205777227879`, 
                    0.00992884486913681, -0.007910537533462048, 
                    0.00468669505789876, -0.00858481414616108, \
-0.003707603085786104, -0.0015921351732686162`, 
                    0.006122278980910778, -0.0007066000252962112, 
                    0.008964158594608307, 0.0018779976526275277`, 
                    0.01389048621058464, 0.0020606450270861387`, 
                    0.006666568573564291, 0.006086943671107292, 
                    0.003852485679090023, 
                    0.001534137176349759, -0.00703401118516922, \
-0.012214618735015392`, 
                    0.004385023843497038, -0.004440641961991787, \
-0.0024265428073704243`, 
                    0.00453503243625164, -0.008752086199820042, \
-0.004861998837441206, -0.012879853136837482`, -0.004502273164689541, 
                    0.002359964419156313, 0.004534502513706684, 
                    0.009017699398100376, -0.006794629152864218, 
                    0.0019111580913886428`, -0.013047679327428341`, \
-0.0019220622489228845`, 
                    0.006048730108886957, -0.0049022892490029335`, \
-0.0015169120160862803`, 0.007940838113427162, 
                    0.009368786588311195, -0.015916137024760246`, \
-0.0021480126306414604`, -0.0126749686896801, -0.009588179178535938, \
-0.004214525688439608, -0.00006005383329465985, 0.004377466160804033, 
                    0.01086745597422123, -0.011768260039389133`, 
                    0.008027357049286366, -0.011080080643296242`}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "4" -> <|
                   "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "5" -> <|
                   "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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

                    "], "Biases" -> 
                    RawArray["Real32",{0.003958416637033224, 
                    0.004005723167210817, -0.007912641391158104, 
                    0.007184411399066448, -0.00028486401424743235`, \
-0.007075212895870209, -0.0033020651899278164`, 0.003618840128183365, 
                    0.010765993036329746`, -0.0033256516326218843`, 
                    0.0009680944494903088, -0.002772249048575759, \
-0.003420497989282012, 
                    0.0017016272759065032`, -0.001040459144860506, \
-0.007172346115112305, -0.0006041122251190245, 
                    0.0037209908477962017`, -0.0031647218856960535`, 
                    0.009016493335366249, 
                    0.021091680973768234`, -0.0016538702184334397`, 
                    0.0014768631663173437`, -0.010863260366022587`, \
-0.0060304864309728146`, -0.007687366101890802, 
                    0.006995909381657839, -0.00729708606377244, 
                    0.007859603501856327, 
                    0.0004169284366071224, -0.0105108842253685, 
                    0.009919397532939911, 0.003148322692140937, 
                    0.0033018167596310377`, -0.0015713160391896963`, 
                    0.013760658912360668`, -0.006225240882486105, 
                    0.010298637673258781`, -0.006064248271286488, 
                    0.0024536754935979843`, -0.0030491393990814686`, \
-0.0008770367712713778, -0.012365905568003654`, -0.010700110346078873`, \
-0.0012887706980109215`, -0.005197481717914343, 0.0018902270821854472`, 
                    0.005515063181519508, 
                    0.004066209774464369, -0.014230777509510517`}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "6" -> <|
                   "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "7" -> <|
                   "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1:eJwtl3lUjt/XxqlEaFIpTZQGZaiE1HPvrWiQhEqZlQyZM0+FpEGliCg0SYVC
xkrPvTdlSmZpQKKIZCqkvlRev7XeP85Z66zz39lnXdfnY+Af6LlEplu3but7
/ds8F2x2WLduwVYv+f8dFi9YaT1y5f8uR/7/0hg4mk7I+lHaMyVsWugiLQ8L
Es1ur8LIX9owwFmdZwT9pR+bAyFtzGrx5ooamtxqytOv1oqvl87nSRu/QDet
n6JNnBN6TpwtvNoaTp51cvimmsSgmcMpeJQNZoX/FvsIb+HaLQNhTWc8yL08
WLSxezMYrdFGzZ0ddOP4Vzo0LRzW38kFB4tHJKOrQadSleDqjBE8sWwQXR9Z
RVvzU6Suq/uR0Vo5iLyYyG2lFWJg+AcpHF6Liw5+hCFDD+Kxxn5YvaWNZlzN
pP0fjosWhRNw3+PDPISewpHyShhjUiHa6kdLJ/SvEA+4u/OEW30wSKKOBfyF
Dhx4AOONZXCiljx45/Zhb5syepClxlcj5tOX+Gtk38uVk1tnccCXSog1aZOI
0eYY+UbCOza/pO/ROdAkvxQW3S/j/V8l6HHBHFNrw+ileSzUjB4JU0IVaIlJ
NKivfQvh9nGiZcFw8PDZhf8tc8PB9bNpGGmy4duLkPUyHdZXLBY151fBjpv7
Md8lApNzlMgqcwdkNYVi7v7LkiF2CWJESZVEbLsDmlqjMRzCOW3KFHCIrKVv
aW2knafM7/on8sfwCCHyajud+ryO7cYZwN39tULUdF/+8zcT/hi/p7urJUCG
IeDxcQXGH9tPLUN8aXmWDz6b4c7xDhvZs8Kboy9tw77XmqFNqod1gjGVflfD
HaOr6XNyCBaYBrK7ak/cOyuY72QiX3koJb9B+fT5uwr4v30kze1nS9frk8lJ
EUnjxjTR320zxTWnoZFwGbJlPaVLZ1UKoxPSWE8zCcpeTxVtuh4L5kOsse+l
j+A6bzVc1bGW+hcVUff8qXzvYwA3Deuiih9+EDK8ldSSW6R/L10SxWs6uNYj
DGsHjge791Vw/7IBWl915keHy2DLjzxh1rQJEBw6H89smc3FARZoPWYATPqv
H7qN0ce3+/Qg9fJHevWxBVpGTsGb33uBzTgv+o1+uJPlSP+6Je/YbQPX809S
3zenaViuu1AweBcHXLRiJV89/EZ1cKn/T+HnUlPubLTjvIruqN4xDpumjAar
os0woUCHFhvJULHRJfHG316o5uuJt9u6095p6VAVWkSTJmvwLt8UKpR9Sj6+
Zqzsnk/vBhrjnaXbpA41y7io20qYl/pTSE06xEuLDwpvDm8jX+UISFuiynMm
bAPH1Ul4/a4qOnSLFZ4aTKXRNQ1C46YfVHtRFocWn+A/nvo4La8BnK8lUFxo
vcTQqhvmDT9OmxybQH5LHEaL1uS18S1oe96CzJl3IMyyTDx0VAm/PRnP5qtO
knL+Go6t8Rb2P0yD+DN6vFKlS7Acd5i93aukA+MLhdjWBLbPPUgbNwwl9d5j
+atKCkzsf1xcmbwcQ//qob+xsd34Yh88YN0TbSZY8c9kcz4T40GOm8LAMH8I
HjznJs44dh7qDCO5e+A04b7fCLz27BuoKA2CDZbrEAslPMS6XHzg/5j2/zzD
Sl3j+HjGcHT8O5vP7xAxa1StGPDxALn3KYdmuzD8lC6L5v36wm69AipvXsSx
G4Jgm+ZwHtnVA3drDEUHszDB7vFTWuqvi93vXSXVKhnunbcfdBa1UqaRIvgM
viRe+9tb0CkfQDNW3EXl+Y7iYplccYXzE4gxJdHSew6/SszBvFG76P7nXE67
uRgtrevBfspJXHF+LC549gV+1n4TPuYJgq+WLe44PwDz52uzhO5BVJYUdO8Y
8MKoBDi8MlxyNy2d4saa4L0DPfFj9XaaruzGacvzcG5qLx6gFy/EPK2iI5O9
+dn1LFpo+wxmnLLHqbNkWVjRIlam7kNBfwBLvA3xlHOn6PlEkQO/9OOSOkup
oYo8V63Jo4wHyVzbeIbvROjzZt+z5KY9Ft8q/oUnsb0w8WEaLmnOhe9b8oWx
+4OhnK9xafNnUfokgZYv6M7OWEL7br4iizsDRNciRWi1rKS9prnYbdByKoN5
2Hj/kLRvlykecZoHTsNm0Bx/QNfdzoKK/h6Y5PNOsBzojWc8nXHljlxhRkge
+xcNx8Wrf9Dpk9Zk9j0GNEZpsWtDtPDtqwJ76T2iQq1kMrggwkdfW1rmEIDF
/ta886SL+PxbCq0IrYHPyaVQNkWTf1o/pc8DrcilK53PvBuFj1944q/KhVyS
e1PY1Im8ZMhhbOy6ALfHRrJdSwFMHvWDVLtJcPC1ewKSF2wZ2Ud0vNsNR7Sr
0hHdxZIbiYHoNUKLYwIj6dek/eBx4IDouHQGxxn1YcWN+2DGq3sUdKo3e0rj
+e+pb/Tkcoc4eYA2qGruhRWLntKHFkvI7JkmNHgZXyWvChHf3BVkR2tz3NQp
cDhXGxYce0K+ljNQGHEJ1V7tx9LDV8TfoaN5jYUWJq16xr2SN8K47klwZEc3
nBI7ytZmnQFqqJ0WhfG27La9F17pWQpfRgXQAV13vmXgRB2pbtLVwZHkHrCb
Z6CD+GB3Drm6VQqKGX4UqPQGBmzMpdjslfxbIwLN1puKI9SWc+WV1XD791Ze
EiBLDw5fgYFN1ZDToYWTU2J4+ZBB8HrSe3LrV0Ve+9dBvlo8+wYM4HanNGmw
zR4hM2wVfEnQwZIBhly2cA/sifSjvf5psMZgPcrcP4rb1gZhnLkuXnH8Q9vn
j+Bfw6b9+2ex4veZNuDZ8zR7fPhNF3VToabqG42J3EvTkyPoecJUlA/PoJLD
p8XJOudx645YLL5hSWsdYkC+6JZwvfEiXSoMYQ3HctjXYxcal/2hrt1XqPXd
JwjQegeTK9J4VqMzBhh7sMxWW2C0wPmpF8kNe2DLohywnl0jyCpa0GK3GA4c
N4vWNv/rL9vxeEY3nnZ3/oGbA+fhg6bN/OnOI6gyrIeY7GXiZxcvMFixB9d4
T2Y5XTdeOCRefDw9nNcE9ZCEHvxL15PNSaH+p3CmIgKbVS/BixNFvCjPA5SW
tNCpsqUYmlcqvtM2g6GuEXSrNZciDLdT4RRDzq1cxw0PvbiPnQ2njnoHpo03
aI5REC3wnMJ60suSsHOjwS09ksvWOQmNl+TJ3v+OeAW1Gad7U32cDI8+1kVH
/vVYYnZ/tO0TwJ9Cj9LWy4ij7y7E1nxt8HP/TQ7rUkhrni87VuyBqjfutHvt
SPYty8CvZzNYrNiC/buSSMXqKFy5aAuJJ/xQXXxAd1edh73VayXBA6/S0vy7
4ts/fXhd9Cj+tGA/nThFlJwULly2a6fU28kU8v0MXt83g5N2i3C39xo031kJ
z0yvilZWC/lPurpQ/lIBTtemYmxDJg2XfBRy33uzx62hmOlsw3k5ZznX+CGs
CNVHV78evGWUAWdeD+Pz7bNxxc4wu/rlu4TeRbfAzW86DbmjIbSM68Z6P9Zj
SUuVaGGpg9uzb4Bhtxpi+RDYMz5d7Plqp/j69UbqM2SruEw3C/NX5uCAsiKY
W6dIsvOvUMnD3jy++DTom5dDqYIH2VvsJTVaQzkf+vEc4Zx4fJ0/rh/eUHTM
JA7nZU6kvi2HYGvBIVqlvQzvjSpgd7lDtLgaUC14jLh6fV/8ccIWc6ZMx70G
j6B2Ryx8mC4rkd02TPzVbo4ZdZv43XQ1VBPPwpa4KXBzoi7nbq+D4KxWySfn
FA574ENhpTrCs55RooWhhKNeavLv1AhsNJkNZfKj2O/ld1L93CG0d1fgCA81
7FMTKCasBB5gackPAuKxSXOmKCTdowm9tpGp4kS0yDkIT5p74M/FS/nZ0r9k
ZX1IbH6vgJ0n5tPj9X3QdIQt7Y7y4PRrVTB3iDP96VNCs+7bi6bfLsOCfzST
dakvLLyWDzsuzabFW5rh1q5saFhphod8h3DOc3MaP10VvXe9h5pMaxyXaoSt
Y47wyt0h+NHDm8zlnKXV7lNQuXsZSM7qsPbZ07TQOAEuJKWB4ZaPMKepjJ4b
Z9Bb/3pQen8StNpC6ZZvCem0jmCjRH/uHt8K2dBBD+XTYHyPU+IpvE0psS+g
5x1j9kxx54E+6rTsykaSDOxNWn9/wwYNJe69Spe/tnliYoEVl1/Mxn8QSz41
72m2zzzSakqCPMsj+P5smER+cg9hyQUvGJa8k5zWDocY51zO7CdI5naLwFtG
P2DNtC14fpmzOOFCEk5KPUKBKquE+ISDGPniF30t9KOk4CYhb1AUjDTOgIU5
Z4tanhXQ+0G3oLBUHX1T/8AuiQwrSrfSzphtJL4skNYa3Kc1yYaYYbRFmOnV
IShrGPPg9pR/vXmM+ngNJYNz8mCyqUmSee4buI9M5UXWodhtcRtE66dRRMRO
qjgSwF1QBsvdRrHswlP0fX0dnb56jLyjVkF50gjuyBtCNSmeWLtGg2MWxwsJ
STvByOYQRUfEioc2WVJn5hzeX+MJMdvCuXKOg1B6Sxk7Pgzh8b2/S9WvJdGr
e3oYfuQSeK/KJApuo5dTMyHMbBqunH6MZD8Uwv0rOjRMRZnVsg8Ima7dee6F
arFP4G146ZzEi5fZ8Da3d/TVVoUDRxEoL8oUzuN0sNr6kfoP6sOrXn2nkMHW
6Pn6uCCdWwSNcXtpYGMz2dtqsPuMjTTXfDCMOXBRnHUyFn4cWgH+xxoo+Pcl
WjmhBTZ3WuMGuevQ2aAMAXkOqN+vmxic8VTYEarP/qf1We1uCr13ugxdvz/T
f9HqmFM7GH+b98YdBzOFUWbHWP1THKf1C0aVuTFw9L0LtnkkQ/RzW/Y6VQ+z
5nZAlmMieW/w5/6z79HT183SRTJZNL5/JJy8bsC5jo78yymCbjgvho93NYUs
zzzqyC7kIGdNIaj0BkU6OfC32fvh5dYD4gnriRK9a5l09oAtXniriGb9OkBJ
KwtMC2TZpU2gb3/1RbdjIeTz7gg87/+KNL1axbEDpXTv9QXKHV9Kx97vxG16
f+FzUX/sWKLEA6/lgdIdEhZ2eklXlblwpd8yTF9aCOdFd5ztFC08bkuhkF0r
4GnAdcHiXiJmWClw8FZT2z+jC+D1tyKhasNR0aotA0usZPnYmBgezPr4Kc0U
Z3frkoYoH5ME3WqjsNYx3PprANfaewCeTYKFGfvB5Gw8SOfLiTvcH8DUpATp
jFRzMjjhwwdqDCW7Sx2wx508qYL9a3o3qjc7Vdmhuv4FLNdxJJOTjXD4pxWP
qPMlX1U9+tweJiyUyqOXZBArzZKjG54elJ5vL6Q2TxBzBqnxw39eGPtdhou/
nMb7V+6A21o3YfF/z6FXXX8oe3mbtgj/Zq81A66LX0iSPA1f5yly0rqgf1z2
AP7nFyvs/yPl8gNQWDKJ7XcTdAVliTp3FsDvHncobo4BR7uuFrbc+QQ277LB
3MShSGdqOJhtOYRVlu70ue2uoHFpD6veMOTQqm+wsv9ClGk2pqV9P4CLWjCW
7AQ4aTARE7tkwSdFgU+6F9CmqQMwbOM+Mjg7XtBQVeKaz4NQEpcghpsm0PbG
ePLaNIKDT+pRtMlbafMtR3qrqwrmKuZYWmTBBdszwPOqCrwYHiU+2PFTfP/r
NNovekzPshzh+mJ5XNu7BOJVemHr4RpS3Z4IXX0uidbnvXCm+yfQWlchpuR0
kesB3X+cI8Nh//xvp0EoHNdPYYV4b8FTOh4HvV0Gy5bq0JKE4Xwory+eSNDm
ZXJlVI1BtNzNmK2XxoKulTZmWepRemkC3yzOpbX342Dkxdew3cmLvXe5YvSj
HBoRvIRrNJ+LaaXv4MQ6TZIVgbb2K4RRdWYoUzUYq1w1ySnBAM9vMgPrsTEw
9bISn+yspuWroummWSIP3C5PEaM3kJ1+nnilQxVUFgPWejIEBv6AhIJ0IUC7
HRoM3fFTw3miQz2gSj0RnqiZc+HPRFyZtxd3v7AR1R6EcenFcKEtoRFqW6J4
p4Wm+LDnKbJJ/yOd+0qT7Y9pY9HSVbxAXETOCff/dcFqvvvwHsXr+FLKzF6Y
K6PKe6t/0IsLq/hDYjJ8azFkjSfx4rChl/lAWG9OiEgH1xmxgk7VOEy//ZWK
r4Ti51EDqMFcoKbzv4TX/RXZanGp0LR7L5+ttcGsFYogF/gI8i1VuOeWw7DT
vhtuKTcXbpjL8Okl17Bdqwdi9W2InTkenk+eBPqaZ0SvkL9im68Gtvw0gUbV
sZh6MIfnvEkQqx+ni/HjTPF5xxDeZKAC423+iPuW74SjZsSB7cuh8U02uGxe
hdHSSlyunQIZa9fxy5gCOlJuyx6L3OD6i3BQq28VdvcdSjVFvXH/iTz6rbUV
F/WI4H6TFNFbN18MXDOMTxorcKiTGzmPmouqIaX0xVUGm4LG4hvqSft2Z1BP
sY76VMjiuU2efF39j1A3Pxq/Z0Zh6c+9gk2dNqVkBWDgpbl8bYIr+pmb4auP
wHJl3yF/QhoFrfwP3gtXxXspa/h3tjFdnJgDb4+nUmdzEXyY4Us6vY0h7sJl
mpumwwoNx/ntMmXUMNTATdsQ7RsGcEzcafzVUwZrVl+E1as+CLkVGmwzfS4F
1r6jQovL4lTLJKEe9sGaV2vxmde5f25tQQf29+GMkZ1woUud7U0ihTsDvFl7
2x+6uzhLWj/oMGgcKKTngfN50AkZrrzsSZsHaXDp0p4ctDqGOTtcfPkjG5aZ
TkL5MyHgsnQOV8zyx6s7FOiYrTf1vVeEL6zKJTg9A96sahCdDY7gnqU9ePdz
a+GSih1FLntMRsa9+PwSQ+qmqoWfRtSS/N1TOLfogRDgcBDyJW7sd7VW/NH7
DFCytXhx32tB76Mumu85SvrzztOrhyHstHOWREFxDzwe0iwkxfuhjmYhW5/S
FyXuMWLIxlcQ7LoAyz70IsejueA8Ygl+KmBY2/MtBagX0/J1zizfcoUmu1YJ
Vco+VDTYBwOrhrFRtIROL/0iCKsiwX7icbrQq5UCAflL92bQbFVFnaHjMfBW
pbi7ZRd4XIjF8s/vhJZtNaLPzqmkqS7HxdsuiyrNETD2bDlpFT4Rwh+P5Z1G
BiKM0sX17zzEiVkeYmHBd3jY4zgu1LbnjS4hPFsnFt43fgEl/avwX+YkWFjj
ii7mm0Ct8gLppNyl/iMjOdvdhMa8arddv7uUL46Ikzy+okIT8zvFqx/fU0an
Muo0+OHbI/MhVsWQpn2fzv8Z+tPEwL3wsLLM7k12EC+fdRquvoyD0aV1lNox
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
                    "], "Biases" -> 
                    RawArray[
                    "Real32",{-0.011454882100224495`, \
-0.0024466600734740496`, -0.0062698060646653175`, -0.006350464187562466, \
-0.01420646719634533, -0.0020564538426697254`, -0.004923837259411812, \
-0.007839137688279152, 0.0018522355239838362`, 
                    0.0033349047880619764`, -0.005911992397159338, 
                    0.007079094648361206, -0.008707951754331589, 
                    0.0037979090120643377`, -0.012772182933986187`, \
-0.005552406422793865, 0.0018411882920190692`, -0.0027217422612011433`, 
                    0.002663832390680909, -0.00036231084959581494`, \
-0.010474298149347305`, -0.010254411026835442`, -0.001265915110707283, \
-0.0027711489237844944`, -0.00960750412195921, -0.009026489220559597, \
-0.01522766798734665, 0.008727367036044598, 0.00820887926965952, 
                    0.006508607883006334, 0.013287140056490898`, 
                    0.006551782134920359, -0.014525720849633217`, 
                    0.014075977727770805`, 0.013234032317996025`, 
                    0.0066650933586061, 0.004600803833454847, 
                    0.006622860208153725, 0.0047165281139314175`, 
                    0.005374656990170479, -0.0028713305946439505`, \
-0.0045578936114907265`, 0.0027967377100139856`, 
                    0.008611409924924374, -0.010763956233859062`, \
-0.009074881672859192, -0.010235066525638103`, -0.008815506473183632, 
                    0.001875711721368134, -0.003190170507878065}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "8" -> <|
                   "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "9" -> <|
                   "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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
+0eJrZG+L2TFt7l9xh2otPSt0N/aCHtCAsDcJwV3VZzlqqM1uODNKtyGmzbU
2ffDruiCGdvWHUW/rwdS3S9b5qYyierlvOHoTUeQkq0kVfn5bJR/LN+bew9e
Z1QL7+8mzvKnL6V/t6LIiz048nMK7JcbYTt26BjPndNkivpAHk8UmdryzWzv
Rwl21HYQHm6PhR+zb+GhDAGzf+bL+k9H8ravfIWjDsbQzGMJuODhN9i1sQFO
6N6iJbvi4KeHOTOvkWCibn54KHEYffUSZQ4KCmxqWTsnn30Do7rjMPqoHLmv
P0SmLBNuGYtQZt9kqKqw5Zx2KlC3Zis3udKN4ZJpbO6CozAs/xOcMfoL2T/G
s/W355ENDKKs1HtoVFNn2uu0qKn8E/+uNRnUHM9zap6PYfOsE/D6sSZT+7Ef
94dV0oH9ohTXrMxWNUxirrOb+Lii57hhnDjXc+warj2zk3VmVbKvz8ZQtLoI
Nez2RKO5Jfx1qyJIerSazRCVxAkFVTBY7cwqpV9jdlgFzFslJpTZ2IGVH3ay
yDInwaGwu8iJy0CQ2QI4MfCASzp1Ab82OlL3r614b14p6Yas45ZDOT+iSgA2
iasoK/Ed53nICoKPbKepPdOwMv8BqCwYTe1+b/g2j7Wwynose/HiMhv6oIoK
kc5gM1UNjWLW8/l5JUD3/IRrpq8TcqvzMM3HFV+e0cCFjcpwQGM6ZOppsKvJ
eVD+3xiaEryUovUlsVRjBWaFjqH8ZmM2N/MCVm98jUftH9JME2dmrvEfZx/d
xBYclqIOPxfB/IoJ5KLqIfjUuIWPmnMW3NPKmIlFNyvRtWSJp9L4hQuPsp/B
PK5cI8Xsd6exVxe30VurOHxwTh5XXzoBPzucQEZ+I2xMiccpW8Owf3McbA6s
hBOXs6Db7yQfEJAFep0T+Tu1d8je/YLgunQ7GmsGwHNpN6447A526p6Flp36
mHFVnBojjmCFTgNvNW4+1npl8gMFWrCieTJtebIfV4wvwCWXxXHGFm/MH96H
l+QewMqCmXB0n4C5tq9gh+o7+f1K8fyRKwfwYsks9kFWmWXnRfMjpk6iC291
2CPrI6C64N8tDBrQiU5feJRyhC5+0ue6tBNo9KS/YLC8FlLRRaC13AnXXHBl
66PPs6PTFEnhVzIZto2kGR2n4M7Ki6AgWYyeVcMEYYtSuFyfVfRsqT0pWX5C
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
                    "], "Biases" -> 
                    RawArray[
                    "Real32",{-0.003890459192916751, -0.009899696335196495, 
                    0.011075889691710472`, 0.012002960778772831`, 
                    0.0005898661911487579, 
                    0.022760450839996338`, -0.0017692804103717208`, 
                    0.005867197178304195, 0.0043998039327561855`, 
                    0.014974010176956654`, -0.011614223010838032`, \
-0.003612771863117814, 0.0018114635022357106`, 0.006100725848227739, 
                    0.024660823866724968`, 
                    0.0019417561125010252`, -0.00084365822840482, 
                    0.005112693179398775, -0.004272230435162783, 
                    0.0022969264537096024`, -0.014299198053777218`, 
                    0.002154908375814557, 
                    0.004296044819056988, -0.006315417587757111, 
                    0.0054327878169715405`, -0.0015854031080380082`, \
-0.012183688580989838`, -0.007415319327265024, -0.003730680327862501, \
-0.007657618261873722, 
                    0.005530729424208403, -0.006119224708527327, \
-0.006294914521276951, 
                    0.0025990866124629974`, -0.02020091935992241, \
-0.010795877315104008`, -0.005420763976871967, -0.008827952668070793, \
-0.006055284757167101, -0.0057368408888578415`, -0.004129256121814251, \
-0.0034777687396854162`, 0.002275161212310195, 
                    0.008353485725820065, -0.004834156017750502, \
-0.0074602095410227776`, 0.008196385577321053, 
                    0.0021919775754213333`, -0.009609933942556381, 
                    0.01513321977108717}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "10" -> <|
                   "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "11" -> <|
                   "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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
+jl3EdLKh4L26mzhq3Qz/B82+hvl
                    "], "Biases" -> 
                    RawArray[
                    "Real32",{-0.009307891130447388, -0.010295778512954712`, \
-0.020732589066028595`, -0.013359702192246914`, 
                    0.0020933884661644697`, -0.009114128537476063, 
                    0.00702575733885169, -0.03471606224775314, \
-0.001055296859703958, -0.0015444025630131364`, -0.006065328139811754, 
                    0.0008057019440457225, 
                    0.006259543355554342, -0.03326950967311859, 
                    0.013674905523657799`, -0.002381682861596346, 
                    0.01283654011785984, -0.013366002589464188`, \
-0.0031081652268767357`, 0.006257378030568361, 
                    0.010249562561511993`, -0.0012249996652826667`, \
-0.011047985404729843`, -0.008879889734089375, -0.006087625399231911, 
                    0.006269737612456083, 
                    0.006964119151234627, -0.0128671545535326, \
-0.010994422249495983`, -0.0005347082042135298, 0.0031243343837559223`, 
                    0.01187820453196764, -0.0052745952270925045`, 
                    0.014310749247670174`, -0.0017243404872715473`, \
-0.00924238283187151, -0.018464185297489166`, -0.00623256666585803, \
-0.0028044525533914566`, -0.003753631142899394, 
                    0.0010286940960213542`, -0.005507062654942274, 
                    0.01283167488873005, 0.0029130084440112114`, 
                    0.007418884430080652, -0.005398102104663849, \
-0.0023388261906802654`, 0.0010039197513833642`, 0.017699776217341423`, 
                    0.003882001154124737}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "12" -> <|
                   "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "13" -> <|
                   "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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

                    "], "Biases" -> 
                    RawArray["Real32",{
                    0.008605330251157284, -0.013563851825892925`, \
-0.010247569531202316`, 0.0077054682187736034`, 
                    0.00989424716681242, -0.02047424204647541, 
                    0.0025077015161514282`, -0.004346033558249474, \
-0.005007414612919092, 
                    0.013156643137335777`, -0.014213476330041885`, \
-0.02974701300263405, 0.004919057246297598, 
                    0.005460901185870171, -0.013274638913571835`, \
-0.00980954710394144, -0.0002228411176474765, -0.007731318008154631, 
                    0.006746198050677776, -0.014977846294641495`, \
-0.006894973572343588, 
                    0.002596050500869751, -0.007050016894936562, \
-0.007096574641764164, 0.0008390707662329078, -0.013392195105552673`, 
                    0.004832372069358826, -0.007933628745377064, \
-0.0018833448411896825`, -0.003652469953522086, -0.002458451082929969, 
                    0.004565519746392965, -0.006077323574572802, 
                    0.004803829360753298, 
                    0.005920048803091049, -0.03271349519491196, 
                    0.006789540871977806, -0.0055248248390853405`, 
                    0.003520538564771414, -0.0011972173815593123`, 
                    0.003071031766012311, 0.003139632288366556, 
                    0.017375683411955833`, -0.0033819302916526794`, 
                    0.006370672956109047, 
                    0.004703974816948175, -0.007177188992500305, \
-0.004041415173560381, -0.011589898727834225`, -0.006907782983034849}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "14" -> <|
                   "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "15" -> <|
                   "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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
Ke/hjg==
                    "], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0006336949882097542, -0.0036344307009130716`,
                     0.0006130927940830588, 
                    0.0022091176360845566`, -0.005063506308943033, \
-0.023275991901755333`, -0.0014721878105774522`, -0.01004006341099739, \
-0.011116872541606426`, 0.0010409848764538765`, 
                    0.003875535214319825, -0.003946042153984308, \
-0.002830029930919409, -0.007085997611284256, 
                    0.002824218478053808, -0.00820755772292614, \
-0.0004634876095224172, -0.0035649628844112158`, -0.007489099632948637, \
-0.0045754872262477875`, 0.0035229730419814587`, -0.008536048233509064, 
                    0.0047198752872645855`, -0.01001805905252695, \
-0.010288627818226814`, -0.005234026350080967, -0.0064338194206357, \
-0.004237765911966562, -0.0018292965833097696`, 
                    0.007385347504168749, -0.0066727809607982635`, \
-0.0013747266493737698`, -0.004189292434602976, -0.005138010252267122, \
-0.005556740332394838, -0.010280081070959568`, -0.0006718160584568977, \
-0.002747728256508708, 0.002193993655964732, -0.002315705409273505, 
                    0.0014361236244440079`, -0.0051640672609210014`, 
                    0.001792451017536223, -0.009429221041500568, \
-0.006163599900901318, 0.00030756607884541154`, -0.0035621679853647947`, 
                    0.002510549034923315, 
                    0.0020478488877415657`, -0.013989239931106567`}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "16" -> <|
                   "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                  "17" -> <|
                   "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.013634650968015194`, -0.10313615202903748`, 
                    0.045605313032865524`, -0.09101683646440506, 
                    0.11689754575490952`, 0.10403399169445038`, 
                    0.050191204994916916`, -0.1290348321199417, 
                    0.1029035821557045, -0.26533690094947815`, \
-0.010752696543931961`, -0.06381276994943619, 0.05459394305944443, 
                    0.0908244326710701, 0.004103268962353468, 
                    0.06316772848367691, 0.07258658111095428, 
                    0.0908803716301918, 
                    0.09701042622327805, -0.10368365049362183`, \
-0.1389431357383728, -0.0021193011198192835`, 0.10442284494638443`, 
                    0.0949895903468132, -0.08022850006818771, \
-0.07051189988851547, 0.15945148468017578`, 0.08642613887786865, 
                    0.11687086522579193`, 
                    0.22529108822345734`, -0.19818003475666046`, \
-0.1927887350320816, -0.01008946169167757, 0.2750571370124817, 
                    0.1598864644765854, -0.1606169044971466, \
-0.17477458715438843`, -0.10940900444984436`, -0.10037269443273544`, \
-0.07840756326913834, -0.05113198235630989, -0.0465751551091671, \
-0.0627509355545044, -0.10523460805416107`, 0.11102096736431122`, 
                    0.1367153823375702, 
                    0.05152688920497894, -0.09076007455587387, \
-0.07642100751399994, -0.04319033399224281}}], "Biases" -> 
                    RawArray["Real32",{-0.0007615134818479419}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                "Edges" -> {
                 NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "16", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Outputs", "Output"] -> 
                  NeuralNetworks`NetPath["Nodes", "17", "Outputs", "Output"]},
                 "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Outputs", "LogStd"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Mean"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"]}|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "Training" -> <|
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 3.283183, "MeanInputsPerSecond" -> 
           4264.1546328669465`|>, "InputType" -> "NumericalVector", 
         "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3f4f5)" -> <|
               "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5)" -> <|
               "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                "Mean" -> {-0.0812613174801503, -0.11663060452178584`, \
-0.07748450547430653, -0.09780138648281839, 0.19723469688244114`}, 
                "StandardDeviation" -> {1.0676099376867996`, 
                 0.890189106027844, 0.9884952360559629, 1.0008109855781255`, 
                 0.886800952000408}, 
                "Output" -> <|
                 "(f1f2f3f4f5)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 2283713745384451654|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>, 
                "Key" -> "(f1f2f3f4f5)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "FeatureNumber" -> 5, 
         "DistributionData" -> {NormalDistribution, Automatic}, "Calibrator" -> 
         None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>,
            "NetworkDepth" -> <|"Value" -> 8, "Options" -> <||>|>, 
           "NumberOfParameters" -> <|"Value" -> 17800, "Options" -> <||>|>, 
           "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
           "Dropout" -> <|"Value" -> None, "Options" -> <||>|>, 
           "NetInitializationMethod" -> <|
            "Value" -> Automatic, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> {"ADAM", "L2Regularization" -> None}, 
             "Options" -> <||>|>, 
           MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
           ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
           TrainingProgressReporting -> <|
            "Value" -> None, "Options" -> <||>|>, 
           "NetTrainOptions" -> <|
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> <||>|>, 
           "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "ValidationSetRatio" -> <|"Value" -> None, "Options" -> <||>|>|>|>,
        "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Predict, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 
         4.127093226053854, "PreprocessingTime" -> 0.259233`5.865235279296613,
          "LossName" -> "StandardDeviation", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> Around[8.212578737341302, 2.891301425403568],
             "StandardDeviation" -> 
            Around[64.43283545804485, 18.239050621373703`], "EvaluationTime" -> 
            0.01670624112090907, "TestSize" -> 3, "ModelMemory" -> 167112, 
            "ModelUtility" -> -5.196438005000933, "TrainingSize" -> 14, 
            "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 739056, 
            "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[8.212578737341302, 2.0444588443571936`]}, 
            "StandardDeviationHistory" -> {
              Around[64.43283545804485, 12.896956376778057`]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 8, "NumberOfParameters" -> 17800, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> None, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
           
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
             "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
             "TrainingTime", "TrainingMemory", "ExperimentCount", 
             "MeanCrossEntropyHistory", "StandardDeviationHistory", 
             "Configuration"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 17800|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[8.212578737341302, 2.891301425403568], 
                 "StandardDeviation" -> 
                 Around[64.43283545804485, 18.239050621373703`], 
                 "EvaluationTime" -> 0.01670624112090907, "TestSize" -> 3, 
                 "ModelMemory" -> 167112, 
                 "ModelUtility" -> -5.196438005000933, "TrainingSize" -> 14, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 739056, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[8.212578737341302, 2.0444588443571936`]}, 
                 "StandardDeviationHistory" -> {
                   Around[64.43283545804485, 12.896956376778057`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.01670624112090907, "ModelMemory" -> 
                167112, "StandardDeviation" -> 
                Around[64.43283545804485, 18.239050621373703`], 
                "TrainingMemory" -> 739056, "TrainingTime" -> 
                4.6578538954759185`|>, "Index" -> 1|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 7800|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
              2|>, <|"Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 17800|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
              3|>, <|"Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 2800|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
              4|>, <|"Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 7800|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
              5|>, <|"Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 2800|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
              6|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                 "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "ModelMemory", "StandardDeviation", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 6], <||>], "MaxTrainingSize" -> 17, 
         "PreprocessorEvaluationTime" -> 3.65625*^-6, "PreprocessorMemory" -> 
         76920, "InputDimension" -> 5, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.877102169758371`16.3410822348867*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 14, "TimeBudgets" -> 2.8165588423770944`, 
             "ElapsedTimes" -> 3.750895, "ExperimentCounts" -> 1|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 1], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, "ID" -> 
              2873047750387000173|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, "ID" -> 
              1314440341876764847|>, 
            "f3" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, "ID" -> 
              2051880494423027750|>, 
            "f4" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, "ID" -> 
              1203773393871153081|>, 
            "f5" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, "ID" -> 
              145883235305585233|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 4.070144, 
         "MaxTrainingMemory" -> 952976, "DataMemory" -> 4120, 
         "FunctionMemory" -> 352912, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 11, 10, 20, 49, 29.785975`8.226586801907557}, 
           "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>]]], ",", 
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Predictor information\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Data type"], 
                    TextCell["Data type"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{
                    InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "5", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                    "RowDefault"],
                   TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]],
                  Annotation[#, 
                   
                   Short[{"Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Standard deviation"], 
                    TextCell["Standard deviation"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"56.7483155677784267823`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "8.8456079644772582782`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "39.0570996388239137787`3.", "\", \"", 
                    "74.4395314967329397859`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    39.0570996388239137787`3., ", ", 
                    74.4395314967329397859`3., "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Method"], 
                    TextCell["Method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   
                   InterpretationBox[Cell[
                    "LinearRegression",ExpressionUUID->
                    "0234663e-8ebc-4908-9101-3b752f4e1ff7"],
                    TextCell["LinearRegression"]],
                   StyleBox[
                    TagBox[
                    
                    GridBox[{{"\"L1Regularization\"", "0"}, {
                    "\"L2Regularization\"", "1.`*^6"}, {
                    "\"OptimizationMethod\"", "\"NormalEquation\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                    "Verdana", StripOnInput -> False]],
                  Annotation[#, 
                   Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 1.*^6}, {
                    "OptimizationMethod", "NormalEquation"}}, Alignment -> 
                    Left, Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                   "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"1.62`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"357.`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"5.5348518892543774328`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0667713603094492875`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "5.4013091686354792742`3.", "\", \"", 
                    "5.6683946098732755914`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    5.4013091686354792742`3., ", ", 5.6683946098732755914`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Model memory"], 
                    TextCell["Model memory"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"219.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Training examples used"], 
                    TextCell["Training examples used"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 TemplateBox[{
                  "17", "\"examples\"", "examples", "\"Examples\""},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Training time"], 
                    TextCell["Training time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 TemplateBox[{
                  "842.`", "\"ms\"", "milliseconds", "\"Milliseconds\""},
                  "Quantity"]}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    MachineLearning`MLInformationObject[
     PredictorFunction[<|
      "ExampleNumber" -> 17, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Numerical"|>, 
              "f4" -> <|"Type" -> "Numerical"|>, 
              "f5" -> <|"Type" -> "Numerical"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 5|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5)" -> <|
               "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 17, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7100669430970155518|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {649.5294117647059, 16.41176470588235, 
                    50.411764705882355`, 64.70588235294117, 
                    37.470588235294116`}, 
                    "StandardDeviation" -> {40.86292386397267, 
                    6.562449538444979, 9.311970938966981, 7.176470588235281, 
                    10.13507391109661}, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4772792621860920984|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{
                    0.3294464620128585, -0.24670478291864095`}, {
                    0.5266978779192711, -0.20091067530452414`}, {
                    0.6075928250009178, -0.38220632047567493`}, \
{-0.31353029417700407`, -0.6809418760462183}, {0.3828630142795621, 
                    0.5375947736621413}}, 
                    "Precisions" -> {0.5140556558990445, 0.863155175120625}, 
                    "NoisePrecision" -> 1.5886875059025845`, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157116188`, \
-0.0018584586044933286`, -0.00024375769149080384`, 8.562084148579801*^-6, 
                    0.00021587557870743752`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7856623779326335863|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "Key" -> "(f1f2f3f4f5)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 2, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157115991`, \
-0.001858458604493322, -0.00024375769149081688`, 8.562084148556943*^-6, 
                    0.00021587557870744406`}, 
                    "StandardDeviation" -> {0.9973443489182671, 
                    1.0001052004380495`, 1.000282671403912, 
                    0.9982239732130878, 1.0001417047326489`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 5, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1764544953284831100|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157115991`, \
-0.001858458604493322, -0.00024375769149081688`, 8.562084148556943*^-6, 
                    0.00021587557870744406`}, 
                    "StandardDeviation" -> {0.9973443489182671, 
                    1.0001052004380495`, 1.000282671403912, 
                    0.9982239732130878, 1.0001417047326489`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 5, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1764544953284831100|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 5, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, 
                    "ID" -> 4922843929423532927|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, 
                    "ID" -> 365386638938414886|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, 
                    "ID" -> 8084762059231395715|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, 
                    "ID" -> 717539068447703646|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, 
                    "ID" -> 3403397587327662634|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.175613, "MaxTrainingMemory" -> 192776,
                     "DataMemory" -> 6400, "FunctionMemory" -> 51568, 
                    "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 11, 10, 20, 49, 29.98033`8.229411390162317}, 
                    "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}|>,
                    "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-4.406902047628646, -4.406902047628646, \
-4.168656228344961, -4.127362310486287, -3.8790302555384786`, \
-3.8157144014569915`, -3.7752140087029566`, -3.538288180712346, \
-3.4944058955364734`, -3.4490724744232923`, -3.432924033093133}, 
                    "LeftBoundary" -> -4.168656228344961, "LeftScale" -> 
                    0.11912290964184223`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[19.043784917961784`, 0.5368425024100205], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 5966421770916112094|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4f5)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 1020916197684206682|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                "Mean" -> {649.5294117647059, 16.41176470588235, 
                 50.411764705882355`, 64.70588235294117, 37.470588235294116`},
                 "StandardDeviation" -> {40.86292386397267, 6.562449538444979,
                  9.311970938966981, 7.176470588235281, 10.13507391109661}, 
                "Output" -> <|
                 "(f1f2f3f4f5)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 2859614146361296001|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Numerical"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 1892463177288152845|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {186.5176470588235}, 
                "StandardDeviation" -> {61.9974481950585}, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 5696177821155824089|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 5443556393657702637|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "Numerical", "Weight" -> 1|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
         "InverseProcessorFunction" -> (186.5176470588235 + 
          61.9974481950585 #& ), 
         "ProcessorFunction" -> (-3.008472969274401 + 
          0.016129696126423874` #& ), "Name" -> "value", 
         "Quantiles" -> {-1.4258271853496902`, 2.7177304525673383`}, "Mean" -> 
         186.51764705882354`|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 
       0, "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "MeanFunction" -> 
         LinearLayer[<|
           "Type" -> "Linear", 
            "Arrays" -> <|
             "Weights" -> 
              RawArray["Real32",{{
                0.000010227257007500157`, -2.977458279929124*^-6, \
-4.253418524058361*^-7, -5.453258609122713*^-7, 1.783388938747521*^-6}}], 
              "Biases" -> RawArray["Real32",{2.742905500237422*^-16}]|>, 
            "Parameters" -> <|
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 5,
               "$InputDimensions" -> {5}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "DistributionData" -> {NormalDistribution, 1.2431545561888937`}, 
         "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3f4f5)" -> <|
               "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5)" -> <|
               "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                "Mean" -> {0.0015238368206923285`, 
                 0.0001960125331606793, -0.003053086958476699, 
                 0.0003484793101807369, -0.0017051122868508132`}, 
                "StandardDeviation" -> {0.999579510982794, 0.9973638566085912,
                  1.0002751161218724`, 0.9997172300055037, 
                 1.0009988024737557`}, 
                "Output" -> <|
                 "(f1f2f3f4f5)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 598096601813410430|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>, 
                "Key" -> "(f1f2f3f4f5)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
         "LinearRegression", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> 1.*^6, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> "NormalEquation", "Options" -> <||>|>, 
           MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Predict, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 
         4.127093226053854, "PreprocessingTime" -> 0.309733`5.94253247251889, 
         "LossName" -> "StandardDeviation", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[5.534851889254377, 0.06677136030944929], 
            "StandardDeviation" -> 
            Around[56.74831556777843, 8.845607964477258], "EvaluationTime" -> 
            0.0005282977308203709, "TestSize" -> 9, "ModelMemory" -> 15488., 
            "ModelUtility" -> -4.762477872876025, "TrainingSize" -> 14, 
            "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 72916.,
             "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
              Around[5.542997781911346, 0.11239398949153957`], 
              Around[5.509685521772135, 0.1065309092188283], 
              Around[5.551872364079654, 0.12343499929930912`]}, 
            "StandardDeviationHistory" -> {
              Around[58.994284804719925`, 13.15201486589744], 
              Around[51.01900798760274, 15.728315521454363`], 
              Around[60.231653911012614`, 14.939724030257922`]}, 
            "Configuration" -> {
             "LinearRegression", "L1Regularization" -> 0, "L2Regularization" -> 
              1.*^6, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
            "FinalTrainingSize" -> 17|>, 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
             "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
             "TrainingTime", "TrainingMemory", "ExperimentCount", 
             "MeanCrossEntropyHistory", "StandardDeviationHistory", 
             "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 3], 
             TypeSystem`Vector[TypeSystem`AnyType, 3], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 100000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.534834832279081, 0.06677238650379977], 
                 "StandardDeviation" -> 
                 Around[56.74928890364476, 8.845097655913799], 
                 "EvaluationTime" -> 0.0005966925845716652, "TestSize" -> 9, 
                 "ModelMemory" -> 15488., 
                 "ModelUtility" -> -4.762492830297291, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 72896., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[5.542983344995577, 0.11239757473183765`], 
                   Around[5.50966671240032, 0.10653285506897352`], 
                   Around[5.551854439441349, 0.12343335235780473`]}, 
                 "StandardDeviationHistory" -> {
                   Around[58.99547026541086, 13.151832462077266`], 
                   Around[51.020741836078734`, 15.72731542197369], 
                   Around[60.23165460944468, 14.938595357984449`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005966925845716652, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[56.74928890364476, 8.845097655913799], 
                "TrainingMemory" -> 72896., "TrainingTime" -> 
                0.007382200930418258|>, "Index" -> 1|>, <|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.01|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.761444548940688, 0.28851435171801093`], 
                 "StandardDeviation" -> 
                 Around[72.78383707914007, 14.742706427725231`], 
                 "EvaluationTime" -> 0.000562495157696018, "TestSize" -> 9, 
                 "ModelMemory" -> 15488., 
                 "ModelUtility" -> -5.0203589146055325`, "TrainingSize" -> 14,
                  "TrainingTime" -> 0.012237177839206059`, "TrainingMemory" -> 
                 73020., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[5.534717558068659, 0.16921119591922218`], 
                   Around[6.282267582921669, 0.6418679997359864], 
                   Around[5.467348505831736, 0.18537386851378437`]}, 
                 "StandardDeviationHistory" -> {
                   Around[64.18104494711723, 13.255549543309627`], 
                   Around[95.06127341741073, 23.000519709698143`], 
                   Around[59.109192872892265`, 17.171270669186253`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000562495157696018, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[72.78383707914007, 14.742706427725231`], 
                "TrainingMemory" -> 73020., "TrainingTime" -> 
                0.014317498071871089`|>, "Index" -> 2|>, <|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.00001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.909581064824291, 0.4090840370924395], 
                 "StandardDeviation" -> 
                 Around[79.6587632522926, 19.27999713796619], 
                 "EvaluationTime" -> 0.0005282977308203709, "TestSize" -> 6, 
                 "ModelMemory" -> 15488., 
                 "ModelUtility" -> -5.118176506721249, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 72832., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[5.534682922478275, 0.16927824477692485`], 
                   Around[6.284479207170306, 0.6436115123807173]}, 
                 "StandardDeviationHistory" -> {
                   Around[64.17884816653434, 13.260083028702061`], 
                   Around[95.13867833805087, 23.043382803327937`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005282977308203709, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[79.6587632522926, 19.27999713796619], "TrainingMemory" -> 
                72832., "TrainingTime" -> 0.007382200930418258|>, "Index" -> 
              3|>, <|"Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.693367454154841, 0.2275810636975664], 
                 "StandardDeviation" -> 
                 Around[70.37966921048324, 12.855649793215893`], 
                 "EvaluationTime" -> 0.0005282977308203709, "TestSize" -> 9, 
                 "ModelMemory" -> 15488., 
                 "ModelUtility" -> -4.9829383218644665`, "TrainingSize" -> 14,
                  "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 73004., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[5.537018835452896, 0.162857584923597], 
                   Around[6.082550758596856, 0.49237622361394645`], 
                   Around[5.460532768414772, 0.17520207393443116`]}, 
                 "StandardDeviationHistory" -> {
                   Around[64.342053390633, 12.905678991735893`], 
                   Around[88.31834443982007, 19.599927716359378`], 
                   Around[58.47860980099668, 16.678389530697014`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005282977308203709, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[70.37966921048324, 12.855649793215893`], 
                "TrainingMemory" -> 73004., "TrainingTime" -> 
                0.007382200930418258|>, "Index" -> 4|>, <|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 100.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.520364486472606, 0.06783903844055465], 
                 "StandardDeviation" -> 
                 Around[57.725497747393554`, 8.34538588208579], 
                 "EvaluationTime" -> 0.0006308900114473124, "TestSize" -> 9, 
                 "ModelMemory" -> 15488., 
                 "ModelUtility" -> -4.777356085470906, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.007534855121632593, "TrainingMemory" -> 
                 72930., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[5.531514416788595, 0.11645358574404258`], 
                   Around[5.494124840785624, 0.1088831297755258], 
                   Around[5.535454201843598, 0.12152542072185327`]}, 
                 "StandardDeviationHistory" -> {
                   Around[60.13420798295833, 12.973819118386215`], 
                   Around[52.8969016822823, 14.7623356585785], 
                   Around[60.14538357694005, 13.948029801011218`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006308900114473124, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[57.725497747393554`, 8.34538588208579], 
                "TrainingMemory" -> 72930., "TrainingTime" -> 
                0.008815780492310134|>, "Index" -> 5|>, <|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.0001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.762206151614397, 0.28918477557449224`], 
                 "StandardDeviation" -> 
                 Around[72.81203627080747, 14.764225053841171`], 
                 "EvaluationTime" -> 0.0005282977308203709, "TestSize" -> 9, 
                 "ModelMemory" -> 15488., 
                 "ModelUtility" -> -5.020787969587212, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.011011896162375396`, "TrainingMemory" -> 
                 72858., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[5.534683249753409, 0.1692776444683391], 
                   Around[6.284459271315347, 0.643595780574491], 
                   Around[5.467475933774436, 0.1854727235442694]}, 
                 "StandardDeviationHistory" -> {
                   Around[64.1788689040908, 13.260042036424538`], 
                   Around[95.13798004273157, 23.04299550738775], 
                   Around[59.119259865600014`, 17.175668039506018`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005282977308203709, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[72.81203627080747, 14.764225053841171`], 
                "TrainingMemory" -> 72858., "TrainingTime" -> 
                0.012883918509979213`|>, "Index" -> 6|>, <|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.*^6|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.534851889254377, 0.06677136030944929], 
                 "StandardDeviation" -> 
                 Around[56.74831556777843, 8.845607964477258], 
                 "EvaluationTime" -> 0.0005282977308203709, "TestSize" -> 9, 
                 "ModelMemory" -> 15488., 
                 "ModelUtility" -> -4.762477872876025, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 72916., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[5.542997781911346, 0.11239398949153957`], 
                   Around[5.509685521772135, 0.1065309092188283], 
                   Around[5.551872364079654, 0.12343499929930912`]}, 
                 "StandardDeviationHistory" -> {
                   Around[58.994284804719925`, 13.15201486589744], 
                   Around[51.01900798760274, 15.728315521454363`], 
                   Around[60.231653911012614`, 14.939724030257922`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005282977308203709, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[56.74831556777843, 8.845607964477258], 
                "TrainingMemory" -> 72916., "TrainingTime" -> 
                0.007382200930418258|>, "Index" -> 7|>, <|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.762213769865778, 0.2891914829142508], 
                 "StandardDeviation" -> 
                 Around[72.8123184968647, 14.76444057006014], 
                 "EvaluationTime" -> 0.0024894619910399273`, "TestSize" -> 9, 
                 "ModelMemory" -> 15488., 
                 "ModelUtility" -> -5.112483930387337, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.006718000670412151, "TrainingMemory" -> 
                 72960., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[5.534682903229695, 0.16927830708545105`], 
                   Around[6.284481196998263, 0.6436130829374975], 
                   Around[5.467477209369381, 0.18547370723997095`]}, 
                 "StandardDeviationHistory" -> {
                   Around[64.17884694687201, 13.260087015896893`], 
                   Around[95.13874803652833, 23.043421474021667`], 
                   Around[59.11936050719379, 17.17571181577855]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0024894619910399273`, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[72.8123184968647, 14.76444057006014], "TrainingMemory" -> 
                72960., "TrainingTime" -> 0.007860060784382217|>, "Index" -> 
              8|>, <|"Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.762136864206496, 0.2891238075392723], 
                 "StandardDeviation" -> 
                 Around[72.80946847902437, 14.76226682696847], 
                 "EvaluationTime" -> 0.0005966925845716652, "TestSize" -> 9, 
                 "ModelMemory" -> 15488., 
                 "ModelUtility" -> -5.020748976415439, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.009720335871023646, "TrainingMemory" -> 
                 72856., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[5.534686370015957, 0.16927160321192455`], 
                   Around[6.284259946812004, 0.6434385442562445], 
                   Around[5.467464275791524, 0.18546374111869726`]}, 
                 "StandardDeviationHistory" -> {
                   Around[64.17906663655944, 13.259632749513159`], 
                   Around[95.13099884411103, 23.039125723974024`], 
                   Around[59.11833995640268, 17.175268845380003`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005966925845716652, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[72.80946847902437, 14.76226682696847], 
                "TrainingMemory" -> 72856., "TrainingTime" -> 
                0.011372792969097666`|>, "Index" -> 9|>, <|
             "Value" -> "LinearRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.1|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.754576052418996, 0.28244900256016603`], 
                 "StandardDeviation" -> 
                 Around[72.53176000661027, 14.54946533403942], 
                 "EvaluationTime" -> 0.000562495157696018, "TestSize" -> 9, 
                 "ModelMemory" -> 15488., 
                 "ModelUtility" -> -5.016512676638521, "TrainingSize" -> 14, 
                 "TrainingTime" -> 0.011011896162375396`, "TrainingMemory" -> 
                 73004., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[5.535018969362517, 0.16860673913559598`], 
                   Around[6.262446890652057, 0.6263541347291746], 
                   Around[5.466262297242416, 0.18446678648849757`]}, 
                 "StandardDeviationHistory" -> {
                   Around[64.20035014985204, 13.215745834665299`], 
                   Around[94.37271094267881, 22.623610560216054`], 
                   Around[59.02221892729996, 17.13053783734946]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000562495157696018, "ModelMemory" -> 
                15488., "StandardDeviation" -> 
                Around[72.53176000661027, 14.54946533403942], 
                "TrainingMemory" -> 73004., "TrainingTime" -> 
                0.012883918509979213`|>, "Index" -> 10|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["LinearRegression"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                 "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 1], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "ModelMemory", "StandardDeviation", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 17,
          "PreprocessorEvaluationTime" -> 4.21875*^-6, "PreprocessorMemory" -> 
         76920, "InputDimension" -> 5, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.877102170139276`16.341082234929367*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 14, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.41822, "ExperimentCounts" -> 29|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 1], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, "ID" -> 
              2873047750387000173|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, "ID" -> 
              1314440341876764847|>, 
            "f3" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, "ID" -> 
              2051880494423027750|>, 
            "f4" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, "ID" -> 
              1203773393871153081|>, 
            "f5" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, "ID" -> 
              145883235305585233|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 0.842018, 
         "MaxTrainingMemory" -> 468520, "DataMemory" -> 4120, 
         "FunctionMemory" -> 213928, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 11, 10, 20, 49, 30.642489`8.238899019844677}, 
           "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>]]]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.877127578383833*^9},
 CellLabel->
  "Out[349]=",ExpressionUUID->"02187314-c92f-4776-9724-604b8329e113"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"p2m", ",", "q2m2"}], "}"}]], "Input",
 CellChangeTimes->{{3.877127708868608*^9, 3.877127737426023*^9}},
 CellLabel->
  "In[365]:=",ExpressionUUID->"59c93412-ff2a-4de5-8f7d-517029eaa53b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Predictor Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Predictor method"], 
                    TextCell["Predictor method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "NeuralNetwork",ExpressionUUID->
                   "f7c02633-b480-4180-a35c-f5696963f5c3"],
                  TextCell["NeuralNetwork"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "23"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Standard deviation"], 
                    TextCell["Standard deviation"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"68.0785799574437646697`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "13.2276275623642263213`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "41.6233248327153120272`3.", "\", \"", 
                    "94.5338350821722173123`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    41.6233248327153120272`3., ", ", 
                    94.5338350821722173123`3., "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Standard deviation baseline"], 
                    TextCell["Standard deviation baseline"]], 
                    "\"Standard deviation of testset values\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Standard deviation of testset values", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"42.6452732307168460579`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "8.9841273716218275069`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "24.677018487473191044`3.", "\", \"", 
                    "60.6135279739605010718`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    24.677018487473191044`3., ", ", 60.6135279739605010718`3.,
                     "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["R-squared"], 
                    TextCell["R-squared"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{
                    RowBox[{"-", "1.5484679368100913166`3."}], 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "1.4977782977152180877`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   TemplateBox[{"\"95% confidence interval: [\"", 
                    RowBox[{"-", "4.5440245322405274919`3."}], "\", \"", 
                    "1.4470886586203448587`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", \
-4.5440245322405274919`3., ", ", 1.4470886586203448587`3., "]"}], 
                   "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"12.6541923266656279878`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "3.4145000929590123562`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "5.8251921407476032755`3.", "\", \"", 
                    "19.4831925125836527002`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    5.8251921407476032755`3., ", ", 19.4831925125836527002`3.,
                     "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"2.88`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"549.`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                   FractionBox["\"Examples\"", "\"Seconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[{{{}, {
                    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
                    0.012833333333333334`], AbsoluteThickness[1.6], 
                    GeometricTransformationBox[InsetBox[
                    FormBox[
                    StyleBox[
                    GraphicsBox[
                    {RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
                    1.], CircleBox[{0, 0}, Offset[{1.8, 1.8}, {0., 0.}]]}],
                    StripOnInput->False,
                    GraphicsBoxOptions->{DefaultBaseStyle->Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}],
                    TraditionalForm], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGAQB2JGIGYC4vD+hWlPO3MdbLmuLy5IzXaQvnNNM/ZznoMx
CHzOcbiwX1jMJCoHIn82y0Fs4ZJ/20ULHPoPfdWIWZ7jcPt8+Zuzz/IcgLK2
XOvTHGRW9227mZjvUAjWkO7AvPSNct7qXIi8fK6D1f/bXn6XMhxE1rk/rOJJ
d9hn06Tr9i7L4ewZIHiS4XBA1CRv1rtkhx1yra8DO1IcuHqvbbvHnwO1L9lB
i1NE+GdfKcQ9pskOc4u3eLb6Rjh804jpP1Sb6qCXN9tQPy/Z4WEV0AbGZAeB
JRrK3c6pEPVTUx06UhXLSPFv5qHn1mJbCh3eBAJdVIxpXtl8+ZfFAvkQ/3wp
ceh+xVffxwe137DQ4UOU7q/s/XEOmkDnfb2R7QAA1maksw==
                    "]]}, {
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{236.30925303988144`, 219.17}}]},
                    RowBox[{"{", 
                    RowBox[{"236.30925303988144`", ",", "219.17`"}], "}"}]],
                    
                    Annotation[#, {236.30925303988144`, 219.17}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{247.60512248959353`, 231.6}}]},
                    RowBox[{"{", 
                    RowBox[{"247.60512248959353`", ",", "231.6`"}], "}"}]],
                    Annotation[#, {247.60512248959353`, 231.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{226.81885818345336`, 214.42}}]},
                    RowBox[{"{", 
                    RowBox[{"226.81885818345336`", ",", "214.42`"}], "}"}]],
                    
                    Annotation[#, {226.81885818345336`, 214.42}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{257.3574205809431, 229.23}}]},
                    RowBox[{"{", 
                    RowBox[{"257.3574205809431`", ",", "229.23`"}], "}"}]],
                    Annotation[#, {257.3574205809431, 229.23}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{247.21263717079896`, 181.47}}]},
                    RowBox[{"{", 
                    RowBox[{"247.21263717079896`", ",", "181.47`"}], "}"}]],
                    
                    Annotation[#, {247.21263717079896`, 181.47}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{251.0578263079159, 187.52}}]},
                    RowBox[{"{", 
                    RowBox[{"251.0578263079159`", ",", "187.52`"}], "}"}]],
                    Annotation[#, {251.0578263079159, 187.52}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{237.3571948644604, 232.97}}]},
                    RowBox[{"{", 
                    RowBox[{"237.3571948644604`", ",", "232.97`"}], "}"}]],
                    Annotation[#, {237.3571948644604, 232.97}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{198.572057180101, 184.39}}]},
                    RowBox[{"{", 
                    RowBox[{"198.572057180101`", ",", "184.39`"}], "}"}]],
                    Annotation[#, {198.572057180101, 184.39}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{215.44606662213295`, 199.15}}]},
                    RowBox[{"{", 
                    RowBox[{"215.44606662213295`", ",", "199.15`"}], "}"}]],
                    
                    Annotation[#, {215.44606662213295`, 199.15}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{159.4563513772282, 164.26}}]},
                    RowBox[{"{", 
                    RowBox[{"159.4563513772282`", ",", "164.26`"}], "}"}]],
                    Annotation[#, {159.4563513772282, 164.26}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{224.49593679337005`, 157.23}}]},
                    RowBox[{"{", 
                    RowBox[{"224.49593679337005`", ",", "157.23`"}], "}"}]],
                    
                    Annotation[#, {224.49593679337005`, 157.23}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{344.9358092100762, 153.67}}]},
                    RowBox[{"{", 
                    RowBox[{"344.9358092100762`", ",", "153.67`"}], "}"}]],
                    Annotation[#, {344.9358092100762, 153.67}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{97.21126024839619, 171.93}}]},
                    RowBox[{"{", 
                    RowBox[{"97.21126024839619`", ",", "171.93`"}], "}"}]],
                    Annotation[#, {97.21126024839619, 171.93}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{155.4432609592199, 152.04}}]},
                    RowBox[{"{", 
                    RowBox[{"155.4432609592199`", ",", "152.04`"}], "}"}]],
                    Annotation[#, {155.4432609592199, 152.04}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{170.11073453843755`, 172.67}}]},
                    RowBox[{"{", 
                    RowBox[{"170.11073453843755`", ",", "172.67`"}], "}"}]],
                    
                    Annotation[#, {170.11073453843755`, 172.67}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{236.3092604305532, 219.17}}]},
                    RowBox[{"{", 
                    RowBox[{"236.3092604305532`", ",", "219.17`"}], "}"}]],
                    Annotation[#, {236.3092604305532, 219.17}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{247.60512248959353`, 231.6}}]},
                    RowBox[{"{", 
                    RowBox[{"247.60512248959353`", ",", "231.6`"}], "}"}]],
                    Annotation[#, {247.60512248959353`, 231.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{226.81885818345336`, 214.42}}]},
                    RowBox[{"{", 
                    RowBox[{"226.81885818345336`", ",", "214.42`"}], "}"}]],
                    
                    Annotation[#, {226.81885818345336`, 214.42}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{283.25542822390577`, 155.61}}]},
                    RowBox[{"{", 
                    RowBox[{"283.25542822390577`", ",", "155.61`"}], "}"}]],
                    
                    Annotation[#, {283.25542822390577`, 155.61}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{170.11073453843755`, 172.67}}]},
                    RowBox[{"{", 
                    RowBox[{"170.11073453843755`", ",", "172.67`"}], "}"}]],
                    
                    Annotation[#, {170.11073453843755`, 172.67}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{248.5141492478976, 335.28}}]},
                    RowBox[{"{", 
                    RowBox[{"248.5141492478976`", ",", "335.28`"}], "}"}]],
                    Annotation[#, {248.5141492478976, 335.28}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{152.45489457047765`, 275.08}}]},
                    RowBox[{"{", 
                    RowBox[{"152.45489457047765`", ",", "275.08`"}], "}"}]],
                    
                    Annotation[#, {152.45489457047765`, 275.08}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{122.99096540860387`, 222.78}}]},
                    RowBox[{"{", 
                    RowBox[{"122.99096540860387`", ",", "222.78`"}], "}"}]],
                    
                    Annotation[#, {122.99096540860387`, 222.78}, 
                    "Tooltip"]& ]}}, {{}, {}}}, {{{}, {}, 
                    TagBox[
                    {GrayLevel[0.2], AbsoluteThickness[1.], Opacity[0.5], 
                    AbsoluteDashing[{2, 4}], LineBox[CompressedData["
1:eJxFxW0w03EcAPD/XMJFSg7NcsMW5VQc6zYPMw/nTJpNtmNny8M8xcyWRTWd
23V5OCQPc+GopLuIdJ27WkvbpKTadUpyoR26o3WMSg7Xwwvf34vPfdzTCjgi
CwzD4v75f9Dkzfbrt6ZDtz8esnEbc31C39689Vygx7+GTwp81J34z7BityCn
EW+CGzLPPavGb8IdDjtMFXjbsO27sl/hyvEEuMpK5UKI8YXdSLTocG0gvHRw
upj+OBieKAxqjiCHw6rua1WjPVEwK3xO+/tSDBxZeVXGZMTBo+PpblhqPLzc
dLHTN5oDDw0lU+zsTsGU2K+Wf0YSYTK2JNf38GC9h2aVWpAET8msHZQ8Ptx4
ACeepqTAmwGDH779FMCSEMWSKP80TFVtrfeyUmFGeXCiMTINbiZzDK2B6fBw
CZPl55QB+4twxD4bESy3avll+R1tw91lmh/NhCeDaP59mixYORFbym7PhnNt
Ca5T9Tlwh0k3blbmwveUJ5pn0s/A6/0Ndwe4eTBBNajLpObDNd7a9XZnMRzK
LivTWRfAw8dI9k8X0C/GdPJ3YgnctDiXff8LuponXUyIL4Q99wgd80bQZFKI
VkKTwsPK806LD9E1VM8NL18ZrGNq0jht6MY7A1Kz01n4vfCGpaIcTROveb1Z
Q4e97FmpkxTB/YqEsAgj+gKfLqXNoqOoPp1+8+hPPyysiQtoXN4Dw+Yymp28
VziAyWEzxaA4RESrHdV9RA/05ZUuozMJvb+3NGqnN5pBPmI3exRdt6+6tZWO
5puL39Yz0GRDBlYVgX5UGZxREo024kw+XBa6e+ZjShwbXaTR10YmoG1KWlb9
eegx7hXy4SR0W4CM585HZzkIK1xS0H7LTLW9EP0XcBMc0Q==
                    "]]},
                    Annotation[#, "Charting`Private`Tag$948855#1"]& ]}, {}}},
                   Axes->{False, False},
                   AxesLabel->{None, None},
                   AxesOrigin->{0, 0},
                   DisplayFunction->Identity,
                   Frame->{{True, False}, {True, False}},
                   FrameLabel->{{
                    FormBox[
                    TagBox["\"actual value\"", HoldForm], TraditionalForm], 
                    None}, {
                    FormBox[
                    TagBox["\"predicted value\"", HoldForm], TraditionalForm],
                     None}},
                   
                   FrameTicks->{{Automatic, Automatic}, {
                    Automatic, Automatic}},
                   GridLines->{Automatic, Automatic},
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.5], 
                    AbsoluteThickness[1], 
                    AbsoluteDashing[{1, 2}]],
                   ImageSize->250,
                   
                   Method->{
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}},
                   
                   PlotRange->{{0., 357.94134803056437`}, {0., 
                    357.94134803056437`}},
                   PlotRangeClipping->True,
                   PlotRangePadding->{{0, 0}, {0, 0}},
                   Ticks->{Automatic, Automatic}],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    PredictorMeasurementsObject[<|
     "Model" -> PredictorFunction[<|
        "ExampleNumber" -> 17, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical"|>, 
                "f2" -> <|"Type" -> "Numerical"|>, 
                "f3" -> <|"Type" -> "Numerical"|>, 
                "f4" -> <|"Type" -> "Numerical"|>, 
                "f5" -> <|"Type" -> "Numerical"|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor[
                   "Transpose", <|"FeatureNumber" -> 5|>], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f1f2f3f4f5)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Processors" -> {
                MachineLearning`MLProcessor[
                "SynthesizeMissingValues", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Distribution" -> 
                  LearnedDistribution[<|
                    "ExampleNumber" -> 17, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7100669430970155518|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {649.5294117647059, 16.41176470588235, 
                    50.411764705882355`, 64.70588235294117, 
                    37.470588235294116`}, 
                    "StandardDeviation" -> {40.86292386397267, 
                    6.562449538444979, 9.311970938966981, 7.176470588235281, 
                    10.13507391109661}, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4772792621860920984|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{
                    0.3294464620128585, -0.24670478291864095`}, {
                    0.5266978779192711, -0.20091067530452414`}, {
                    0.6075928250009178, -0.38220632047567493`}, \
{-0.31353029417700407`, -0.6809418760462183}, {0.3828630142795621, 
                    0.5375947736621413}}, 
                    "Precisions" -> {0.5140556558990445, 0.863155175120625}, 
                    "NoisePrecision" -> 1.5886875059025845`, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157116188`, \
-0.0018584586044933286`, -0.00024375769149080384`, 8.562084148579801*^-6, 
                    0.00021587557870743752`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7856623779326335863|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "Key" -> "(f1f2f3f4f5)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 2, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157115991`, \
-0.001858458604493322, -0.00024375769149081688`, 8.562084148556943*^-6, 
                    0.00021587557870744406`}, 
                    "StandardDeviation" -> {0.9973443489182671, 
                    1.0001052004380495`, 1.000282671403912, 
                    0.9982239732130878, 1.0001417047326489`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 5, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1764544953284831100|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157115991`, \
-0.001858458604493322, -0.00024375769149081688`, 8.562084148556943*^-6, 
                    0.00021587557870744406`}, 
                    "StandardDeviation" -> {0.9973443489182671, 
                    1.0001052004380495`, 1.000282671403912, 
                    0.9982239732130878, 1.0001417047326489`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 5, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1764544953284831100|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 5, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, 
                    "ID" -> 4922843929423532927|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, 
                    "ID" -> 365386638938414886|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, 
                    "ID" -> 8084762059231395715|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, 
                    "ID" -> 717539068447703646|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, 
                    "ID" -> 3403397587327662634|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.089636, "MaxTrainingMemory" -> 193192,
                     "DataMemory" -> 6400, "FunctionMemory" -> 51568, 
                    "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 11, 10, 20, 54, 42.044446`8.376283612062736}, 
                    "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}|>,
                     "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-4.406902047628646, -4.406902047628646, \
-4.168656228344961, -4.127362310486287, -3.8790302555384786`, \
-3.8157144014569915`, -3.7752140087029566`, -3.538288180712346, \
-3.4944058955364734`, -3.4490724744232923`, -3.432924033093133}, 
                    "LeftBoundary" -> -4.168656228344961, "LeftScale" -> 
                    0.11912290964184223`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[19.043784917961784`, 0.5368425024100205], 
                    "EntropySampleSize" -> 10|>], 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "EvaluationStrategy" -> "ModeFinding", 
                  "Version" -> {13.1, 0}, "ID" -> 5966421770916112094|>], 
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1020916197684206682|>], 
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Mean" -> {649.5294117647059, 16.41176470588235, 
                   50.411764705882355`, 64.70588235294117, 
                   37.470588235294116`}, 
                  "StandardDeviation" -> {40.86292386397267, 
                   6.562449538444979, 9.311970938966981, 7.176470588235281, 
                   10.13507391109661}, 
                  "Output" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 2859614146361296001|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Imputed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|"f1" -> <|"Type" -> "Numerical"|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor["List"], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1892463177288152845|>], 
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Mean" -> {186.5176470588235}, 
                  "StandardDeviation" -> {61.9974481950585}, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 5696177821155824089|>], 
                MachineLearning`MLProcessor[
                "FromVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 5443556393657702637|>], 
                MachineLearning`MLProcessor[
                "FirstValues", <|
                 "Info" -> <|"Type" -> "Numerical", "Weight" -> 1|>, "Key" -> 
                  "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                  False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
           "InverseProcessorFunction" -> (186.5176470588235 + 
            61.9974481950585 #& ), 
           "ProcessorFunction" -> (-3.008472969274401 + 
            0.016129696126423874` #& ), "Name" -> "value", 
           "Quantiles" -> {-1.4258271853496902`, 2.7177304525673383`}, "Mean" -> 
           186.51764705882354`|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> (DiracDelta[#2 - #]& ), 
         "Threshold" -> 0, "PerformanceGoal" -> Automatic, "BatchProcessing" -> 
         Automatic, 
         "Model" -> <|
          "Method" -> "NeuralNetwork", "Network" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>,
               "Outputs" -> <|
               "Mean" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                "LogStd" -> 
                NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
              "Nodes" -> <|
               "2" -> <|
                 "Type" -> "NetArray", 
                  "Arrays" -> <|
                   "Array" -> RawArray["Real32",{-1.349244475364685}]|>, 
                  "Parameters" -> <|
                   "Dimensions" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {1}|>, "Inputs" -> <||>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>|>, 
                "1" -> <|
                 "Type" -> "Chain", 
                  "Nodes" -> <|
                   "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1:eJwVkX001Xccx6+nPF0it1keargpD62Op7nc7+dbHvLQHKFmq84p8tCK5inV
MSLSJI5RCUdWNyq3stCR7v19vo3rIOYpcbGOhXXGYnZttLZp+uP1Pud13n++
rCK/Co1R5/F4yTorExpxckdSUsTpsFXvJToiztkp7v3ptILWCpK2JLSVXJQH
d7mwwrCPaV9ZKV1zby0z1VBj6UnFJGi7G5E5e7KU0w7i8J9ukrLVncBrVaDx
6G6usWMGtjVvwO2yepKXcIqLChZxyoEzsGoimckPJcsqb3PYrOzHtI9e4+Tb
/ZAdZg8zGWEY6c6jT+7vI8ZhlbBQJ6DjzQasdzkT9fN12ZJlMkSWNYg7H4hR
uKMVAmLjyNfxvfjc/xUYuZeQ8fZqFHVfxkJhEHoddQDB4hiX9nKWpG76EAZy
1CHVy49m8Io4/2EXGK05AyOJ2eIvbwTDhiUfqshNBCO3YiisyQFDS19492MX
PjxuIw6pl5JL9WforjvFsnwrB6x6bslcJ7SYUHcvvg1Rcncr4slvaiq8D9ny
zFEBK947Qp5WlRBRVQkXbeGP5beqiJAYgd7Uf+Rg9Tw+fJeH0/e0aZUglkZ6
6zJ/O1faoJ4FMTM8Njd/EtjUEGe6ToGDY+bk6SdDUHvjHLOO2ExLAwzoz752
yKrWyRMDbkLWFB+/TWgE41M6WLKVT+szvZlpvj0Xb6VBg+uauU7PA5B8cRGj
Qw1p3eQSuHmLWArhc5LzndyeAREO/jAL6f3lODeqQ5tc7Sj7Ro6hUmP617wC
bevc5R2H7bF49nNILXOER6ousiUnhvb5eaMsYx96iJ6hchpQ4FkMVi0NOOnj
BJXtofSfN8OgqHAkW+VHOG1bRzbwnYQV1Fmw3BZTGH5lBl6utyD/QC/G9ijJ
LvNW/F2lDb+eOAhlRuo4EjiGHmFNRM3NAIy9+EwmNaG/2Efj1Xg+FL1uxAtC
Q9op5dGdlzSp+moLurEb8XhIFDTr6TOV0VoqidrIBPufibN0hOJ+m2BQxfWR
rD/ssMnRj9PaPA25CfHixWUT6tJWywVaKuD65esk+zMt6un9KVdp7YkaMypZ
j/M1HDqbIxc2FXC+EWrMozQfDXuroSboMLpHb2DXivTAW/8oWfPCnIiS78rU
aq3pvPkT/KKuDEzae0l4qEq+s+8ImT32p0x7WEiFdwpg5I0U85YvQJF+5WOR
gyYtYS5Q/rKFBF7xAbPwNu5BvwL/5p/n9uxeT1fv7+Uy0xeIzff2TKIQMo+p
Qxibkk+Uj66SNC0+bTWuIGeDMtB6nMnpbe6x9EUHLOv+K04bLyCb3NajMrcf
1sZV08WCJs5wzo41tXdzW3LN6QfHNJFaDIJEeoK1X9GBibyelX6asunGbWC2
YEj/B4tc5wg=
                    "], "Biases" -> 
                    RawArray["Real32",{-0.006046982016414404, 
                    0.01094768289476633, -0.01573706977069378, 
                    0.0047432659193873405`, -0.004794590640813112, \
-0.00441701477393508, 0.007639972493052483, 
                    0.01084557082504034, -0.005566687323153019, \
-0.0013205497525632381`, 0.014802632853388786`, -0.006487568374723196, 
                    0.009240119718015194, 
                    0.0021974407136440277`, -0.00760944839566946, 
                    0.006094099022448063, -0.0016266591846942902`, \
-0.005242404527962208, -0.012635694816708565`, -0.009575792588293552, 
                    0.012568864971399307`, 
                    0.005971658509224653, -0.009663637727499008, 
                    0.006410474423319101, -0.005092632491141558, 
                    0.0028124761302024126`, 0.005427641794085503, 
                    0.003340229857712984, -0.010113236494362354`, 
                    0.004436654504388571, 0.0058419788256287575`, 
                    
                    0.018462566658854485`, -0.003280350472778082, \
-0.010081307962536812`, -0.0029648032505065203`, -0.00011102357530035079`, 
                    0.0069335815496742725`, 0.013816557824611664`, 
                    0.009950462728738785, 0.022978467866778374`, 
                    0.007311551366001368, 
                    0.0021261130459606647`, -0.022344592958688736`, \
-0.008314860984683037, -0.00019943434745073318`, -0.008403168991208076, 
                    0.0012194984592497349`, 0.003228035755455494, 
                    0.004011283162981272, 0.01198896486312151}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 5, "$InputDimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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
                    "], "Biases" -> 
                    RawArray["Real32",{-0.015191205777227879`, 
                    0.00992884486913681, -0.007910537533462048, 
                    0.00468669505789876, -0.00858481414616108, \
-0.003707603085786104, -0.0015921351732686162`, 
                    0.006122278980910778, -0.0007066000252962112, 
                    0.008964158594608307, 0.0018779976526275277`, 
                    0.01389048621058464, 0.0020606450270861387`, 
                    0.006666568573564291, 0.006086943671107292, 
                    0.003852485679090023, 
                    0.001534137176349759, -0.00703401118516922, \
-0.012214618735015392`, 
                    0.004385023843497038, -0.004440641961991787, \
-0.0024265428073704243`, 
                    0.00453503243625164, -0.008752086199820042, \
-0.004861998837441206, -0.012879853136837482`, -0.004502273164689541, 
                    0.002359964419156313, 0.004534502513706684, 
                    0.009017699398100376, -0.006794629152864218, 
                    0.0019111580913886428`, -0.013047679327428341`, \
-0.0019220622489228845`, 
                    0.006048730108886957, -0.0049022892490029335`, \
-0.0015169120160862803`, 0.007940838113427162, 
                    0.009368786588311195, -0.015916137024760246`, \
-0.0021480126306414604`, -0.0126749686896801, -0.009588179178535938, \
-0.004214525688439608, -0.00006005383329465985, 0.004377466160804033, 
                    0.01086745597422123, -0.011768260039389133`, 
                    0.008027357049286366, -0.011080080643296242`}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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

                    "], "Biases" -> 
                    RawArray["Real32",{0.003958416637033224, 
                    0.004005723167210817, -0.007912641391158104, 
                    0.007184411399066448, -0.00028486401424743235`, \
-0.007075212895870209, -0.0033020651899278164`, 0.003618840128183365, 
                    0.010765993036329746`, -0.0033256516326218843`, 
                    0.0009680944494903088, -0.002772249048575759, \
-0.003420497989282012, 
                    0.0017016272759065032`, -0.001040459144860506, \
-0.007172346115112305, -0.0006041122251190245, 
                    0.0037209908477962017`, -0.0031647218856960535`, 
                    0.009016493335366249, 
                    0.021091680973768234`, -0.0016538702184334397`, 
                    0.0014768631663173437`, -0.010863260366022587`, \
-0.0060304864309728146`, -0.007687366101890802, 
                    0.006995909381657839, -0.00729708606377244, 
                    0.007859603501856327, 
                    0.0004169284366071224, -0.0105108842253685, 
                    0.009919397532939911, 0.003148322692140937, 
                    0.0033018167596310377`, -0.0015713160391896963`, 
                    0.013760658912360668`, -0.006225240882486105, 
                    0.010298637673258781`, -0.006064248271286488, 
                    0.0024536754935979843`, -0.0030491393990814686`, \
-0.0008770367712713778, -0.012365905568003654`, -0.010700110346078873`, \
-0.0012887706980109215`, -0.005197481717914343, 0.0018902270821854472`, 
                    0.005515063181519508, 
                    0.004066209774464369, -0.014230777509510517`}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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
K6PKe6t/0IsLq/hDYjJ8azFkjSfx4rChl/lAWG9OiEgH1xmxgk7VOEy//ZWK
r4Ti51EDqMFcoKbzv4TX/RXZanGp0LR7L5+ttcGsFYogF/gI8i1VuOeWw7DT
vhtuKTcXbpjL8Okl17Bdqwdi9W2InTkenk+eBPqaZ0SvkL9im68Gtvw0gUbV
sZh6MIfnvEkQqx+ni/HjTPF5xxDeZKAC423+iPuW74SjZsSB7cuh8U02uGxe
hdHSSlyunQIZa9fxy5gCOlJuyx6L3OD6i3BQq28VdvcdSjVFvXH/iTz6rbUV
F/WI4H6TFNFbN18MXDOMTxorcKiTGzmPmouqIaX0xVUGm4LG4hvqSft2Z1BP
sY76VMjiuU2efF39j1A3Pxq/Z0Zh6c+9gk2dNqVkBWDgpbl8bYIr+pmb4auP
wHJl3yF/QhoFrfwP3gtXxXspa/h3tjFdnJgDb4+nUmdzEXyY4Us6vY0h7sJl
mpumwwoNx/ntMmXUMNTATdsQ7RsGcEzcafzVUwZrVl+E1as+CLkVGmwzfS4F
1r6jQovL4lTLJKEe9sGaV2vxmde5f25tQQf29+GMkZ1woUud7U0ihTsDvFl7
2x+6uzhLWj/oMGgcKKTngfN50AkZrrzsSZsHaXDp0p4ctDqGOTtcfPkjG5aZ
TkL5MyHgsnQOV8zyx6s7FOiYrTf1vVeEL6zKJTg9A96sahCdDY7gnqU9ePdz
a+GSih1FLntMRsa9+PwSQ+qmqoWfRtSS/N1TOLfogRDgcBDyJW7sd7VW/NH7
DFCytXhx32tB76Mumu85SvrzztOrhyHstHOWREFxDzwe0iwkxfuhjmYhW5/S
FyXuMWLIxlcQ7LoAyz70IsejueA8Ygl+KmBY2/MtBagX0/J1zizfcoUmu1YJ
Vco+VDTYBwOrhrFRtIROL/0iCKsiwX7icbrQq5UCAflL92bQbFVFnaHjMfBW
pbi7ZRd4XIjF8s/vhJZtNaLPzqmkqS7HxdsuiyrNETD2bDlpFT4Rwh+P5Z1G
BiKM0sX17zzEiVkeYmHBd3jY4zgu1LbnjS4hPFsnFt43fgEl/avwX+YkWFjj
ii7mm0Ct8gLppNyl/iMjOdvdhMa8arddv7uUL46Ikzy+okIT8zvFqx/fU0an
Muo0+OHbI/MhVsWQpn2fzv8Z+tPEwL3wsLLM7k12EC+fdRquvoyD0aV1lNox
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
                    "], "Biases" -> 
                    RawArray[
                    "Real32",{-0.011454882100224495`, \
-0.0024466600734740496`, -0.0062698060646653175`, -0.006350464187562466, \
-0.01420646719634533, -0.0020564538426697254`, -0.004923837259411812, \
-0.007839137688279152, 0.0018522355239838362`, 
                    0.0033349047880619764`, -0.005911992397159338, 
                    0.007079094648361206, -0.008707951754331589, 
                    0.0037979090120643377`, -0.012772182933986187`, \
-0.005552406422793865, 0.0018411882920190692`, -0.0027217422612011433`, 
                    0.002663832390680909, -0.00036231084959581494`, \
-0.010474298149347305`, -0.010254411026835442`, -0.001265915110707283, \
-0.0027711489237844944`, -0.00960750412195921, -0.009026489220559597, \
-0.01522766798734665, 0.008727367036044598, 0.00820887926965952, 
                    0.006508607883006334, 0.013287140056490898`, 
                    0.006551782134920359, -0.014525720849633217`, 
                    0.014075977727770805`, 0.013234032317996025`, 
                    0.0066650933586061, 0.004600803833454847, 
                    0.006622860208153725, 0.0047165281139314175`, 
                    0.005374656990170479, -0.0028713305946439505`, \
-0.0045578936114907265`, 0.0027967377100139856`, 
                    0.008611409924924374, -0.010763956233859062`, \
-0.009074881672859192, -0.010235066525638103`, -0.008815506473183632, 
                    0.001875711721368134, -0.003190170507878065}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "8" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "9" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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
+0eJrZG+L2TFt7l9xh2otPSt0N/aCHtCAsDcJwV3VZzlqqM1uODNKtyGmzbU
2ffDruiCGdvWHUW/rwdS3S9b5qYyierlvOHoTUeQkq0kVfn5bJR/LN+bew9e
Z1QL7+8mzvKnL6V/t6LIiz048nMK7JcbYTt26BjPndNkivpAHk8UmdryzWzv
Rwl21HYQHm6PhR+zb+GhDAGzf+bL+k9H8ravfIWjDsbQzGMJuODhN9i1sQFO
6N6iJbvi4KeHOTOvkWCibn54KHEYffUSZQ4KCmxqWTsnn30Do7rjMPqoHLmv
P0SmLBNuGYtQZt9kqKqw5Zx2KlC3Zis3udKN4ZJpbO6CozAs/xOcMfoL2T/G
s/W355ENDKKs1HtoVFNn2uu0qKn8E/+uNRnUHM9zap6PYfOsE/D6sSZT+7Ef
94dV0oH9ohTXrMxWNUxirrOb+Lii57hhnDjXc+warj2zk3VmVbKvz8ZQtLoI
Nez2RKO5Jfx1qyJIerSazRCVxAkFVTBY7cwqpV9jdlgFzFslJpTZ2IGVH3ay
yDInwaGwu8iJy0CQ2QI4MfCASzp1Ab82OlL3r614b14p6Yas45ZDOT+iSgA2
iasoK/Ed53nICoKPbKepPdOwMv8BqCwYTe1+b/g2j7Wwynose/HiMhv6oIoK
kc5gM1UNjWLW8/l5JUD3/IRrpq8TcqvzMM3HFV+e0cCFjcpwQGM6ZOppsKvJ
eVD+3xiaEryUovUlsVRjBWaFjqH8ZmM2N/MCVm98jUftH9JME2dmrvEfZx/d
xBYclqIOPxfB/IoJ5KLqIfjUuIWPmnMW3NPKmIlFNyvRtWSJp9L4hQuPsp/B
PK5cI8Xsd6exVxe30VurOHxwTh5XXzoBPzucQEZ+I2xMiccpW8Owf3McbA6s
hBOXs6Db7yQfEJAFep0T+Tu1d8je/YLgunQ7GmsGwHNpN6447A526p6Flp36
mHFVnBojjmCFTgNvNW4+1npl8gMFWrCieTJtebIfV4wvwCWXxXHGFm/MH96H
l+QewMqCmXB0n4C5tq9gh+o7+f1K8fyRKwfwYsks9kFWmWXnRfMjpk6iC291
2CPrI6C64N8tDBrQiU5feJRyhC5+0ue6tBNo9KS/YLC8FlLRRaC13AnXXHBl
66PPs6PTFEnhVzIZto2kGR2n4M7Ki6AgWYyeVcMEYYtSuFyfVfRsqT0pWX5C
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
                    "], "Biases" -> 
                    RawArray[
                    "Real32",{-0.003890459192916751, -0.009899696335196495, 
                    0.011075889691710472`, 0.012002960778772831`, 
                    0.0005898661911487579, 
                    0.022760450839996338`, -0.0017692804103717208`, 
                    0.005867197178304195, 0.0043998039327561855`, 
                    0.014974010176956654`, -0.011614223010838032`, \
-0.003612771863117814, 0.0018114635022357106`, 0.006100725848227739, 
                    0.024660823866724968`, 
                    0.0019417561125010252`, -0.00084365822840482, 
                    0.005112693179398775, -0.004272230435162783, 
                    0.0022969264537096024`, -0.014299198053777218`, 
                    0.002154908375814557, 
                    0.004296044819056988, -0.006315417587757111, 
                    0.0054327878169715405`, -0.0015854031080380082`, \
-0.012183688580989838`, -0.007415319327265024, -0.003730680327862501, \
-0.007657618261873722, 
                    0.005530729424208403, -0.006119224708527327, \
-0.006294914521276951, 
                    0.0025990866124629974`, -0.02020091935992241, \
-0.010795877315104008`, -0.005420763976871967, -0.008827952668070793, \
-0.006055284757167101, -0.0057368408888578415`, -0.004129256121814251, \
-0.0034777687396854162`, 0.002275161212310195, 
                    0.008353485725820065, -0.004834156017750502, \
-0.0074602095410227776`, 0.008196385577321053, 
                    0.0021919775754213333`, -0.009609933942556381, 
                    0.01513321977108717}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "11" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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
+jl3EdLKh4L26mzhq3Qz/B82+hvl
                    "], "Biases" -> 
                    RawArray[
                    "Real32",{-0.009307891130447388, -0.010295778512954712`, \
-0.020732589066028595`, -0.013359702192246914`, 
                    0.0020933884661644697`, -0.009114128537476063, 
                    0.00702575733885169, -0.03471606224775314, \
-0.001055296859703958, -0.0015444025630131364`, -0.006065328139811754, 
                    0.0008057019440457225, 
                    0.006259543355554342, -0.03326950967311859, 
                    0.013674905523657799`, -0.002381682861596346, 
                    0.01283654011785984, -0.013366002589464188`, \
-0.0031081652268767357`, 0.006257378030568361, 
                    0.010249562561511993`, -0.0012249996652826667`, \
-0.011047985404729843`, -0.008879889734089375, -0.006087625399231911, 
                    0.006269737612456083, 
                    0.006964119151234627, -0.0128671545535326, \
-0.010994422249495983`, -0.0005347082042135298, 0.0031243343837559223`, 
                    0.01187820453196764, -0.0052745952270925045`, 
                    0.014310749247670174`, -0.0017243404872715473`, \
-0.00924238283187151, -0.018464185297489166`, -0.00623256666585803, \
-0.0028044525533914566`, -0.003753631142899394, 
                    0.0010286940960213542`, -0.005507062654942274, 
                    0.01283167488873005, 0.0029130084440112114`, 
                    0.007418884430080652, -0.005398102104663849, \
-0.0023388261906802654`, 0.0010039197513833642`, 0.017699776217341423`, 
                    0.003882001154124737}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "12" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "13" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1:eJwtl3dYz+/3x9tGUyklSpNIkQr1OkfDTEZCESIkDSO7rEJFW1IpiuyIhtX7
dU6lQlIZJTRENn2UPcKv73X9/rjv67qv+/7jXOfc5zyfDwOf1bN8ZaSkpNb1
7N5mLdnkGBy8ZIu7wv8Oy5cEjrIK/N+l1f+vMmMjvLQkjsIKFzAX518LFZ6A
v8Ji9khPwajQFF56xwbXf+jJt8a0QU+zZjhbPhZlsvuN3VnZE9n9CsiZnUL7
lkb7gKVb6FNfgI47NdD0fAzzttPgN2gw5jpkUT/cy3ev+uH0DmV+oiCDKQ4j
2XCXHxtXe4j9bSexy7T9NKrgHyxIMOT1dqpYuv6eUP4XSP/OIt6m8hsyLWdC
zrVrEDr5ohC6Qx7Pbp2AN79osYDGvOfMYPHNEzt+e7NJ+DrxFa03PQPutaXw
ZEUGjF79Tez5+5H4RdeNFIufgXSTI7/IOCbknxzO/zqMYcnXEnCTLRAnhw6k
89PiKNinVRyokwhfYozYY5opFH++Ch+XhWHeMlPWz2qUTD1wFh77GaCr8jfI
nfhS8mzNCtRe1AonMkrF6zWelBb+AdrOmfBtVmSToB8wtuo4Tao25/RTvXDY
8k46etWEvFvyBSvNDDAZ8EGMNuzN9T88SWqFMabNKoHbA/PARc6bxt+tA7na
Y8L08gnovOEGVRgfE/tvcIVjVxL59rXwsWZFwXz/51zKT1Om0dWFgl9+GuS8
zKaJK46IW0N+gvO1Migw8kXHocvJLiSAC4K1eaDiHN63OhVN3TrBJm0gr9J2
g+8KcXTz0Hks+3oS1LQE+DHjBUVHVV7zL0OQ579063CXOCloAUSVFUFuUG/x
yawMCLtXBBaRUqh5fTEVa90VAvd4Y0dLPCQ/VoVl+vmi6UMV1EzV4aioF0X3
wpOgeKkonj47HK7M24PS1qnw96IzVWvriB5bZMB3RNG1jS0P4HHpToSrBnij
YAQ7kAZ3uSwTf2jfh6tSNvwgIAoqfOZR+4p5PCg9mmQapLnPuvO8ZXgmJLyI
A/s+uahWmgwb5Wbi8xMW4kwzBcpf9Voy9cRbcbdxmzAhzYr33g+E7PqJuHrJ
Fxj7qz+OUHpLhrH70OzMVD4y242Pf/8kjt1dKgyuG4ZGW8P44R8m280q3Npd
14zbS/DR4XNcYH6BUku2iOfOXaJ9U2Vx8KixKMxK5Ez3k/Rz3h56XlsP4vNh
aOB3H16NuiDuffgAFhleZP1cQKX6Spqn3YvDKnJp+x9dMs0Kt5/sYMjY15fL
aqKh49F+9ppnCnN3iZRWfZ7qI9T4n6oKRjdpQO6zgxSuYorLwpfxO+8iQdsq
TzJFxZC/jnhGvSRSXKN6Qsjk80Lo7QHUP6sIpj9XwJf7J+Kh4G9g7fqblPcY
YVPoWG7WNOFZqZfgX5YVHpjSQStmlFDgo3OwyeIineunR4f6JMOe3PUY5yfD
AfWTUTrFmqXkaqHu1Vx4+WYmPc7ri6c3LwalR+rQV3sTj90QzqlfH0DjqF7I
Kw9L5q7oy9kGP6k9W41XSluI7/vU0jpPHcprPEl6Ppmg9PhWUbrnHuynpIVz
YDZ+z9lJUsOPwcjyQhi0Slp4fD9ZeDNvDezw/gSH7lyw//QvniYel8H+2ha8
avNn4V1GHn0t/wDP9vwSpfVaRY/6BGHN7jl0s8QC4pZ6w1svG1Ydugp/7vdg
Xd3D4uz6GuFD3iD6i/JoWW2CP94Vi4mF5ynpsDqOci2BER/TyHjjVuo8pIYf
IAvSKuKFOs/btCIrhtJGE0h3x3xsKEpqO62gv8EKDPqaQacV/9Kxi+rcnuED
938fJq+xKvgwtQIcdxYL/GUmuE9Mp/GGIxGqAjGlYhg7nlTkHS/tOGp9A9nL
9WbvwFmc0fabMmb4w1xTJdwtnw4v7OzwanMaTWsYiZ474oQXPsP5QHg1ZraP
AmfsxVEpNqQmnQLv7eKpJSbLTs8hW7ibvY5tlPrRN3cSbC872Kk8S+PCoEia
M/MmX5ltRsPfqsAhq3eC149ZtP3uJR5xvIpyH9ZAR2MsO/SOAbmHoUUPlf2E
Zi1ZvnLwL21eOwf3aetT9fKFuD6mD2anrednMb9AYcUcHiHVk7Uj/1LJud58
WrJHoOsPRHoZhebTB/GEXwuE2Fp9zmjS456PHeH8jvVw4fps/DV/PUlr5ELn
9wdgOkEXz+w5KOGPDrwqyp7V7k3jEHwCiseLIHCXEdO8EBr5nyL7Jc/m/nNr
6JZnT+jjH8kmHxwEMd5GWPF1CtcE9sGrf+ZwRtdD6rW+jG5HbqKa19Pp/MNx
PEXanc6eek7eI13YbOseej2gVbhwezhleCpy/u1BSOO2ic0uoVScG4LmC27S
fw9/kkHVbnGiUw/+7K8FSjl7hKY+WvbXVeVQYY4UP1cNQylHf16lcUUYvyIZ
quQN4KvCEGHrQA/OCVqK9Wf3QJ5uEb/5HUO5H+VIoXElH1hYRNOnWuKaOi/a
/0ubar+M5fCH8li74bOwsO8yjEhKpzxLe/53qxGO/TeENe180H5PEh26bYz1
ptvYHAehesI4vu9fLHhn9yXdHVsgRu2REKsVhZOayyFO5j0ojHDHVw0mFJht
zGE/FcCzcyiWFGdD673T9gs6FWGg9AUx6VyaOLUuSjRRahB9qZga7XJJ+Fpv
//LPIFA2LxLNhp3iYYoPIHDCc9gfVIS5Sw8JCs6OEPV4BHac6s0nvCfCAgNL
KsrrDdvMl4qwpQ9V9w0EnTEpGBw8RYhdFMNLtq2Fr61WmPvKHt38pKFmd7zY
4ZjDg2N8IUrFX9D9Hg+eAXtYsUcXHNqViaeMI+y2izJ8QLYf/ytbxTeXW+PS
KdpC1J94ynHeBwvat7DxKGUIFD3o38JSWnbpBG2rahdunFBD7cgH8D7QAjtr
LKEocQPr3t9E6e3BPKJvIt3JWQY0dy+91ymQbNoyg9K4AtbI72CYOEb0+R0r
tKn24rq/Pyh/fA75Z2lSfMtMuny/r+h7cw84B0jB6OivoDhwM3iYhLP3ShvM
SNuNA/9M5/1lBjzt3Dl6b2ZIMWuyabvxImHOmB5CoUQGFZZORovETKjSccVH
i+MhZe5W8vz6CYamJlPQ1KEwu+EvaJqP5PK86fz8ZYeww2iysLS4jSabK5K2
4UQ4NsGRP1sswEDyxUkRmhSyugwGNUfxi43n0OOPHX6eOJ1WZv8T+6nJY0Cn
BQQ9dCbDASVwd8pZ6iUeg5etd9H5UH/M+i7g5LsK6H5rM9W+G4mWnhPAQKaK
PK0aIO1IGEydnYxZ20/QrcxCPN0vgp9vUeTThw7xX4ee6KK6kI7+zBdWJUnh
yNeauNOoTfQr3sZuUiV0JtHF3vezAQq61hyy7ozwwWsYR414I/oe6I3Re+Mg
3no8VmedoXc9LNjTo5z61RTAndqHMK9uJz/OdwbZPX3Jbts4DuiIgt9dXyHx
P0vMfvWZDFAeHm55Z/+vfwU8XGvD+64tpYneNbRVS5Uj9vaiaS3vIN1rGllb
bMat91byQJ914tMzP+ClmgoeyHstNIyupLsYCa2BA3FP9C6oWJgN71sKYX77
IlRMDxMr354RsyMbqeSHLF7zPgiXHTXwTeResNL6OPbksy0U4RaGD5NjxKAF
vTE17BRe9kkR94SYCtF6LvRw/RlW8pyEbo7mGDwuHTat8+TDd535gEY9DG/U
gC0v7QTpi4swbp5Ihv5Tcb21NvzcIbBdoyG42Ydy8Plv4q4dPUjRzBhfK8yg
Ld92wDaNm9D4aDRsnFMA0xvaxQpzHX527lfRY6MENApvE9cjwvdQN7L6rxJj
5hvSskRz8l+3io3PaINX/U1oON0X64rncerRV/ahAYr4679u/WuMo0d3PsGP
8zcEnUUL6bd+Mp1IDhfvy8UQHjLj41XuNLOxEzjiEzj+Gkn1+wLEC0flcfSM
pqJ5U2TYeRyD9INweu51nKY2/ID0Y7rsdf6n6FHsLHnaEs3tC09CW1g05fzQ
5IZRk3mXc4kwY8QbeITqvDDYXNhgewGCZ8lh0skovALdLPBgOiz5e4DOximz
tNYBMvxwhj4/DsUF12PExB2jsSK6n+jmJI0T356GC+4HRSnZL9RTI4yjDCPA
qqkfP19TCV1KEnsBZHG6VYMw6UeR8GR+LsuEp6KK42z+bbbR/rZrIExuu0az
ZzlAlc9L6hUeyJkXUqhWosQXZo4F/8vOsOa9tFD+2I/83E5Te70t7itPxfX0
mO7vHSQYvbPkl5XIXlq2PHb+W3EBRMCnNDOx2SGc7QYtosxLzRT1J5d+pUXR
8pLe/H3zEKHAOUPU35UB2/QAliXeoBda7WA2MU1sVGmg4yfjeJlRiPgj1RRh
XzNdqwiCAVfaoFQ6C/tV+pKcUSfdkRoPJz+3UObL46zR7yPN22QJcptuwEo1
Je5LVrA9cTHf8gkmzysmeKrdAc02yQuT9w7gju03RZnQKIz5XC3qRw/mPfHW
XFHmLV4OG4ernvy0t5yhBSPkDWFLciT8GO4uaOVHYXFRIn7YPQ22Z6jzRwMb
DqrwZKfTz+hd3VE66R8HM//2xPfBz8U3H8KxujPVfu5LZ9zxN4DPP+jDe0V1
dM2UQtUennzjlhSP2neQ5wd+hjlfDXn0rVGUcPo9aWYUMeqXison78L0vwv5
zvA/4O6aCD/tKu0VJj6wZ8diGmDyQuBvX6i2pp62jCqAMe9a6Z7xBmHhoiX8
M28QL2xPhNXKh4Qbu/fRlc+OFD3QiqLSnoL66Uo6/nY7m2yV5bpPYzg5R1cw
NWgBs1eVVJe4jg5syyDj92+Kdl0x4H9XDTju1hFYYCWFlZu0sMeskeirkIaW
m3fxbKOz4uGV80D92CTc/24L+nl4oI3LWDwy5IYYP90CdDRfCgmv94OPjgcP
TvYSredGg9fkYrBwuglGIwP5VNcxoT4wBQKCnWjQ2+Fcu2YfXAs8S9PmRrBf
zVeh61MtVLqbwVlrZ5zRtlN8pPkGqrc3wENXa17z6zZdCe7Bt/tcQrW+Gwiz
7VjUCAdhzBKMbjsCY1Za4NyFFVDvb42/2mrQ8+g2cO9ZB0ucdpGs03DIWtDt
ya+vFXZuTxHM32Xi17PjUAz1o+p3bjB9siEmbDYj1zGbMfy3HFv4vaM9P70x
cm8ymPVX4fenBBpy4axofH0Wm5auwr/zTkNB8wRWx3LuHXmcpv3yQr7YQIM+
9mSbuBK46GLOFmG7Yejkl1DWZwoZLJyEV9VCcEpVJtwLOkRbNCqEabpyWPev
lCy33hdP6Fyl+2MsyTFqOV85P0/yvta3yPtsPWls78VDQ07grw4tVFKeBsp/
XZguRYFV+1eYZzsKW9fL8bYeGti+N4HuJvTG0pWbaaNxKdzyluLkYHdRdZ49
V66roe9NbbQuxI2ijt4VTZS1EWLn8tON2eR6sZv/YnrwN4VTcC79HL1aN5x/
Sc1nC4cJgrmMKUuVOIt5ur/pZesowTwugDp6PIHyiZF8PdKIl/55Aba311LY
C1mOUr0gyKqvwfZe48hJu0VS6BYn+hdHwtTXf6B32xc6uHoFrgpYDfvX7YaF
5SMlD6zXgLniTAwaZQLOW0thf6kOOeWsEz9utYZTpU6YV/5RMtKnlpbKaXNt
ZRK4xGrjoSWryHP8bpjU2SRpM5fDYUefUk6Njhi44jqM6ZNCOw1kWCboB43/
rYYBv9vov0GaOD4xFHo7mGLxi28UaNqD80t3EBw1ha3Zv+HeoAiYaBsP/Sc2
S1TKTsGj0cthRP5OivSUo1UdpXTuuR89KHcSot38+cXwWKGrVzqlPrYUtr19
CAYn5PmN8RV7FyN1PDopSez/Rh6FG6a8wWIGlv6xgPulXUJN7Ufh2Ke1oltP
Ke59YyX27TzPEbZJdPbCVPp64jkdv3NZLL84E3ZePQOqS3by9p3hkLNDViLb
zVB/F6ny97Bq0JGxQY3co5S41RqVxxyGuOGK2KCeTVcGD6MR7pVitK4Pj9df
0P1+GD51r6OoTkssz3xs79DeHUd/TXR76M+Zbkm0xVoFM+Ia4EfLb2o6Noyb
8yth1Kmbgkw2wRfTsWyy9osYUHAP2g1LuOHMYEj3Hgszo7OF/vFzWGfdZVh/
R2L/Sl2DL/TXQi4fy9+aN0PdsdyxQW4NgpuKBwVGjoXQXUGwTdaLa58PwT9B
XvjPbQsab3UmqVupgsl5eVym94iTYgUw3aLNy/wiaYzpI2rx9rJL1TtNfydV
ClOjD4J+2QTqfJ4AebbbOFyvGqZ1S2zaL3lsX2pMG3zuCgZXP8FM25VUXFAr
9vTQwa+aW8SnrvtIfX8qzaouBO3O43R733AMmbOXrAv98G+GKY458FX4VXBH
TM3cjet0uv9Od86lV/6AjjZ1TK5XEaPUEL2HHqFTfxzQVc8Dee0ejA88A8UR
idDSLkKmzg06UT6S//sUjTVPcmFgbg8uSvpI2osBVWr6cMXQQrElZjkfXDYJ
Z07tzWPsx/DKvE1YmbuMq1oTYVxsENsknqcJx+VB/mwoRsVLU9fSXd2eLBJW
jhtJBTH9MFRPisP255OUbi28XuPPP6T/s3/V2im+iOnDS4IXUmmJBp4xNBWH
H52ED70HUWjaY9Je5sRzn0mz74xUmtD5Hn5bTqbsVhLWKI1mu8ELoUCiwFnf
RpP5RxlBTfYgRyy9TP0TJGBU20nHN9vikI0GFNqpxX+b4mhAyEisvTEYG529
IPvcCB5/eAYrLVIi3wPvxCGPlOhLcCw/m3AJkptMuG7MIXiydCr+zpuOMkKi
sGWHKmYPllDprQl0JaCCXE+eYL2p0fAjsJS0f+uTlMpI/qW+jP8ltQgHzwTg
P79TELckEi0eRMDdgbkwvc4VjaUqhFt3zDEmoAoeVL2Dw1kOpPfyHA0L6IE/
W9RxzKYX4pa80Tgpzxr87WfyRDljij3eC2+XdAh6t61JZXYZ9dz5QNwaXEVP
f2nix9QJOGBYJG1OekbHX1WQ4rtqWOCzjW08dHjYgAbabDGQ78/cBx5614Xi
DDmcOFKZVtQECJaumTgtqEp0slSCezISinNIJPeaULKc1J8XVznia98QMGxN
kbT8GI5HI6dSyPEsett8lrQmVpEmfYS3l3TgXtkYu7lKo4WzhfHUaOsGRyW7
ucN0BNyYJUNjn3dRZGVP3LHdA2+Ud16rWVcIRTaLxMv6OpA6Yi5inCp07i0S
e1wfx4OOF6Gy1BOK7zyPQ2K28OkqG077EEWelr15295RuL1ZD4Xh5dCStZQi
LlZRiM8pUr69mV3vDIa+4xLwkMtoSPG8Bj76u8fofFMUVG5X0dEMJZiSfxZr
7XVIYUSnMGqzNEYvDwentRVw5GIO3Pq+gW8+NOU/tnrQPnI829r2FDJ+XcRY
MuZk3SbwcRShZPMbcL1rKJaO6i+25ryxT5ctpFNjAihihSqOV9flmlMRVF8L
/PagAz5yroNlR2fwkUW7RZ+R8ni6+SVotVbDpqEaYJvbi6e32NKLZ8fAZNlv
sG2OgtjkMrLP8hNCa64LX9a8lXj2jwafaXN45SsrHOBlw3YxLbReW4F/xz0n
+5K7ws/SXZD033Ph+Ro1nF2vjyE/iuxbV0TQ3kf+eOrEECj2u0Qbn+dSqFYk
PHNT5sYbJuzST5n6b5Pi61E7OeHgN9FfWxeKZLeJG86ncP30RDT3MoZ/9aMx
6Jou/Vh/FiKnytL+khk4tEZK2BCoyIt2vqQfizXQc78BHll9Ekk9VThYb0tb
q36Lvhvmc/mhPNLZLCFwfwfjbwzi/ZqFYKinDBcuEvGzDMms3BncOmEjxgmr
8K2CJYW77O/WVFdusp3Km6f7wdWacdy12In6al1mi4oPdHapn8R8eQZo/WsD
H1NLniK3jK/uT2ErWipZHmqLlqOt+P3UGBxFGyU7n6mKF8v3wcK3TeKSr6+p
03c+rX6cDiHdfs3FeBiXKSXTm5p13P7eXhy1PFo0X2wAXYZefM3wqmCo/5Xw
jg3/UdWn6uwNQiHN4cDVO3mOy0P7pgkJVPl6Du4+GUZYdUmiOmUJDXqVJWim
KoxrDB0jpuTmQlyJK630PEmVky7SwYBzAjn2Ygs1Ke5KrYDex3bC7MpEUfFF
Atv8ZwLya87gvnU+6FO7lnzy99G9TbkwqqmaSl4dpGh1DZyyxx3H5IeD1WYr
XBepIvaKukWFDeHQYV3d3SefIMFbDZ2emuFMPQG18DJplQ7BFYaW7JSXQ6u/
yZOLURfEHl6PmVYoebfxFLXuNqOqjBXcVr+QcKYWhvewhhu+8nx6qxf1uaXE
8xf9KGpU34/vvddReI8cnnGhTsxuTQZ51XQKrH5Cbp4OOOxAJ/j00uePlXW0
/sZOGvj7KK087gwzB1dAR0QvOHjYE7blHoLPL54KzqccqMN4IU6o+QgBOqZs
c7zRzttxNWv7mF4bv/WZ4EZpbJV4FMrCd4uFL/KgIfO+MN0zhKxX2pF3+0zy
tcjAuOlZCAaJdHr7JcyS7pRMCk4n52ftVPzCiZJOrBUPumsLOiaZVPpxNqyu
ncCvqqz5kZ8dbj1zgWratWn3s8vi+c8fwTt0NY8+uxrulG+gtZNtaOusV9Br
vwXPGz0ErbWjxOEpP+3vHhhJCaHFZCITSzMubqUn9oXU75GVsL6vOx7untOX
tQuFpXoGYJlSBKPn7aaP1+VYXnoZZ/UdCTtinuBJMzl6/mM5b8hsE07uLBJd
hrkydM/1q3G9ecqXgeiXOxkXPJ0teJmlCGnDwkW1hyehfuYYVurudyspX9B7
KwNPZ+XQUPdnkL/1C1wO9uTMTbuEprJcSPHWw0+xbrhVPo/WLl5Itbnjcfu2
x3D6bzqEvd8Bm3y6oEq5Pwy4Nky4vy4UbbQaQb9SBnycetHtVdr23gU1Ettd
JvSzp7/Qx+g0/FVSwSU/TfmO5QPwPdgmhkVH4bUt6uxv1CJEjo4Q5UIyRdh6
BNyaNPlvxg2ICNkKA+X8eMGjFL52vNs77+sPKlV7SCbOUqy92E4mSdvEjqVN
kHJPk1fIRcDHwwcE86GWGH0plt+W9MPdt26KqSWxeCNfmdyyGgWbVcE8afJ0
+PllMb7TPow+C5OL4h0NeUdcAoTc95FUh3yCNNkptPqPHJ4u+SO4ZvwnuS9T
RttGjKdeB+7D/cOyuGl0Gm8238TKJhJI61GKQXn5YGmzj5o90slukBN+2tQF
tXgGHGz/gppeCyj1csfttVV2oR62MOPiINS/sIxL1vlh54U3tCjWGfs1Pqau
Ucr8SS2ftsuuhadedyhjQiTvNE+iivX19OjOTtyiL88/O1RRGHWQVTYJtP7f
WTDdmAiC6zBw+P4Rzht10c1WDZT9vUIcMUZRoifpgwXDF3C5JsC/ituk7LMT
+n8y57rkWTD82XC0MU6FoPZE6l9UQ2NMrsIlCzPQ8ktnpeffJGUz71FiW7cO
GUVD2b0HVLe/GBN8g2F07+Nw1zaJX2u52+86t4SN3n+E5JBTTHUKYnPxXfF5
fTFU/jESXHrf4ZawyULcrwiaPM6Jw3tX09mVCpzhpY6Ky2MEsWwW9/8+Fox0
SyF93hRuDOugvl3F0N56Dv8ql8Ln+Dxheckd+hNmB3pXNbnDWA7Xn43GuFpV
2Czvy/6lPXG+dzQFXHEVgoKOUsE3ht/xBnhoYzGo5t8A501f4VPSZrrkZE2f
807QtA0uNMClGf7zceS8acNgXpIOdM14RG/GX6El6VlwVN6EXzQr0r1lBZTi
ns33KvuKkKWBMll7+UqILuns+Ch8X6uGl4QgfNa7SzwaooLD0+1QrjobUrpZ
yjIip9sn3aHw8fX4c+AxIf7xe7o9djpKhQwjo5uLBIXJ6/Bt3A9QGa1Jszde
gMwrD2i7TRT9i3AAJ/V+uEcjBVy37YTw3pvhxafhnOEynOzDxvGGrlhwvS2D
XhraQuCUXbSx4hyktVxELY+xvDzBGDf6D+Xq9pO8ofUh7MjZww45Ovg22Q69
PFx4gcJP4XrpJyHg2wye5RKN/SaPBMUj1yUJs/+JVntmw6Zl+8l/xF1h+5L+
1PTXFVOSRfIZ1mT/9d5NseSQktil0UWfh7ylhGlPYe+qBHp2uEIoU19L991f
QWFRByV3s9bsSe9J/8I10nw3GPT/9eHzi+Jgvnlvjv43Sgy9FGQ/WykZvK+G
0oemYoooDccaXy3c4fdZaCzcKwlIvEl/nNvpquxEMaltNqfee0nJ67v1ybq7
D7t9kca1OWB9JpI1/12Eb+O/gdXTEXghNgmO/xrOsXa54L/fDb5cjOE2RVU8
OFECN8LWgX2rHLv1W8Wly9WxQ/YkWC0QYHqGJeuaTcNG7x9k7p9DSwIkrG2/
kAXXeNx/LF/yTsoc/9Qpg2vMERg5TZ63C3Ml49zGkcy+LDRROEw2RRY8o+04
bVCRxpSofJIfEmGfNKsFXw87DloqwYJfYSt56k7B/Jq9olvvUvq8PZ52mURx
yQcDnmN8gAp0G3mG7z3heaIR3mt+aaf81xL75AxkjwGjUdJGQk5Qvph4ZwXF
mzeAuu4Q8dyk2fiaD+P13a486P0KwevxDlr0IAyqZ1nRdo9CWqo5DZN907r5
w5haYRgMPbZHvC7nBB9OOLFSeQ5XvY4XIq4PR7tBUuwQb0M+WeeFA32IZlkk
wLWLa/iOcySVPbtGatPy7H41OKKSJEuycoAryncd4tcTrXHp4Ft0e3ohGBwp
F3c76MHDOilevEwNTfAxrFx/mjf79+XQP/9ATTEW0cSHtTrLitqi9bBcTx6v
mekwW+vSmbl5cLc2A2ZZhuHSJafFvZk9hYkFK6msPR5HDlmODUFL6YNGuRDZ
sAd0rnfnsb8MXv8dCjqrg3HEuW9ic0M5NLxaQzWyYVTSNIcdE5wwM3YU28JC
HHHan1tddsGR1iCJdvwn6rm2Xph08DglGdZSkNdlyhofA1HLE2nz/IfCgqYB
bG94TLicXS8eQTM2DKijyT7LWK2x1i7m0V7cVDyLz7sPwJwps3jH3Kl8ZVI+
Pu/1AO6scBUariRT7NgjCLVN8OmiCtlHy/Gmnw1iptoie+0jOTQ7Tw2HvsmC
yR/qwHK2Jn42e0BJ5VfBs7UKLi5JggnNIiRN3MTO8ffEnz9b4YSuPVfPbhKb
cg1A8joLLIKTYN2VfihzvQCMpnmhsVsMaSfEwL7ofaSrP0os7nGB0vU9yPPx
YKips0WDEydhkH06XTjSKghvjUHZ9hb5qvyAPxsH4tYZ1zC4cCbJHKkWLS/n
iedjr8KY+9XU5d9Cik6W1Dy6N+7GVhgplY4rY89R2bYN2JXWAH83awrfRzjD
W7lxGPHtiZC9UBM39QzB0UZyWG22nJQMovFy3iUYvOAdXHcg+Ha2k0acdqS2
fBmx5pAGdLz5LOReKYXpGz3YqUAKVXsGQ3lzPhWIhcKwhltC6tpKmHq5HVQ7
ZHAXPwa3o6bU8q6RXh+uBvn0WPoTcgO2vlkGtnQZQieeE54tviQRb4XhpOYY
smieJBxv68VLLz+Br/ouaPXRlHy0lOik9QTclbALsnvp8ss+r2DE2wD70INq
vOalrGBzoMQ+aru/sNfMl8fbZkrCGyNog4wF/NQLE1bVaeOTHtupKcObEjqO
Cvcq/xOGLX8OjwOl0CJ4CNW8WsvfbqTCsb1n6LycL61aqIAp7TK8+u4/krVf
CtebQujZ4Dxh8L9XwhubcbisaSkt/tQGaWGHxYpfVqhldwd6hM+lldKG9PRF
nmBtXwJmcTmUu6hZGBe+jB6c/QlBG/cJodKD+WN7NtyfMwelHA0QZTLogPo2
tjz2ACq2K2HVyR7scLNBiC7YIC5v+Er+z2QxrO9wUvFMhqpx4/DwSitBP9QI
Zd1tBcfmLtii4wtT70yn7DFWvMPYEk1nBcK+rEG4SSON0iKv0ME3Clgbmw7l
uxzo1qz1FKX4EvaO/SwE3uvJGm97wYIqKfp0YhbEPLVDj4pwGnl1N9cvXGxP
Pj5Y32cCJ8JnktUpEXt/fyWeeVHLdh4SksT5iHf2C2yVPYKUMQCdzW1wvs0R
cfEdV2gx86b623MFhYVS6Ks4jG+VhvG3z3oQbKKKMnpWOGG/NVmd1OSBq+YK
dmviwMthORT8p8F+CZXCE+kWcg+4S43/HYFv03ZwzOpf4CQ4odf93vz98W6U
a5OCO0lHwdt4Pbw/n8aDp+yl1rkT8ZjLXvZt+UJqVk/o/s6fwuA6VUq8KvCO
e9NpcGCZaJWuJ/GTG4mqb68J+X/W4pX5wK2TUmB+UCH0k3Zk1ZNBGGXcnecH
mZCXW0ludvE4zeQhhX5U5vgnw/gPjYfzZ5X5d8gPSabnXbg3KBgKtZQpy+cW
fHj1BxpcwrHc8Sm87GHOqjmqXD60Uwi9pAdrj32gpG87IdJBgdVnaEKwYEAP
YwtYvk8KGcx8BrpXT0tuTp7Db208Wd3SmW12RvKjafrYmnwM5DbW0a5b6RTt
tEus3logbhwRBZ822MC3jDb4ur8/S62YSfEyHWRnfZ567r1NzVEbcKEZwG0d
B+yzLQR/d7PzQOPjpDAolUN7ds+aQZ6U2OOp+PquCjuPssO7+m78f/CqFKI=

                    "], "Biases" -> 
                    RawArray["Real32",{
                    0.008605330251157284, -0.013563851825892925`, \
-0.010247569531202316`, 0.0077054682187736034`, 
                    0.00989424716681242, -0.02047424204647541, 
                    0.0025077015161514282`, -0.004346033558249474, \
-0.005007414612919092, 
                    0.013156643137335777`, -0.014213476330041885`, \
-0.02974701300263405, 0.004919057246297598, 
                    0.005460901185870171, -0.013274638913571835`, \
-0.00980954710394144, -0.0002228411176474765, -0.007731318008154631, 
                    0.006746198050677776, -0.014977846294641495`, \
-0.006894973572343588, 
                    0.002596050500869751, -0.007050016894936562, \
-0.007096574641764164, 0.0008390707662329078, -0.013392195105552673`, 
                    0.004832372069358826, -0.007933628745377064, \
-0.0018833448411896825`, -0.003652469953522086, -0.002458451082929969, 
                    0.004565519746392965, -0.006077323574572802, 
                    0.004803829360753298, 
                    0.005920048803091049, -0.03271349519491196, 
                    0.006789540871977806, -0.0055248248390853405`, 
                    0.003520538564771414, -0.0011972173815593123`, 
                    0.003071031766012311, 0.003139632288366556, 
                    0.017375683411955833`, -0.0033819302916526794`, 
                    0.006370672956109047, 
                    0.004703974816948175, -0.007177188992500305, \
-0.004041415173560381, -0.011589898727834225`, -0.006907782983034849}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "14" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "15" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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
Ke/hjg==
                    "], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0006336949882097542, -0.0036344307009130716`,
                     0.0006130927940830588, 
                    0.0022091176360845566`, -0.005063506308943033, \
-0.023275991901755333`, -0.0014721878105774522`, -0.01004006341099739, \
-0.011116872541606426`, 0.0010409848764538765`, 
                    0.003875535214319825, -0.003946042153984308, \
-0.002830029930919409, -0.007085997611284256, 
                    0.002824218478053808, -0.00820755772292614, \
-0.0004634876095224172, -0.0035649628844112158`, -0.007489099632948637, \
-0.0045754872262477875`, 0.0035229730419814587`, -0.008536048233509064, 
                    0.0047198752872645855`, -0.01001805905252695, \
-0.010288627818226814`, -0.005234026350080967, -0.0064338194206357, \
-0.004237765911966562, -0.0018292965833097696`, 
                    0.007385347504168749, -0.0066727809607982635`, \
-0.0013747266493737698`, -0.004189292434602976, -0.005138010252267122, \
-0.005556740332394838, -0.010280081070959568`, -0.0006718160584568977, \
-0.002747728256508708, 0.002193993655964732, -0.002315705409273505, 
                    0.0014361236244440079`, -0.0051640672609210014`, 
                    0.001792451017536223, -0.009429221041500568, \
-0.006163599900901318, 0.00030756607884541154`, -0.0035621679853647947`, 
                    0.002510549034923315, 
                    0.0020478488877415657`, -0.013989239931106567`}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "16" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "17" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.013634650968015194`, -0.10313615202903748`, 
                    0.045605313032865524`, -0.09101683646440506, 
                    0.11689754575490952`, 0.10403399169445038`, 
                    0.050191204994916916`, -0.1290348321199417, 
                    0.1029035821557045, -0.26533690094947815`, \
-0.010752696543931961`, -0.06381276994943619, 0.05459394305944443, 
                    0.0908244326710701, 0.004103268962353468, 
                    0.06316772848367691, 0.07258658111095428, 
                    0.0908803716301918, 
                    0.09701042622327805, -0.10368365049362183`, \
-0.1389431357383728, -0.0021193011198192835`, 0.10442284494638443`, 
                    0.0949895903468132, -0.08022850006818771, \
-0.07051189988851547, 0.15945148468017578`, 0.08642613887786865, 
                    0.11687086522579193`, 
                    0.22529108822345734`, -0.19818003475666046`, \
-0.1927887350320816, -0.01008946169167757, 0.2750571370124817, 
                    0.1598864644765854, -0.1606169044971466, \
-0.17477458715438843`, -0.10940900444984436`, -0.10037269443273544`, \
-0.07840756326913834, -0.05113198235630989, -0.0465751551091671, \
-0.0627509355545044, -0.10523460805416107`, 0.11102096736431122`, 
                    0.1367153823375702, 
                    0.05152688920497894, -0.09076007455587387, \
-0.07642100751399994, -0.04319033399224281}}], "Biases" -> 
                    RawArray["Real32",{-0.0007615134818479419}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"]}, 
                  "Inputs" -> <|
                   "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath["Inputs", "Input"], 
                NeuralNetworks`NetPath["Outputs", "LogStd"] -> 
                NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                NeuralNetworks`NetPath["Outputs", "Mean"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "1", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], 
           "Training" -> <|
            "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
             TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
             "TotalTrainingTime" -> 3.210468, "MeanInputsPerSecond" -> 
             4360.734945808523|>, "InputType" -> "NumericalVector", 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|
               "(f1f2f3f4f5)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Output" -> <|
               "(f1f2f3f4f5)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Processors" -> {
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Mean" -> {-0.0812613174801503, -0.11663060452178584`, \
-0.07748450547430653, -0.09780138648281839, 0.19723469688244114`}, 
                  "StandardDeviation" -> {1.0676099376867996`, 
                   0.890189106027844, 0.9884952360559629, 1.0008109855781255`,
                    0.886800952000408}, 
                  "Output" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 2283713745384451654|>], 
                MachineLearning`MLProcessor[
                "FirstValues", <|
                 "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>, 
                  "Key" -> "(f1f2f3f4f5)", "Invertibility" -> "Perfect", 
                  "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
              "Missing" -> "Allowed"|>], "FeatureNumber" -> 5, 
           "DistributionData" -> {NormalDistribution, Automatic}, 
           "Calibrator" -> None, "PostProcessor" -> 
           MachineLearning`MLProcessor["Identity"], 
           "Options" -> <|
            "NetworkType" -> <|
              "Value" -> "FullyConnected", "Options" -> <||>|>, 
             "NetworkDepth" -> <|"Value" -> 8, "Options" -> <||>|>, 
             "NumberOfParameters" -> <|"Value" -> 17800, "Options" -> <||>|>, 
             "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>,
              "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
             "Dropout" -> <|"Value" -> None, "Options" -> <||>|>, 
             "NetInitializationMethod" -> <|
              "Value" -> Automatic, "Options" -> <||>|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}, 
               "Options" -> <||>|>, 
             MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
             ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
             "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
             TrainingProgressReporting -> <|
              "Value" -> None, "Options" -> <||>|>, 
             "NetTrainOptions" -> <|
              "Value" -> {
                LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
               "Options" -> <||>|>, 
             "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
             "ValidationSetRatio" -> <|
              "Value" -> None, "Options" -> <||>|>|>|>, 
         "TrainingInformation" -> <|
          "Reporting" -> None, "TrainingFunction" -> Predict, "EMIterations" -> 
           Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 
           4.127093226053854, "PreprocessingTime" -> 
           0.251263`5.851673534301465, "LossName" -> "StandardDeviation", 
           "BestModelInformation" -> 
           Dataset[<|
             "MeanCrossEntropy" -> 
              Around[8.212578737341302, 2.891301425403568], 
              "StandardDeviation" -> 
              Around[64.43283545804485, 18.239050621373703`], 
              "EvaluationTime" -> 0.010540925533894597`, "TestSize" -> 3, 
              "ModelMemory" -> 167112, "ModelUtility" -> -5.150234236667144, 
              "TrainingSize" -> 14, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 743696, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[8.212578737341302, 2.0444588443571936`]}, 
              "StandardDeviationHistory" -> {
                Around[64.43283545804485, 12.896956376778057`]}, 
              "Configuration" -> {
               "NeuralNetwork", "NetworkType" -> "FullyConnected", 
                "NetworkDepth" -> 8, "NumberOfParameters" -> 17800, 
                "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
                "Dropout" -> None, "NetInitializationMethod" -> Automatic, 
                "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
                MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
                "EarlyStopping" -> False, TrainingProgressReporting -> None, 
                "NetTrainOptions" -> Automatic, "LossFunction" -> 
                Automatic}|>, 
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
               "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
               "TrainingTime", "TrainingMemory", "ExperimentCount", 
               "MeanCrossEntropyHistory", "StandardDeviationHistory", 
               "Configuration"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, 1], 
               TypeSystem`Vector[TypeSystem`AnyType, 1], 
               TypeSystem`Tuple[{
                 TypeSystem`Atom[String], TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`AnyType}]}], <||>], "Configurations" -> 
           Dataset[<|<|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 8|>, 
                  "NumberOfParameters" -> <|"Value" -> 17800|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> None|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[8.212578737341302, 2.891301425403568], 
                   "StandardDeviation" -> 
                   Around[64.43283545804485, 18.239050621373703`], 
                   "EvaluationTime" -> 0.010540925533894597`, "TestSize" -> 3,
                    "ModelMemory" -> 167112, 
                   "ModelUtility" -> -5.150234236667144, "TrainingSize" -> 14,
                    "TrainingTime" -> 3.1622776601683795`, "TrainingMemory" -> 
                   743696, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[8.212578737341302, 2.0444588443571936`]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.43283545804485, 12.896956376778057`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.010540925533894597`, "ModelMemory" -> 
                  167112, "StandardDeviation" -> 
                  Around[64.43283545804485, 18.239050621373703`], 
                  "TrainingMemory" -> 743696, "TrainingTime" -> 
                  3.6998648623970043`|>, "Index" -> 1|>, <|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 4|>, 
                  "NumberOfParameters" -> <|"Value" -> 7800|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> None|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 1, "ModelMemory" -> 1, 
                  "StandardDeviation" -> 1, "TrainingMemory" -> 1, 
                  "TrainingTime" -> 1|>, "Index" -> 2|>, <|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 8|>, 
                  "NumberOfParameters" -> <|"Value" -> 17800|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> 0.01|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 1, "ModelMemory" -> 1, 
                  "StandardDeviation" -> 1, "TrainingMemory" -> 1, 
                  "TrainingTime" -> 1|>, "Index" -> 3|>, <|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 2|>, 
                  "NumberOfParameters" -> <|"Value" -> 2800|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> 0.01|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 1, "ModelMemory" -> 1, 
                  "StandardDeviation" -> 1, "TrainingMemory" -> 1, 
                  "TrainingTime" -> 1|>, "Index" -> 4|>, <|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 4|>, 
                  "NumberOfParameters" -> <|"Value" -> 7800|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> 0.01|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 1, "ModelMemory" -> 1, 
                  "StandardDeviation" -> 1, "TrainingMemory" -> 1, 
                  "TrainingTime" -> 1|>, "Index" -> 5|>, <|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 2|>, 
                  "NumberOfParameters" -> <|"Value" -> 2800|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> None|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 1, "ModelMemory" -> 1, 
                  "StandardDeviation" -> 1, "TrainingMemory" -> 1, 
                  "TrainingTime" -> 1|>, "Index" -> 6|>|>, 
             TypeSystem`Assoc[
              TypeSystem`Struct[{"Value", "Options"}, {
                TypeSystem`Atom[
                 TypeSystem`Enumeration["NeuralNetwork"]], 
                TypeSystem`Assoc[TypeSystem`AnyType, 
                 TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
              
              TypeSystem`Struct[{
               "Experiments", "PredictedPerformances", "Index"}, {
                TypeSystem`Vector[
                 
                 TypeSystem`Struct[{
                  "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                   "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
                   "TrainingTime", "TrainingMemory", "ExperimentCount", 
                   "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
                  TypeSystem`AnyType, TypeSystem`AnyType, 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[TypeSystem`AnyType, 1], 
                   TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
                 TypeSystem`AnyLength], 
                
                TypeSystem`Struct[{
                 "EvaluationTime", "ModelMemory", "StandardDeviation", 
                  "TrainingMemory", "TrainingTime"}, {
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Integer], TypeSystem`AnyType, 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Atom[Real]}], 
                TypeSystem`Atom[Integer]}], 6], <||>], "MaxTrainingSize" -> 
           17, "PreprocessorEvaluationTime" -> 3.58984375*^-6, 
           "PreprocessorMemory" -> 76920, "InputDimension" -> 5, 
           "OutputDimension" -> 1, 
           "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
           True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
           "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
           "LastReportingTime" -> 3.877102485820874`16.341082270290514*^9, 
           "RoundPartitioning" -> 
           Dataset[{<|
              "TrainingSizes" -> 14, "TimeBudgets" -> 2.5237090947142975`, 
               "ElapsedTimes" -> 3.594288, "ExperimentCounts" -> 1|>}, 
             TypeSystem`Vector[
              
              TypeSystem`Struct[{
               "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
                "ExperimentCounts"}, {
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer]}], 1], <||>]|>, "AnomalyDetector" -> 
         None, "Log" -> <|
          "Example" -> 
           MachineLearning`MLDataset[<|
             "f1" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, "ID" -> 
                2873047750387000173|>, 
              "f2" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, "ID" -> 
                1314440341876764847|>, 
              "f3" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, "ID" -> 
                2051880494423027750|>, 
              "f4" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, "ID" -> 
                1203773393871153081|>, 
              "f5" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, "ID" -> 
                145883235305585233|>|>, <|
             "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
              0, "RawExample" -> False|>], "TrainingTime" -> 3.893275, 
           "MaxTrainingMemory" -> 959712, "DataMemory" -> 4120, 
           "FunctionMemory" -> 352912, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 11, 10, 20, 54, 45.841026`8.413829306202118}, 
             "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
           "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
           "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
      "TestSet" -> <|"Input" -> CompressedData["
1:eJylkMuOQUEURUtdEq80YuDd3iF0E+KReDQifsDM1LiDL/Ad7V+MJWJmZGri
H8x6VepMjVSysu/ddar2qZNfb5cbrZSKgQcO/LjQT/iBBGhHKS/6BR3ZO1L3
gRahBxmoUedHCzCDNFyp86Et6EMZnnhutAJtqELSsflZcw/k4URdBC1BQzIe
ctacGUNI2eWWXOOl4KJtz3Xpz7zvrG1/XZiLrvDC8m3em4M/vLjcNYFv2OEF
JGMqPb4zqxteEB3JrAovMu7SSxOGMp+9tllmdgOZzS9eFF2IZ3L+Af3EG4s=

         "], 
        "Output" -> {219.17, 231.6, 214.42, 229.23, 181.47, 187.52, 232.97, 
         184.39, 199.15, 164.26, 157.23, 153.67, 171.93, 152.04, 172.67, 
         219.17, 231.6, 214.42, 155.61, 172.67, 335.28, 275.08, 222.78}|>, 
      "Predictions" -> {236.30925303988144`, 247.60512248959353`, 
       226.81885818345336`, 257.3574205809431, 247.21263717079896`, 
       251.0578263079159, 237.3571948644604, 198.572057180101, 
       215.44606662213295`, 159.4563513772282, 224.49593679337005`, 
       344.9358092100762, 97.21126024839619, 155.4432609592199, 
       170.11073453843755`, 236.3092604305532, 247.60512248959353`, 
       226.81885818345336`, 283.25542822390577`, 170.11073453843755`, 
       248.5141492478976, 152.45489457047765`, 122.99096540860387`}, 
      "Distributions" -> {
        NormalDistribution[236.30925303988144`, 16.084382186985895`], 
        NormalDistribution[247.60512248959353`, 16.084382186985895`], 
        NormalDistribution[226.81885818345336`, 16.084382186985895`], 
        NormalDistribution[257.3574205809431, 16.084382186985895`], 
        NormalDistribution[247.21263717079896`, 16.084382186985895`], 
        NormalDistribution[251.0578263079159, 16.084382186985895`], 
        NormalDistribution[237.3571948644604, 16.084382186985895`], 
        NormalDistribution[198.572057180101, 16.084382186985895`], 
        NormalDistribution[215.44606662213295`, 16.084382186985895`], 
        NormalDistribution[159.4563513772282, 16.084382186985895`], 
        NormalDistribution[224.49593679337005`, 16.084382186985895`], 
        NormalDistribution[344.9358092100762, 16.084382186985895`], 
        NormalDistribution[97.21126024839619, 16.084382186985895`], 
        NormalDistribution[155.4432609592199, 16.084382186985895`], 
        NormalDistribution[170.11073453843755`, 16.084382186985895`], 
        NormalDistribution[236.3092604305532, 16.084382186985895`], 
        NormalDistribution[247.60512248959353`, 16.084382186985895`], 
        NormalDistribution[226.81885818345336`, 16.084382186985895`], 
        NormalDistribution[283.25542822390577`, 16.084382186985895`], 
        NormalDistribution[170.11073453843755`, 16.084382186985895`], 
        NormalDistribution[248.5141492478976, 16.084382186985895`], 
        NormalDistribution[152.45489457047765`, 16.084382186985895`], 
        NormalDistribution[122.99096540860387`, 16.084382186985895`]}, 
      "Modes" -> {236.30925303988144`, 247.60512248959353`, 
       226.81885818345336`, 257.3574205809431, 247.21263717079896`, 
       251.0578263079159, 237.3571948644604, 198.572057180101, 
       215.44606662213295`, 159.4563513772282, 224.49593679337005`, 
       344.9358092100762, 97.21126024839619, 155.4432609592199, 
       170.11073453843755`, 236.3092604305532, 247.60512248959353`, 
       226.81885818345336`, 283.25542822390577`, 170.11073453843755`, 
       248.5141492478976, 152.45489457047765`, 122.99096540860387`}, 
      "Weights" -> SparseArray[Automatic, {23}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.001822391304347826, "SingleEvaluationTime" -> 
      0.00288034375, "Version" -> {13.1, 0}|>]], ",", 
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Predictor Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Predictor method"], 
                    TextCell["Predictor method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "LinearRegression",ExpressionUUID->
                   "9e248a41-c3ae-48ac-bce1-c7bfce8bfcec"],
                  TextCell["LinearRegression"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "23"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Standard deviation"], 
                    TextCell["Standard deviation"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"45.8602118476373235012`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "10.8787511708449109449`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "24.1027095059475016114`3.", "\", \"", 
                    "67.617714189327145391`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    24.1027095059475016114`3., ", ", 67.617714189327145391`3.,
                     "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Standard deviation baseline"], 
                    TextCell["Standard deviation baseline"]], 
                    "\"Standard deviation of testset values\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Standard deviation of testset values", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"42.6452732307168460579`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "8.9841273716218275069`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "24.677018487473191044`3.", "\", \"", 
                    "60.6135279739605010718`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    24.677018487473191044`3., ", ", 60.6135279739605010718`3.,
                     "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["R-squared"], 
                    TextCell["R-squared"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{
                    RowBox[{"-", "0.1564591870670730689`3."}], 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.7490134498282807751`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   TemplateBox[{"\"95% confidence interval: [\"", 
                    RowBox[{"-", "1.6544860867236346191`3."}], "\", \"", 
                    "1.3415677125894884814`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", \
-1.6544860867236346191`3., ", ", 1.3415677125894884814`3., "]"}], 
                   "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"5.440672788987999553`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0816008489163664308`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "5.2774710911552666914`3.", "\", \"", 
                    "5.6038744868207324146`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    5.2774710911552666914`3., ", ", 5.6038744868207324146`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"1.85`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"300.`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                   FractionBox["\"Examples\"", "\"Seconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[{{{}, {
                    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
                    0.012833333333333334`], AbsoluteThickness[1.6], 
                    GeometricTransformationBox[InsetBox[
                    FormBox[
                    StyleBox[
                    GraphicsBox[
                    {RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
                    1.], CircleBox[{0, 0}, Offset[{1.8, 1.8}, {0., 0.}]]}],
                    StripOnInput->False,
                    GraphicsBoxOptions->{DefaultBaseStyle->Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}],
                    TraditionalForm], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGAQB2JGIGYC4sSdmjmHAtIdbLmuLy5IzXYomVl/xSYw3cEY
BD7nOBT95k65BpM/m+VwelPCtDSgfP+hrxoxy3McXDbJZDMC+UBZW671aQ6L
PCVrXIH8QrCGdAftmP4r2TB5+VwHLZbP7PeB5omsc39YxZPucK9PuVMIKH/2
DBA8yXDo2vzaON833WGHXOvrwI4UBxerOpkPATD7kh2Sa9cn/YG5xzTZ4dGd
Yj9/IP+bRkz/odpUh+RAFq9pQP7DKqANjMkOTZb/VrbA1E9NdSDVvxMbrrD9
BPLfBAJdVIxpnnzUkvTXMP98KXF4s/aSdwXMfsNCB0dZPoYiIF8T6LyvN7Id
AJWjoPw=
                    "]]}, {
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.52373321675535`, 219.17}}]},
                    RowBox[{"{", 
                    RowBox[{"186.52373321675535`", ",", "219.17`"}], "}"}]],
                    
                    Annotation[#, {186.52373321675535`, 219.17}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.5386755459, 231.6}}]},
                    RowBox[{"{", 
                    RowBox[{"186.5386755459`", ",", "231.6`"}], "}"}]],
                    Annotation[#, {186.5386755459, 231.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.52617075290942`, 214.42}}]},
                    RowBox[{"{", 
                    RowBox[{"186.52617075290942`", ",", "214.42`"}], "}"}]],
                    
                    Annotation[#, {186.52617075290942`, 214.42}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.54377287756355`, 229.23}}]},
                    RowBox[{"{", 
                    RowBox[{"186.54377287756355`", ",", "229.23`"}], "}"}]],
                    
                    Annotation[#, {186.54377287756355`, 229.23}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.53142314533955`, 181.47}}]},
                    RowBox[{"{", 
                    RowBox[{"186.53142314533955`", ",", "181.47`"}], "}"}]],
                    
                    Annotation[#, {186.53142314533955`, 181.47}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.539732026472, 187.52}}]},
                    RowBox[{"{", 
                    RowBox[{"186.539732026472`", ",", "187.52`"}], "}"}]],
                    Annotation[#, {186.539732026472, 187.52}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.5444128799439, 232.97}}]},
                    RowBox[{"{", 
                    RowBox[{"186.5444128799439`", ",", "232.97`"}], "}"}]],
                    Annotation[#, {186.5444128799439, 232.97}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.52722547020068`, 184.39}}]},
                    RowBox[{"{", 
                    RowBox[{"186.52722547020068`", ",", "184.39`"}], "}"}]],
                    
                    Annotation[#, {186.52722547020068`, 184.39}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.53351265854775`, 199.15}}]},
                    RowBox[{"{", 
                    RowBox[{"186.53351265854775`", ",", "199.15`"}], "}"}]],
                    
                    Annotation[#, {186.53351265854775`, 199.15}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.4198245624105, 164.26}}]},
                    RowBox[{"{", 
                    RowBox[{"186.4198245624105`", ",", "164.26`"}], "}"}]],
                    Annotation[#, {186.4198245624105, 164.26}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.52931046155766`, 157.23}}]},
                    RowBox[{"{", 
                    RowBox[{"186.52931046155766`", ",", "157.23`"}], "}"}]],
                    
                    Annotation[#, {186.52931046155766`, 157.23}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.5308087756667, 153.67}}]},
                    RowBox[{"{", 
                    RowBox[{"186.5308087756667`", ",", "153.67`"}], "}"}]],
                    Annotation[#, {186.5308087756667, 153.67}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.50968096379717`, 171.93}}]},
                    RowBox[{"{", 
                    RowBox[{"186.50968096379717`", ",", "171.93`"}], "}"}]],
                    
                    Annotation[#, {186.50968096379717`, 171.93}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.51834584086745`, 152.04}}]},
                    RowBox[{"{", 
                    RowBox[{"186.51834584086745`", ",", "152.04`"}], "}"}]],
                    Annotation[#, {186.51834584086745`, 152.04}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.51619434026003`, 172.67}}]},
                    RowBox[{"{", 
                    RowBox[{"186.51619434026003`", ",", "172.67`"}], "}"}]],
                    
                    Annotation[#, {186.51619434026003`, 172.67}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.52373321675535`, 219.17}}]},
                    RowBox[{"{", 
                    RowBox[{"186.52373321675535`", ",", "219.17`"}], "}"}]],
                    
                    Annotation[#, {186.52373321675535`, 219.17}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.5386755459, 231.6}}]},
                    RowBox[{"{", 
                    RowBox[{"186.5386755459`", ",", "231.6`"}], "}"}]],
                    Annotation[#, {186.5386755459, 231.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.52617075290942`, 214.42}}]},
                    RowBox[{"{", 
                    RowBox[{"186.52617075290942`", ",", "214.42`"}], "}"}]],
                    
                    Annotation[#, {186.52617075290942`, 214.42}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.53039876465166`, 155.61}}]},
                    RowBox[{"{", 
                    RowBox[{"186.53039876465166`", ",", "155.61`"}], "}"}]],
                    
                    Annotation[#, {186.53039876465166`, 155.61}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.51619434026003`, 172.67}}]},
                    RowBox[{"{", 
                    RowBox[{"186.51619434026003`", ",", "172.67`"}], "}"}]],
                    
                    Annotation[#, {186.51619434026003`, 172.67}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.52873594379432`, 335.28}}]},
                    RowBox[{"{", 
                    RowBox[{"186.52873594379432`", ",", "335.28`"}], "}"}]],
                    
                    Annotation[#, {186.52873594379432`, 335.28}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.5146845927078, 275.08}}]},
                    RowBox[{"{", 
                    RowBox[{"186.5146845927078`", ",", "275.08`"}], "}"}]],
                    Annotation[#, {186.5146845927078, 275.08}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.51391604191488`, 222.78}}]},
                    RowBox[{"{", 
                    RowBox[{"186.51391604191488`", ",", "222.78`"}], "}"}]],
                    
                    Annotation[#, {186.51391604191488`, 222.78}, 
                    "Tooltip"]& ]}}, {{}, {}}}, {{{}, {}, 
                    TagBox[
                    {GrayLevel[0.2], AbsoluteThickness[1.], Opacity[0.5], 
                    AbsoluteDashing[{2, 4}], LineBox[CompressedData["
1:eJxFxXssFHAAB/DrOpm/WB5xHnObCDk5jqLF6irSLdRcXpvX3XXnvKkbp1JC
R2rpolJyKbVl3DQ7zOOKqzObx6b1MN1kmV2m5FxEqj/6ff/47MNIzY7hUykU
Cvevfxf50xvsp1LC/h/xwsi0mcb27HGNpR53BlbObZvFS/tWWEYDFoVN6MZ/
4dNcuUnumEpmC9diNuKxQepQVDOLPZY477fw08iCtRmfbzP4ob5/SZ6RTk5h
Pls0N2Dn+PFEv0I+ecpG0j+5jhlB1vGJxQJyatBq+nWakOzZaGhpLsM/FFH6
AOoZslq8XJkrx7SWZtENCxE5UlPbnVCLFWIjRUkXk/nFaReG67Gf2CqrkZFB
vjyguxXbhMeWNd7d3hKyq3q3ur4Dm2YeyeJYmWSdIU6l7cGMRCcXu/1ZZFlC
9EV9F57YOxTDO5hNbis5nNSuwZwo6tcPO3PILE9Ht3si/JkdLB15im+qpLRT
C5iW0vv8uE8u+SevZ5QqwfO977ws2/F93npT9SI+kRwanRyQRx5sqHR6XIB7
XKtSWzpwm3WrftOEhcGTRbqgfLLTmBN3XoZPtjrf1Q5gbp/bVltKAZlzILK5
i4M3v59LGS3DIQtJd5SvcCEvzWLEvJCcZ8xSCI7isyuc25fCcbGJXvcgApet
auvfRmLFhkvDkSisNhtVusfh37a+7V/EmLrDTEWVYHP7jyqXTGxFr+iIzcYM
l0+d2nzMcb/e+0SGwz34fS9LMHdXSP/0eRzrNTdgV4qFzNDB8itY4ms7pCzH
OXsMQ30VWMqqe71yFcv8M99sr8KlAYd0zGpcznYYPnYNywMXhwU1+A/jqjNJ

                    "]]},
                    Annotation[#, "Charting`Private`Tag$949194#1"]& ]}, {}}},
                   Axes->{False, False},
                   AxesLabel->{None, None},
                   AxesOrigin->{142.8780000000003, 142.8780000000003},
                   DisplayFunction->Identity,
                   Frame->{{True, False}, {True, False}},
                   FrameLabel->{{
                    FormBox[
                    TagBox["\"actual value\"", HoldForm], TraditionalForm], 
                    None}, {
                    FormBox[
                    TagBox["\"predicted value\"", HoldForm], TraditionalForm],
                     None}},
                   
                   FrameTicks->{{Automatic, Automatic}, {
                    Automatic, Automatic}},
                   GridLines->{Automatic, Automatic},
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.5], 
                    AbsoluteThickness[1], 
                    AbsoluteDashing[{1, 2}]],
                   ImageSize->250,
                   
                   Method->{
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}},
                   
                   PlotRange->{{142.878, 344.90009999999995`}, {142.878, 
                    344.90009999999995`}},
                   PlotRangeClipping->True,
                   PlotRangePadding->{{0, 0}, {0, 0}},
                   Ticks->{Automatic, Automatic}],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    PredictorMeasurementsObject[<|
     "Model" -> PredictorFunction[<|
        "ExampleNumber" -> 17, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical"|>, 
                "f2" -> <|"Type" -> "Numerical"|>, 
                "f3" -> <|"Type" -> "Numerical"|>, 
                "f4" -> <|"Type" -> "Numerical"|>, 
                "f5" -> <|"Type" -> "Numerical"|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor[
                   "Transpose", <|"FeatureNumber" -> 5|>], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f1f2f3f4f5)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Processors" -> {
                MachineLearning`MLProcessor[
                "SynthesizeMissingValues", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Distribution" -> 
                  LearnedDistribution[<|
                    "ExampleNumber" -> 17, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7100669430970155518|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {649.5294117647059, 16.41176470588235, 
                    50.411764705882355`, 64.70588235294117, 
                    37.470588235294116`}, 
                    "StandardDeviation" -> {40.86292386397267, 
                    6.562449538444979, 9.311970938966981, 7.176470588235281, 
                    10.13507391109661}, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4772792621860920984|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{
                    0.3294464620128585, -0.24670478291864095`}, {
                    0.5266978779192711, -0.20091067530452414`}, {
                    0.6075928250009178, -0.38220632047567493`}, \
{-0.31353029417700407`, -0.6809418760462183}, {0.3828630142795621, 
                    0.5375947736621413}}, 
                    "Precisions" -> {0.5140556558990445, 0.863155175120625}, 
                    "NoisePrecision" -> 1.5886875059025845`, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157116188`, \
-0.0018584586044933286`, -0.00024375769149080384`, 8.562084148579801*^-6, 
                    0.00021587557870743752`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7856623779326335863|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "Key" -> "(f1f2f3f4f5)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 2, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157115991`, \
-0.001858458604493322, -0.00024375769149081688`, 8.562084148556943*^-6, 
                    0.00021587557870744406`}, 
                    "StandardDeviation" -> {0.9973443489182671, 
                    1.0001052004380495`, 1.000282671403912, 
                    0.9982239732130878, 1.0001417047326489`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 5, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1764544953284831100|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157115991`, \
-0.001858458604493322, -0.00024375769149081688`, 8.562084148556943*^-6, 
                    0.00021587557870744406`}, 
                    "StandardDeviation" -> {0.9973443489182671, 
                    1.0001052004380495`, 1.000282671403912, 
                    0.9982239732130878, 1.0001417047326489`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 5, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1764544953284831100|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 5, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, 
                    "ID" -> 4922843929423532927|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, 
                    "ID" -> 365386638938414886|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, 
                    "ID" -> 8084762059231395715|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, 
                    "ID" -> 717539068447703646|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, 
                    "ID" -> 3403397587327662634|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.129596, "MaxTrainingMemory" -> 192968,
                     "DataMemory" -> 6400, "FunctionMemory" -> 51568, 
                    "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 11, 10, 20, 54, 46.011235`8.41543886705018}, 
                    "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}|>,
                     "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-4.406902047628646, -4.406902047628646, \
-4.168656228344961, -4.127362310486287, -3.8790302555384786`, \
-3.8157144014569915`, -3.7752140087029566`, -3.538288180712346, \
-3.4944058955364734`, -3.4490724744232923`, -3.432924033093133}, 
                    "LeftBoundary" -> -4.168656228344961, "LeftScale" -> 
                    0.11912290964184223`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[19.043784917961784`, 0.5368425024100205], 
                    "EntropySampleSize" -> 10|>], 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "EvaluationStrategy" -> "ModeFinding", 
                  "Version" -> {13.1, 0}, "ID" -> 5966421770916112094|>], 
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1020916197684206682|>], 
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Mean" -> {649.5294117647059, 16.41176470588235, 
                   50.411764705882355`, 64.70588235294117, 
                   37.470588235294116`}, 
                  "StandardDeviation" -> {40.86292386397267, 
                   6.562449538444979, 9.311970938966981, 7.176470588235281, 
                   10.13507391109661}, 
                  "Output" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 2859614146361296001|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Imputed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|"f1" -> <|"Type" -> "Numerical"|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor["List"], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1892463177288152845|>], 
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Mean" -> {186.5176470588235}, 
                  "StandardDeviation" -> {61.9974481950585}, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 5696177821155824089|>], 
                MachineLearning`MLProcessor[
                "FromVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 5443556393657702637|>], 
                MachineLearning`MLProcessor[
                "FirstValues", <|
                 "Info" -> <|"Type" -> "Numerical", "Weight" -> 1|>, "Key" -> 
                  "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                  False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
           "InverseProcessorFunction" -> (186.5176470588235 + 
            61.9974481950585 #& ), 
           "ProcessorFunction" -> (-3.008472969274401 + 
            0.016129696126423874` #& ), "Name" -> "value", 
           "Quantiles" -> {-1.4258271853496902`, 2.7177304525673383`}, "Mean" -> 
           186.51764705882354`|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> (DiracDelta[#2 - #]& ), 
         "Threshold" -> 0, "PerformanceGoal" -> Automatic, "BatchProcessing" -> 
         Automatic, 
         "Model" -> <|
          "MeanFunction" -> 
           LinearLayer[<|
             "Type" -> "Linear", 
              "Arrays" -> <|
               "Weights" -> 
                RawArray["Real32",{{
                  0.0001022566357278265, -0.000029769986213068478`, \
-4.256757620169083*^-6, -5.452260666061193*^-6, 0.000017828686395660043`}}], 
                "Biases" -> RawArray["Real32",{2.742919529220611*^-16}]|>, 
              "Parameters" -> <|
               "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
                5, "$InputDimensions" -> {5}|>, 
              "Inputs" -> <|
               "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`AtomT]|>,
               "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], 
           "DistributionData" -> {NormalDistribution, 1.243077490388852}, 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|
               "(f1f2f3f4f5)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Output" -> <|
               "(f1f2f3f4f5)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Processors" -> {
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Mean" -> {0.0015238368206923285`, 
                   0.0001960125331606793, -0.003053086958476699, 
                   0.0003484793101807369, -0.0017051122868508132`}, 
                  "StandardDeviation" -> {0.999579510982794, 
                   0.9973638566085912, 1.0002751161218724`, 
                   0.9997172300055037, 1.0009988024737557`}, 
                  "Output" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 598096601813410430|>], 
                MachineLearning`MLProcessor[
                "FirstValues", <|
                 "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>, 
                  "Key" -> "(f1f2f3f4f5)", "Invertibility" -> "Perfect", 
                  "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
              "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
           "LinearRegression", "PostProcessor" -> 
           MachineLearning`MLProcessor["Identity"], 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
             "L2Regularization" -> <|"Value" -> 100000., "Options" -> <||>|>, 
             "OptimizationMethod" -> <|
              "Value" -> "NormalEquation", "Options" -> <||>|>, 
             MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
         "TrainingInformation" -> <|
          "Reporting" -> None, "TrainingFunction" -> Predict, "EMIterations" -> 
           Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 
           4.127093226053854, "PreprocessingTime" -> 
           0.285607`5.90731384094226, "LossName" -> "StandardDeviation", 
           "BestModelInformation" -> 
           Dataset[<|
             "MeanCrossEntropy" -> 
              Around[5.545772961414833, 0.060480592063955174`], 
              "StandardDeviation" -> 
              Around[58.78047698301086, 7.789540791684971], "EvaluationTime" -> 
              0.000610371555321924, "TestSize" -> 12, "ModelMemory" -> 15488.,
               "ModelUtility" -> -4.793121644845749, "TrainingSize" -> 14, 
              "TrainingTime" -> 0.007289798786266461, "TrainingMemory" -> 
              73008., "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                Around[5.542983344995577, 0.11239757473183765`], 
                Around[5.50966671240032, 0.10653285506897352`], 
                Around[5.551854439441349, 0.12343335235780473`], 
                Around[5.578587348822083, 0.13307851591148315`]}, 
              "StandardDeviationHistory" -> {
                Around[58.99547026541086, 13.151832462077266`], 
                Around[51.020741836078734`, 15.72731542197369], 
                Around[60.23165460944468, 14.938595357984449`], 
                Around[64.87404122110915, 14.457898745223057`]}, 
              "Configuration" -> {
               "LinearRegression", "L1Regularization" -> 0, 
                "L2Regularization" -> 100000., "OptimizationMethod" -> 
                Automatic, MaxIterations -> 30}, "FinalTrainingSize" -> 17|>, 
             
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
               "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
               "TrainingTime", "TrainingMemory", "ExperimentCount", 
               "MeanCrossEntropyHistory", "StandardDeviationHistory", 
               "Configuration", "FinalTrainingSize"}, {
              TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, 4], 
               TypeSystem`Vector[TypeSystem`AnyType, 4], 
               TypeSystem`Tuple[{
                 TypeSystem`Atom[String], TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
               TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
           Dataset[<|<|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 100000.|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.545772961414833, 0.060480592063955174`], 
                   "StandardDeviation" -> 
                   Around[58.78047698301086, 7.789540791684971], 
                   "EvaluationTime" -> 0.000610371555321924, "TestSize" -> 12,
                    "ModelMemory" -> 15488., 
                   "ModelUtility" -> -4.793121644845749, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.007289798786266461, "TrainingMemory" -> 
                   73008., "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                    Around[5.542983344995577, 0.11239757473183765`], 
                    Around[5.50966671240032, 0.10653285506897352`], 
                    Around[5.551854439441349, 0.12343335235780473`], 
                    Around[5.578587348822083, 0.13307851591148315`]}, 
                   "StandardDeviationHistory" -> {
                    Around[58.99547026541086, 13.151832462077266`], 
                    Around[51.020741836078734`, 15.72731542197369], 
                    Around[60.23165460944468, 14.938595357984449`], 
                    Around[64.87404122110915, 14.457898745223057`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.000610371555321924, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[58.78047698301086, 7.789540791684971], 
                  "TrainingMemory" -> 73008., "TrainingTime" -> 
                  0.00852906457993176|>, "Index" -> 1|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.01|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.761444548940688, 0.28851435171801093`], 
                   "StandardDeviation" -> 
                   Around[72.78383707914007, 14.742706427725231`], 
                   "EvaluationTime" -> 0.000562495157696018, "TestSize" -> 9, 
                   "ModelMemory" -> 15488., 
                   "ModelUtility" -> -5.020358914730533, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                   72900., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                    Around[5.534717558068659, 0.16921119591922218`], 
                    Around[6.282267582921669, 0.6418679997359864], 
                    Around[5.467348505831736, 0.18537386851378437`]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.18104494711723, 13.255549543309627`], 
                    Around[95.06127341741073, 23.000519709698143`], 
                    Around[59.109192872892265`, 17.171270669186253`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.000562495157696018, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[72.78383707914007, 14.742706427725231`], 
                  "TrainingMemory" -> 72900., "TrainingTime" -> 
                  0.007382200930418258|>, "Index" -> 2|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.00001|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.762213073936855, 0.2891908756145487], 
                   "StandardDeviation" -> 
                   Around[72.81229258816217, 14.76442112532492], 
                   "EvaluationTime" -> 0.000562495157696018, "TestSize" -> 9, 
                   "ModelMemory" -> 15488., 
                   "ModelUtility" -> -5.02079190454368, "TrainingSize" -> 14, 
                   "TrainingTime" -> 0.006718000670412151, "TrainingMemory" -> 
                   73032., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                    Around[5.534682922478275, 0.16927824477692485`], 
                    Around[6.284479207170306, 0.6436115123807173], 
                    Around[5.467477092161981, 0.18547361733290976`]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.17884816653434, 13.260083028702061`], 
                    Around[95.13867833805087, 23.043382803327937`], 
                    Around[59.11935125990129, 17.1757078335859]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.000562495157696018, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[72.81229258816217, 14.76442112532492], 
                  "TrainingMemory" -> 73032., "TrainingTime" -> 
                  0.007860060784382217|>, "Index" -> 3|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 1.|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.755563731549198, 0.18980549387942885`], 
                   "StandardDeviation" -> 
                   Around[73.29785803350558, 11.12566529112454], 
                   "EvaluationTime" -> 0.0005556556723208886, "TestSize" -> 
                   12, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -5.017590247083016, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.006636315225290107, "TrainingMemory" -> 
                   73035.2, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                    Around[5.537018835452896, 0.162857584923597], 
                    Around[6.082550758596856, 0.49237622361394645`], 
                    Around[5.460532768414772, 0.17520207393443116`], 
                    Around[5.942152563732269, 0.616728779125768]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.342053390633, 12.905678991735893`], 
                    Around[88.31834443982007, 19.599927716359378`], 
                    Around[58.47860980099668, 16.678389530697014`], 
                    Around[82.05242450257255, 26.88458118417234]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.0005556556723208886, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[73.29785803350558, 11.12566529112454], 
                  "TrainingMemory" -> 73035.2, "TrainingTime" -> 
                  0.007764488813589425|>, "Index" -> 4|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 100.|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.52704752920782, 0.059833333436540785`], 
                   "StandardDeviation" -> 
                   Around[59.06307435441815, 7.1277709070352655`], 
                   "EvaluationTime" -> 0.0005556556723208886, "TestSize" -> 
                   12, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -4.795608508697825, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                   73097.6, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                    Around[5.531514416788595, 0.11645358574404258`], 
                    Around[5.494124840785624, 0.1088831297755258], 
                    Around[5.535454201843598, 0.12152542072185327`], 
                    Around[5.547096657413462, 0.12483529941674258`]}, 
                   "StandardDeviationHistory" -> {
                    Around[60.13420798295833, 12.973819118386215`], 
                    Around[52.8969016822823, 14.7623356585785], 
                    Around[60.14538357694005, 13.948029801011218`], 
                    Around[63.07580417549193, 12.887058680571473`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.0005556556723208886, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[59.06307435441815, 7.1277709070352655`], 
                  "TrainingMemory" -> 73097.6, "TrainingTime" -> 
                  0.007382200930418258|>, "Index" -> 5|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.0001|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.762206151614397, 0.28918477557449224`], 
                   "StandardDeviation" -> 
                   Around[72.81203627080747, 14.764225053841171`], 
                   "EvaluationTime" -> 0.000562495157696018, "TestSize" -> 9, 
                   "ModelMemory" -> 15488., 
                   "ModelUtility" -> -5.020788003909638, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.006718000670412151, "TrainingMemory" -> 
                   73034., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                    Around[5.534683249753409, 0.1692776444683391], 
                    Around[6.284459271315347, 0.643595780574491], 
                    Around[5.467475933774436, 0.1854727235442694]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.1788689040908, 13.260042036424538`], 
                    Around[95.13798004273157, 23.04299550738775], 
                    Around[59.119259865600014`, 17.175668039506018`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.000562495157696018, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[72.81203627080747, 14.764225053841171`], 
                  "TrainingMemory" -> 73034., "TrainingTime" -> 
                  0.007860060784382217|>, "Index" -> 6|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 1.*^6|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.545795103598917, 0.06048169504948894], 
                   "StandardDeviation" -> 
                   Around[58.780381496412176`, 7.790319220786534], 
                   "EvaluationTime" -> 0.0006174552215907863, "TestSize" -> 
                   12, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -4.793122649622534, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                   73040., "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                    Around[5.542997781911346, 0.11239398949153957`], 
                    Around[5.509685521772135, 0.1065309092188283], 
                    Around[5.551872364079654, 0.12343499929930912`], 
                    Around[5.578624746632535, 0.13308921629493362`]}, 
                   "StandardDeviationHistory" -> {
                    Around[58.994284804719925`, 13.15201486589744], 
                    Around[51.01900798760274, 15.728315521454363`], 
                    Around[60.231653911012614`, 14.939724030257922`], 
                    Around[64.87657928231343, 14.459903245463327`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.0006174552215907863, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[58.780381496412176`, 7.790319220786534], 
                  "TrainingMemory" -> 73040., "TrainingTime" -> 
                  0.007382200930418258|>, "Index" -> 7|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.828874730655696, 0.2309158294220318], 
                   "StandardDeviation" -> 
                   Around[75.93805452584338, 12.453011937371743`], 
                   "EvaluationTime" -> 0.0005900972800902686, "TestSize" -> 
                   12, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -5.055342536277571, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                   71264., "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                    Around[5.534682903229695, 0.16927830708545105`], 
                    Around[6.284481196998263, 0.6436130829374975], 
                    Around[5.467477209369381, 0.18547370723997095`], 
                    Around[6.028857613025443, 0.6841911689155443]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.17884694687201, 13.260087015896893`], 
                    Around[95.13874803652833, 23.043421474021667`], 
                    Around[59.11936050719379, 17.17571181577855], 
                    Around[85.3152626127794, 28.34197665472279]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.0005900972800902686, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[75.93805452584338, 12.453011937371743`], 
                  "TrainingMemory" -> 71264., "TrainingTime" -> 
                  0.007382200930418258|>, "Index" -> 8|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.001|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.762136864206496, 0.2891238075392723], 
                   "StandardDeviation" -> 
                   Around[72.80946847902437, 14.76226682696847], 
                   "EvaluationTime" -> 0.0005966925845716652, "TestSize" -> 9,
                    "ModelMemory" -> 15488., 
                   "ModelUtility" -> -5.020748976540439, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.006718000670412151, "TrainingMemory" -> 
                   72956., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                    Around[5.534686370015957, 0.16927160321192455`], 
                    Around[6.284259946812004, 0.6434385442562445], 
                    Around[5.467464275791524, 0.18546374111869726`]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.17906663655944, 13.259632749513159`], 
                    Around[95.13099884411103, 23.039125723974024`], 
                    Around[59.11833995640268, 17.175268845380003`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.0005966925845716652, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[72.80946847902437, 14.76226682696847], 
                  "TrainingMemory" -> 72956., "TrainingTime" -> 
                  0.007860060784382217|>, "Index" -> 9|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.1|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.754576052418996, 0.28244900256016603`], 
                   "StandardDeviation" -> 
                   Around[72.53176000661027, 14.54946533403942], 
                   "EvaluationTime" -> 0.000562495157696018, "TestSize" -> 9, 
                   "ModelMemory" -> 15488., 
                   "ModelUtility" -> -5.01651267676352, "TrainingSize" -> 14, 
                   "TrainingTime" -> 0.007534855121632593, "TrainingMemory" -> 
                   72988., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                    Around[5.535018969362517, 0.16860673913559598`], 
                    Around[6.262446890652057, 0.6263541347291746], 
                    Around[5.466262297242416, 0.18446678648849757`]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.20035014985204, 13.215745834665299`], 
                    Around[94.37271094267881, 22.623610560216054`], 
                    Around[59.02221892729996, 17.13053783734946]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.000562495157696018, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[72.53176000661027, 14.54946533403942], 
                  "TrainingMemory" -> 72988., "TrainingTime" -> 
                  0.008815780492310134|>, "Index" -> 10|>|>, 
             TypeSystem`Assoc[
              TypeSystem`Struct[{"Value", "Options"}, {
                TypeSystem`Atom[
                 TypeSystem`Enumeration["LinearRegression"]], 
                TypeSystem`Assoc[TypeSystem`AnyType, 
                 TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
              
              TypeSystem`Struct[{
               "Experiments", "PredictedPerformances", "Index"}, {
                TypeSystem`Vector[
                 
                 TypeSystem`Struct[{
                  "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                   "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
                   "TrainingTime", "TrainingMemory", "ExperimentCount", 
                   "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
                  TypeSystem`AnyType, TypeSystem`AnyType, 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[
                   TypeSystem`AnyType, TypeSystem`AnyLength], 
                   TypeSystem`Vector[
                   TypeSystem`AnyType, TypeSystem`AnyLength]}], 1], 
                
                TypeSystem`Struct[{
                 "EvaluationTime", "ModelMemory", "StandardDeviation", 
                  "TrainingMemory", "TrainingTime"}, {
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], TypeSystem`AnyType, 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real]}], 
                TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 
           17, "PreprocessorEvaluationTime" -> 4.34375*^-6, 
           "PreprocessorMemory" -> 76920, "InputDimension" -> 5, 
           "OutputDimension" -> 1, 
           "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
           True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
           "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
           "LastReportingTime" -> 3.877102486191059`16.341082270331977*^9, 
           "RoundPartitioning" -> 
           Dataset[{<|
              "TrainingSizes" -> 14, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
               0.39938000000000007`, "ExperimentCounts" -> 35|>}, 
             TypeSystem`Vector[
              
              TypeSystem`Struct[{
               "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
                "ExperimentCounts"}, {
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer]}], 1], <||>]|>, "AnomalyDetector" -> 
         None, "Log" -> <|
          "Example" -> 
           MachineLearning`MLDataset[<|
             "f1" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, "ID" -> 
                2873047750387000173|>, 
              "f2" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, "ID" -> 
                1314440341876764847|>, 
              "f3" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, "ID" -> 
                2051880494423027750|>, 
              "f4" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, "ID" -> 
                1203773393871153081|>, 
              "f5" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, "ID" -> 
                145883235305585233|>|>, <|
             "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
              0, "RawExample" -> False|>], "TrainingTime" -> 0.784037, 
           "MaxTrainingMemory" -> 473896, "DataMemory" -> 4120, 
           "FunctionMemory" -> 215464, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 11, 10, 20, 54, 46.660674`8.421525984375092}, 
             "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
           "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
           "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
      "TestSet" -> <|"Input" -> CompressedData["
1:eJylkMuOQUEURUtdEq80YuDd3iF0E+KReDQifsDM1LiDL/Ad7V+MJWJmZGri
H8x6VepMjVSysu/ddar2qZNfb5cbrZSKgQcO/LjQT/iBBGhHKS/6BR3ZO1L3
gRahBxmoUedHCzCDNFyp86Et6EMZnnhutAJtqELSsflZcw/k4URdBC1BQzIe
ctacGUNI2eWWXOOl4KJtz3Xpz7zvrG1/XZiLrvDC8m3em4M/vLjcNYFv2OEF
JGMqPb4zqxteEB3JrAovMu7SSxOGMp+9tllmdgOZzS9eFF2IZ3L+Af3EG4s=

         "], 
        "Output" -> {219.17, 231.6, 214.42, 229.23, 181.47, 187.52, 232.97, 
         184.39, 199.15, 164.26, 157.23, 153.67, 171.93, 152.04, 172.67, 
         219.17, 231.6, 214.42, 155.61, 172.67, 335.28, 275.08, 222.78}|>, 
      "Predictions" -> {186.52373321675535`, 186.5386755459, 
       186.52617075290942`, 186.54377287756355`, 186.53142314533955`, 
       186.539732026472, 186.5444128799439, 186.52722547020068`, 
       186.53351265854775`, 186.4198245624105, 186.52931046155766`, 
       186.5308087756667, 186.50968096379717`, 186.51834584086745`, 
       186.51619434026003`, 186.52373321675535`, 186.5386755459, 
       186.52617075290942`, 186.53039876465166`, 186.51619434026003`, 
       186.52873594379432`, 186.5146845927078, 186.51391604191488`}, 
      "Distributions" -> {
        NormalDistribution[186.52373321675535`, 77.06763231282618], 
        NormalDistribution[186.5386755459, 77.06763231282618], 
        NormalDistribution[186.52617075290942`, 77.06763231282618], 
        NormalDistribution[186.54377287756355`, 77.06763231282618], 
        NormalDistribution[186.53142314533955`, 77.06763231282618], 
        NormalDistribution[186.539732026472, 77.06763231282618], 
        NormalDistribution[186.5444128799439, 77.06763231282618], 
        NormalDistribution[186.52722547020068`, 77.06763231282618], 
        NormalDistribution[186.53351265854775`, 77.06763231282618], 
        NormalDistribution[186.4198245624105, 77.06763231282618], 
        NormalDistribution[186.52931046155766`, 77.06763231282618], 
        NormalDistribution[186.5308087756667, 77.06763231282618], 
        NormalDistribution[186.50968096379717`, 77.06763231282618], 
        NormalDistribution[186.51834584086745`, 77.06763231282618], 
        NormalDistribution[186.51619434026003`, 77.06763231282618], 
        NormalDistribution[186.52373321675535`, 77.06763231282618], 
        NormalDistribution[186.5386755459, 77.06763231282618], 
        NormalDistribution[186.52617075290942`, 77.06763231282618], 
        NormalDistribution[186.53039876465166`, 77.06763231282618], 
        NormalDistribution[186.51619434026003`, 77.06763231282618], 
        NormalDistribution[186.52873594379432`, 77.06763231282618], 
        NormalDistribution[186.5146845927078, 77.06763231282618], 
        NormalDistribution[186.51391604191488`, 77.06763231282618]}, 
      "Modes" -> {186.52373321675535`, 186.5386755459, 186.52617075290942`, 
       186.54377287756355`, 186.53142314533955`, 186.539732026472, 
       186.5444128799439, 186.52722547020068`, 186.53351265854775`, 
       186.4198245624105, 186.52931046155766`, 186.5308087756667, 
       186.50968096379717`, 186.51834584086745`, 186.51619434026003`, 
       186.52373321675535`, 186.5386755459, 186.52617075290942`, 
       186.53039876465166`, 186.51619434026003`, 186.52873594379432`, 
       186.5146845927078, 186.51391604191488`}, "Weights" -> 
      SparseArray[Automatic, {23}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.0033397391304347823`, "SingleEvaluationTime" -> 
      0.00185503125, "Version" -> {13.1, 0}|>]]}], "}"}]], "Output",
 CellChangeTimes->{3.877127594394663*^9, 3.8771277411825237`*^9},
 CellLabel->
  "Out[365]=",ExpressionUUID->"0b3706f1-427e-49e3-8beb-bdd753e435b6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"p2m", ",", "q2m2"}], "}"}]], "Input",
 CellChangeTimes->{{3.877127746975152*^9, 3.877127752088791*^9}},
 CellLabel->
  "In[366]:=",ExpressionUUID->"0d52c23e-cfc4-488d-80ef-e0ad6edb91ff"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Predictor Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Predictor method"], 
                    TextCell["Predictor method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "NeuralNetwork",ExpressionUUID->
                   "33fc1a87-66a3-48c7-adeb-dd617661fb44"],
                  TextCell["NeuralNetwork"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "23"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Standard deviation"], 
                    TextCell["Standard deviation"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"68.0785799574437646697`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "13.2276275623642263213`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "41.6233248327153120272`3.", "\", \"", 
                    "94.5338350821722173123`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    41.6233248327153120272`3., ", ", 
                    94.5338350821722173123`3., "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Standard deviation baseline"], 
                    TextCell["Standard deviation baseline"]], 
                    "\"Standard deviation of testset values\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Standard deviation of testset values", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"42.6452732307168460579`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "8.9841273716218275069`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "24.677018487473191044`3.", "\", \"", 
                    "60.6135279739605010718`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    24.677018487473191044`3., ", ", 60.6135279739605010718`3.,
                     "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["R-squared"], 
                    TextCell["R-squared"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{
                    RowBox[{"-", "1.5484679368100913166`3."}], 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "1.4977782977152180877`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   TemplateBox[{"\"95% confidence interval: [\"", 
                    RowBox[{"-", "4.5440245322405274919`3."}], "\", \"", 
                    "1.4470886586203448587`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", \
-4.5440245322405274919`3., ", ", 1.4470886586203448587`3., "]"}], 
                   "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"12.6541923266656279878`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "3.4145000929590123562`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "5.8251921407476032755`3.", "\", \"", 
                    "19.4831925125836527002`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    5.8251921407476032755`3., ", ", 19.4831925125836527002`3.,
                     "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"2.88`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"549.`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                   FractionBox["\"Examples\"", "\"Seconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[{{{}, {
                    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
                    0.012833333333333334`], AbsoluteThickness[1.6], 
                    GeometricTransformationBox[InsetBox[
                    FormBox[
                    StyleBox[
                    GraphicsBox[
                    {RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
                    1.], CircleBox[{0, 0}, Offset[{1.8, 1.8}, {0., 0.}]]}],
                    StripOnInput->False,
                    GraphicsBoxOptions->{DefaultBaseStyle->Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}],
                    TraditionalForm], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGAQB2JGIGYC4vD+hWlPO3MdbLmuLy5IzXaQvnNNM/ZznoMx
CHzOcbiwX1jMJCoHIn82y0Fs4ZJ/20ULHPoPfdWIWZ7jcPt8+Zuzz/IcgLK2
XOvTHGRW9227mZjvUAjWkO7AvPSNct7qXIi8fK6D1f/bXn6XMhxE1rk/rOJJ
d9hn06Tr9i7L4ewZIHiS4XBA1CRv1rtkhx1yra8DO1IcuHqvbbvHnwO1L9lB
i1NE+GdfKcQ9pskOc4u3eLb6Rjh804jpP1Sb6qCXN9tQPy/Z4WEV0AbGZAeB
JRrK3c6pEPVTUx06UhXLSPFv5qHn1mJbCh3eBAJdVIxpXtl8+ZfFAvkQ/3wp
ceh+xVffxwe137DQ4UOU7q/s/XEOmkDnfb2R7QAA1maksw==
                    "]]}, {
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{236.30925303988144`, 219.17}}]},
                    RowBox[{"{", 
                    RowBox[{"236.30925303988144`", ",", "219.17`"}], "}"}]],
                    
                    Annotation[#, {236.30925303988144`, 219.17}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{247.60512248959353`, 231.6}}]},
                    RowBox[{"{", 
                    RowBox[{"247.60512248959353`", ",", "231.6`"}], "}"}]],
                    Annotation[#, {247.60512248959353`, 231.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{226.81885818345336`, 214.42}}]},
                    RowBox[{"{", 
                    RowBox[{"226.81885818345336`", ",", "214.42`"}], "}"}]],
                    
                    Annotation[#, {226.81885818345336`, 214.42}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{257.3574205809431, 229.23}}]},
                    RowBox[{"{", 
                    RowBox[{"257.3574205809431`", ",", "229.23`"}], "}"}]],
                    Annotation[#, {257.3574205809431, 229.23}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{247.21263717079896`, 181.47}}]},
                    RowBox[{"{", 
                    RowBox[{"247.21263717079896`", ",", "181.47`"}], "}"}]],
                    
                    Annotation[#, {247.21263717079896`, 181.47}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{251.0578263079159, 187.52}}]},
                    RowBox[{"{", 
                    RowBox[{"251.0578263079159`", ",", "187.52`"}], "}"}]],
                    Annotation[#, {251.0578263079159, 187.52}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{237.3571948644604, 232.97}}]},
                    RowBox[{"{", 
                    RowBox[{"237.3571948644604`", ",", "232.97`"}], "}"}]],
                    Annotation[#, {237.3571948644604, 232.97}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{198.572057180101, 184.39}}]},
                    RowBox[{"{", 
                    RowBox[{"198.572057180101`", ",", "184.39`"}], "}"}]],
                    Annotation[#, {198.572057180101, 184.39}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{215.44606662213295`, 199.15}}]},
                    RowBox[{"{", 
                    RowBox[{"215.44606662213295`", ",", "199.15`"}], "}"}]],
                    
                    Annotation[#, {215.44606662213295`, 199.15}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{159.4563513772282, 164.26}}]},
                    RowBox[{"{", 
                    RowBox[{"159.4563513772282`", ",", "164.26`"}], "}"}]],
                    Annotation[#, {159.4563513772282, 164.26}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{224.49593679337005`, 157.23}}]},
                    RowBox[{"{", 
                    RowBox[{"224.49593679337005`", ",", "157.23`"}], "}"}]],
                    
                    Annotation[#, {224.49593679337005`, 157.23}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{344.9358092100762, 153.67}}]},
                    RowBox[{"{", 
                    RowBox[{"344.9358092100762`", ",", "153.67`"}], "}"}]],
                    Annotation[#, {344.9358092100762, 153.67}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{97.21126024839619, 171.93}}]},
                    RowBox[{"{", 
                    RowBox[{"97.21126024839619`", ",", "171.93`"}], "}"}]],
                    Annotation[#, {97.21126024839619, 171.93}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{155.4432609592199, 152.04}}]},
                    RowBox[{"{", 
                    RowBox[{"155.4432609592199`", ",", "152.04`"}], "}"}]],
                    Annotation[#, {155.4432609592199, 152.04}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{170.11073453843755`, 172.67}}]},
                    RowBox[{"{", 
                    RowBox[{"170.11073453843755`", ",", "172.67`"}], "}"}]],
                    
                    Annotation[#, {170.11073453843755`, 172.67}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{236.3092604305532, 219.17}}]},
                    RowBox[{"{", 
                    RowBox[{"236.3092604305532`", ",", "219.17`"}], "}"}]],
                    Annotation[#, {236.3092604305532, 219.17}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{247.60512248959353`, 231.6}}]},
                    RowBox[{"{", 
                    RowBox[{"247.60512248959353`", ",", "231.6`"}], "}"}]],
                    Annotation[#, {247.60512248959353`, 231.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{226.81885818345336`, 214.42}}]},
                    RowBox[{"{", 
                    RowBox[{"226.81885818345336`", ",", "214.42`"}], "}"}]],
                    
                    Annotation[#, {226.81885818345336`, 214.42}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{283.25542822390577`, 155.61}}]},
                    RowBox[{"{", 
                    RowBox[{"283.25542822390577`", ",", "155.61`"}], "}"}]],
                    
                    Annotation[#, {283.25542822390577`, 155.61}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{170.11073453843755`, 172.67}}]},
                    RowBox[{"{", 
                    RowBox[{"170.11073453843755`", ",", "172.67`"}], "}"}]],
                    
                    Annotation[#, {170.11073453843755`, 172.67}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{248.5141492478976, 335.28}}]},
                    RowBox[{"{", 
                    RowBox[{"248.5141492478976`", ",", "335.28`"}], "}"}]],
                    Annotation[#, {248.5141492478976, 335.28}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{152.45489457047765`, 275.08}}]},
                    RowBox[{"{", 
                    RowBox[{"152.45489457047765`", ",", "275.08`"}], "}"}]],
                    
                    Annotation[#, {152.45489457047765`, 275.08}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{122.99096540860387`, 222.78}}]},
                    RowBox[{"{", 
                    RowBox[{"122.99096540860387`", ",", "222.78`"}], "}"}]],
                    
                    Annotation[#, {122.99096540860387`, 222.78}, 
                    "Tooltip"]& ]}}, {{}, {}}}, {{{}, {}, 
                    TagBox[
                    {GrayLevel[0.2], AbsoluteThickness[1.], Opacity[0.5], 
                    AbsoluteDashing[{2, 4}], LineBox[CompressedData["
1:eJxFxW0w03EcAPD/XMJFSg7NcsMW5VQc6zYPMw/nTJpNtmNny8M8xcyWRTWd
23V5OCQPc+GopLuIdJ27WkvbpKTadUpyoR26o3WMSg7Xwwvf34vPfdzTCjgi
CwzD4v75f9Dkzfbrt6ZDtz8esnEbc31C39689Vygx7+GTwp81J34z7BityCn
EW+CGzLPPavGb8IdDjtMFXjbsO27sl/hyvEEuMpK5UKI8YXdSLTocG0gvHRw
upj+OBieKAxqjiCHw6rua1WjPVEwK3xO+/tSDBxZeVXGZMTBo+PpblhqPLzc
dLHTN5oDDw0lU+zsTsGU2K+Wf0YSYTK2JNf38GC9h2aVWpAET8msHZQ8Ptx4
ACeepqTAmwGDH779FMCSEMWSKP80TFVtrfeyUmFGeXCiMTINbiZzDK2B6fBw
CZPl55QB+4twxD4bESy3avll+R1tw91lmh/NhCeDaP59mixYORFbym7PhnNt
Ca5T9Tlwh0k3blbmwveUJ5pn0s/A6/0Ndwe4eTBBNajLpObDNd7a9XZnMRzK
LivTWRfAw8dI9k8X0C/GdPJ3YgnctDiXff8LuponXUyIL4Q99wgd80bQZFKI
VkKTwsPK806LD9E1VM8NL18ZrGNq0jht6MY7A1Kz01n4vfCGpaIcTROveb1Z
Q4e97FmpkxTB/YqEsAgj+gKfLqXNoqOoPp1+8+hPPyysiQtoXN4Dw+Yymp28
VziAyWEzxaA4RESrHdV9RA/05ZUuozMJvb+3NGqnN5pBPmI3exRdt6+6tZWO
5puL39Yz0GRDBlYVgX5UGZxREo024kw+XBa6e+ZjShwbXaTR10YmoG1KWlb9
eegx7hXy4SR0W4CM585HZzkIK1xS0H7LTLW9EP0XcBMc0Q==
                    "]]},
                    Annotation[#, "Charting`Private`Tag$949869#1"]& ]}, {}}},
                   Axes->{False, False},
                   AxesLabel->{None, None},
                   AxesOrigin->{0, 0},
                   DisplayFunction->Identity,
                   Frame->{{True, False}, {True, False}},
                   FrameLabel->{{
                    FormBox[
                    TagBox["\"actual value\"", HoldForm], TraditionalForm], 
                    None}, {
                    FormBox[
                    TagBox["\"predicted value\"", HoldForm], TraditionalForm],
                     None}},
                   
                   FrameTicks->{{Automatic, Automatic}, {
                    Automatic, Automatic}},
                   GridLines->{Automatic, Automatic},
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.5], 
                    AbsoluteThickness[1], 
                    AbsoluteDashing[{1, 2}]],
                   ImageSize->250,
                   
                   Method->{
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}},
                   
                   PlotRange->{{0., 357.94134803056437`}, {0., 
                    357.94134803056437`}},
                   PlotRangeClipping->True,
                   PlotRangePadding->{{0, 0}, {0, 0}},
                   Ticks->{Automatic, Automatic}],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    PredictorMeasurementsObject[<|
     "Model" -> PredictorFunction[<|
        "ExampleNumber" -> 17, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical"|>, 
                "f2" -> <|"Type" -> "Numerical"|>, 
                "f3" -> <|"Type" -> "Numerical"|>, 
                "f4" -> <|"Type" -> "Numerical"|>, 
                "f5" -> <|"Type" -> "Numerical"|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor[
                   "Transpose", <|"FeatureNumber" -> 5|>], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f1f2f3f4f5)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Processors" -> {
                MachineLearning`MLProcessor[
                "SynthesizeMissingValues", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Distribution" -> 
                  LearnedDistribution[<|
                    "ExampleNumber" -> 17, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7100669430970155518|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {649.5294117647059, 16.41176470588235, 
                    50.411764705882355`, 64.70588235294117, 
                    37.470588235294116`}, 
                    "StandardDeviation" -> {40.86292386397267, 
                    6.562449538444979, 9.311970938966981, 7.176470588235281, 
                    10.13507391109661}, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4772792621860920984|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{
                    0.3294464620128585, -0.24670478291864095`}, {
                    0.5266978779192711, -0.20091067530452414`}, {
                    0.6075928250009178, -0.38220632047567493`}, \
{-0.31353029417700407`, -0.6809418760462183}, {0.3828630142795621, 
                    0.5375947736621413}}, 
                    "Precisions" -> {0.5140556558990445, 0.863155175120625}, 
                    "NoisePrecision" -> 1.5886875059025845`, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157116188`, \
-0.0018584586044933286`, -0.00024375769149080384`, 8.562084148579801*^-6, 
                    0.00021587557870743752`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7856623779326335863|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "Key" -> "(f1f2f3f4f5)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 2, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157115991`, \
-0.001858458604493322, -0.00024375769149081688`, 8.562084148556943*^-6, 
                    0.00021587557870744406`}, 
                    "StandardDeviation" -> {0.9973443489182671, 
                    1.0001052004380495`, 1.000282671403912, 
                    0.9982239732130878, 1.0001417047326489`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 5, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1764544953284831100|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157115991`, \
-0.001858458604493322, -0.00024375769149081688`, 8.562084148556943*^-6, 
                    0.00021587557870744406`}, 
                    "StandardDeviation" -> {0.9973443489182671, 
                    1.0001052004380495`, 1.000282671403912, 
                    0.9982239732130878, 1.0001417047326489`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 5, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1764544953284831100|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 5, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, 
                    "ID" -> 4922843929423532927|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, 
                    "ID" -> 365386638938414886|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, 
                    "ID" -> 8084762059231395715|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, 
                    "ID" -> 717539068447703646|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, 
                    "ID" -> 3403397587327662634|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.089636, "MaxTrainingMemory" -> 193192,
                     "DataMemory" -> 6400, "FunctionMemory" -> 51568, 
                    "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 11, 10, 20, 54, 42.044446`8.376283612062736}, 
                    "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}|>,
                     "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-4.406902047628646, -4.406902047628646, \
-4.168656228344961, -4.127362310486287, -3.8790302555384786`, \
-3.8157144014569915`, -3.7752140087029566`, -3.538288180712346, \
-3.4944058955364734`, -3.4490724744232923`, -3.432924033093133}, 
                    "LeftBoundary" -> -4.168656228344961, "LeftScale" -> 
                    0.11912290964184223`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[19.043784917961784`, 0.5368425024100205], 
                    "EntropySampleSize" -> 10|>], 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "EvaluationStrategy" -> "ModeFinding", 
                  "Version" -> {13.1, 0}, "ID" -> 5966421770916112094|>], 
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1020916197684206682|>], 
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Mean" -> {649.5294117647059, 16.41176470588235, 
                   50.411764705882355`, 64.70588235294117, 
                   37.470588235294116`}, 
                  "StandardDeviation" -> {40.86292386397267, 
                   6.562449538444979, 9.311970938966981, 7.176470588235281, 
                   10.13507391109661}, 
                  "Output" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 2859614146361296001|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Imputed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|"f1" -> <|"Type" -> "Numerical"|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor["List"], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1892463177288152845|>], 
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Mean" -> {186.5176470588235}, 
                  "StandardDeviation" -> {61.9974481950585}, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 5696177821155824089|>], 
                MachineLearning`MLProcessor[
                "FromVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 5443556393657702637|>], 
                MachineLearning`MLProcessor[
                "FirstValues", <|
                 "Info" -> <|"Type" -> "Numerical", "Weight" -> 1|>, "Key" -> 
                  "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                  False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
           "InverseProcessorFunction" -> (186.5176470588235 + 
            61.9974481950585 #& ), 
           "ProcessorFunction" -> (-3.008472969274401 + 
            0.016129696126423874` #& ), "Name" -> "value", 
           "Quantiles" -> {-1.4258271853496902`, 2.7177304525673383`}, "Mean" -> 
           186.51764705882354`|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> (DiracDelta[#2 - #]& ), 
         "Threshold" -> 0, "PerformanceGoal" -> Automatic, "BatchProcessing" -> 
         Automatic, 
         "Model" -> <|
          "Method" -> "NeuralNetwork", "Network" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>,
               "Outputs" -> <|
               "Mean" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                "LogStd" -> 
                NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
              "Nodes" -> <|
               "2" -> <|
                 "Type" -> "NetArray", 
                  "Arrays" -> <|
                   "Array" -> RawArray["Real32",{-1.349244475364685}]|>, 
                  "Parameters" -> <|
                   "Dimensions" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {1}|>, "Inputs" -> <||>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>|>, 
                "1" -> <|
                 "Type" -> "Chain", 
                  "Nodes" -> <|
                   "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1:eJwVkX001Xccx6+nPF0it1keargpD62Op7nc7+dbHvLQHKFmq84p8tCK5inV
MSLSJI5RCUdWNyq3stCR7v19vo3rIOYpcbGOhXXGYnZttLZp+uP1Pud13n++
rCK/Co1R5/F4yTorExpxckdSUsTpsFXvJToiztkp7v3ptILWCpK2JLSVXJQH
d7mwwrCPaV9ZKV1zby0z1VBj6UnFJGi7G5E5e7KU0w7i8J9ukrLVncBrVaDx
6G6usWMGtjVvwO2yepKXcIqLChZxyoEzsGoimckPJcsqb3PYrOzHtI9e4+Tb
/ZAdZg8zGWEY6c6jT+7vI8ZhlbBQJ6DjzQasdzkT9fN12ZJlMkSWNYg7H4hR
uKMVAmLjyNfxvfjc/xUYuZeQ8fZqFHVfxkJhEHoddQDB4hiX9nKWpG76EAZy
1CHVy49m8Io4/2EXGK05AyOJ2eIvbwTDhiUfqshNBCO3YiisyQFDS19492MX
PjxuIw6pl5JL9WforjvFsnwrB6x6bslcJ7SYUHcvvg1Rcncr4slvaiq8D9ny
zFEBK947Qp5WlRBRVQkXbeGP5beqiJAYgd7Uf+Rg9Tw+fJeH0/e0aZUglkZ6
6zJ/O1faoJ4FMTM8Njd/EtjUEGe6ToGDY+bk6SdDUHvjHLOO2ExLAwzoz752
yKrWyRMDbkLWFB+/TWgE41M6WLKVT+szvZlpvj0Xb6VBg+uauU7PA5B8cRGj
Qw1p3eQSuHmLWArhc5LzndyeAREO/jAL6f3lODeqQ5tc7Sj7Ro6hUmP617wC
bevc5R2H7bF49nNILXOER6ousiUnhvb5eaMsYx96iJ6hchpQ4FkMVi0NOOnj
BJXtofSfN8OgqHAkW+VHOG1bRzbwnYQV1Fmw3BZTGH5lBl6utyD/QC/G9ijJ
LvNW/F2lDb+eOAhlRuo4EjiGHmFNRM3NAIy9+EwmNaG/2Efj1Xg+FL1uxAtC
Q9op5dGdlzSp+moLurEb8XhIFDTr6TOV0VoqidrIBPufibN0hOJ+m2BQxfWR
rD/ssMnRj9PaPA25CfHixWUT6tJWywVaKuD65esk+zMt6un9KVdp7YkaMypZ
j/M1HDqbIxc2FXC+EWrMozQfDXuroSboMLpHb2DXivTAW/8oWfPCnIiS78rU
aq3pvPkT/KKuDEzae0l4qEq+s+8ImT32p0x7WEiFdwpg5I0U85YvQJF+5WOR
gyYtYS5Q/rKFBF7xAbPwNu5BvwL/5p/n9uxeT1fv7+Uy0xeIzff2TKIQMo+p
Qxibkk+Uj66SNC0+bTWuIGeDMtB6nMnpbe6x9EUHLOv+K04bLyCb3NajMrcf
1sZV08WCJs5wzo41tXdzW3LN6QfHNJFaDIJEeoK1X9GBibyelX6asunGbWC2
YEj/B4tc5wg=
                    "], "Biases" -> 
                    RawArray["Real32",{-0.006046982016414404, 
                    0.01094768289476633, -0.01573706977069378, 
                    0.0047432659193873405`, -0.004794590640813112, \
-0.00441701477393508, 0.007639972493052483, 
                    0.01084557082504034, -0.005566687323153019, \
-0.0013205497525632381`, 0.014802632853388786`, -0.006487568374723196, 
                    0.009240119718015194, 
                    0.0021974407136440277`, -0.00760944839566946, 
                    0.006094099022448063, -0.0016266591846942902`, \
-0.005242404527962208, -0.012635694816708565`, -0.009575792588293552, 
                    0.012568864971399307`, 
                    0.005971658509224653, -0.009663637727499008, 
                    0.006410474423319101, -0.005092632491141558, 
                    0.0028124761302024126`, 0.005427641794085503, 
                    0.003340229857712984, -0.010113236494362354`, 
                    0.004436654504388571, 0.0058419788256287575`, 
                    
                    0.018462566658854485`, -0.003280350472778082, \
-0.010081307962536812`, -0.0029648032505065203`, -0.00011102357530035079`, 
                    0.0069335815496742725`, 0.013816557824611664`, 
                    0.009950462728738785, 0.022978467866778374`, 
                    0.007311551366001368, 
                    0.0021261130459606647`, -0.022344592958688736`, \
-0.008314860984683037, -0.00019943434745073318`, -0.008403168991208076, 
                    0.0012194984592497349`, 0.003228035755455494, 
                    0.004011283162981272, 0.01198896486312151}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 5, "$InputDimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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
                    "], "Biases" -> 
                    RawArray["Real32",{-0.015191205777227879`, 
                    0.00992884486913681, -0.007910537533462048, 
                    0.00468669505789876, -0.00858481414616108, \
-0.003707603085786104, -0.0015921351732686162`, 
                    0.006122278980910778, -0.0007066000252962112, 
                    0.008964158594608307, 0.0018779976526275277`, 
                    0.01389048621058464, 0.0020606450270861387`, 
                    0.006666568573564291, 0.006086943671107292, 
                    0.003852485679090023, 
                    0.001534137176349759, -0.00703401118516922, \
-0.012214618735015392`, 
                    0.004385023843497038, -0.004440641961991787, \
-0.0024265428073704243`, 
                    0.00453503243625164, -0.008752086199820042, \
-0.004861998837441206, -0.012879853136837482`, -0.004502273164689541, 
                    0.002359964419156313, 0.004534502513706684, 
                    0.009017699398100376, -0.006794629152864218, 
                    0.0019111580913886428`, -0.013047679327428341`, \
-0.0019220622489228845`, 
                    0.006048730108886957, -0.0049022892490029335`, \
-0.0015169120160862803`, 0.007940838113427162, 
                    0.009368786588311195, -0.015916137024760246`, \
-0.0021480126306414604`, -0.0126749686896801, -0.009588179178535938, \
-0.004214525688439608, -0.00006005383329465985, 0.004377466160804033, 
                    0.01086745597422123, -0.011768260039389133`, 
                    0.008027357049286366, -0.011080080643296242`}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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

                    "], "Biases" -> 
                    RawArray["Real32",{0.003958416637033224, 
                    0.004005723167210817, -0.007912641391158104, 
                    0.007184411399066448, -0.00028486401424743235`, \
-0.007075212895870209, -0.0033020651899278164`, 0.003618840128183365, 
                    0.010765993036329746`, -0.0033256516326218843`, 
                    0.0009680944494903088, -0.002772249048575759, \
-0.003420497989282012, 
                    0.0017016272759065032`, -0.001040459144860506, \
-0.007172346115112305, -0.0006041122251190245, 
                    0.0037209908477962017`, -0.0031647218856960535`, 
                    0.009016493335366249, 
                    0.021091680973768234`, -0.0016538702184334397`, 
                    0.0014768631663173437`, -0.010863260366022587`, \
-0.0060304864309728146`, -0.007687366101890802, 
                    0.006995909381657839, -0.00729708606377244, 
                    0.007859603501856327, 
                    0.0004169284366071224, -0.0105108842253685, 
                    0.009919397532939911, 0.003148322692140937, 
                    0.0033018167596310377`, -0.0015713160391896963`, 
                    0.013760658912360668`, -0.006225240882486105, 
                    0.010298637673258781`, -0.006064248271286488, 
                    0.0024536754935979843`, -0.0030491393990814686`, \
-0.0008770367712713778, -0.012365905568003654`, -0.010700110346078873`, \
-0.0012887706980109215`, -0.005197481717914343, 0.0018902270821854472`, 
                    0.005515063181519508, 
                    0.004066209774464369, -0.014230777509510517`}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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
K6PKe6t/0IsLq/hDYjJ8azFkjSfx4rChl/lAWG9OiEgH1xmxgk7VOEy//ZWK
r4Ti51EDqMFcoKbzv4TX/RXZanGp0LR7L5+ttcGsFYogF/gI8i1VuOeWw7DT
vhtuKTcXbpjL8Okl17Bdqwdi9W2InTkenk+eBPqaZ0SvkL9im68Gtvw0gUbV
sZh6MIfnvEkQqx+ni/HjTPF5xxDeZKAC423+iPuW74SjZsSB7cuh8U02uGxe
hdHSSlyunQIZa9fxy5gCOlJuyx6L3OD6i3BQq28VdvcdSjVFvXH/iTz6rbUV
F/WI4H6TFNFbN18MXDOMTxorcKiTGzmPmouqIaX0xVUGm4LG4hvqSft2Z1BP
sY76VMjiuU2efF39j1A3Pxq/Z0Zh6c+9gk2dNqVkBWDgpbl8bYIr+pmb4auP
wHJl3yF/QhoFrfwP3gtXxXspa/h3tjFdnJgDb4+nUmdzEXyY4Us6vY0h7sJl
mpumwwoNx/ntMmXUMNTATdsQ7RsGcEzcafzVUwZrVl+E1as+CLkVGmwzfS4F
1r6jQovL4lTLJKEe9sGaV2vxmde5f25tQQf29+GMkZ1woUud7U0ihTsDvFl7
2x+6uzhLWj/oMGgcKKTngfN50AkZrrzsSZsHaXDp0p4ctDqGOTtcfPkjG5aZ
TkL5MyHgsnQOV8zyx6s7FOiYrTf1vVeEL6zKJTg9A96sahCdDY7gnqU9ePdz
a+GSih1FLntMRsa9+PwSQ+qmqoWfRtSS/N1TOLfogRDgcBDyJW7sd7VW/NH7
DFCytXhx32tB76Mumu85SvrzztOrhyHstHOWREFxDzwe0iwkxfuhjmYhW5/S
FyXuMWLIxlcQ7LoAyz70IsejueA8Ygl+KmBY2/MtBagX0/J1zizfcoUmu1YJ
Vco+VDTYBwOrhrFRtIROL/0iCKsiwX7icbrQq5UCAflL92bQbFVFnaHjMfBW
pbi7ZRd4XIjF8s/vhJZtNaLPzqmkqS7HxdsuiyrNETD2bDlpFT4Rwh+P5Z1G
BiKM0sX17zzEiVkeYmHBd3jY4zgu1LbnjS4hPFsnFt43fgEl/avwX+YkWFjj
ii7mm0Ct8gLppNyl/iMjOdvdhMa8arddv7uUL46Ikzy+okIT8zvFqx/fU0an
Muo0+OHbI/MhVsWQpn2fzv8Z+tPEwL3wsLLM7k12EC+fdRquvoyD0aV1lNox
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
                    "], "Biases" -> 
                    RawArray[
                    "Real32",{-0.011454882100224495`, \
-0.0024466600734740496`, -0.0062698060646653175`, -0.006350464187562466, \
-0.01420646719634533, -0.0020564538426697254`, -0.004923837259411812, \
-0.007839137688279152, 0.0018522355239838362`, 
                    0.0033349047880619764`, -0.005911992397159338, 
                    0.007079094648361206, -0.008707951754331589, 
                    0.0037979090120643377`, -0.012772182933986187`, \
-0.005552406422793865, 0.0018411882920190692`, -0.0027217422612011433`, 
                    0.002663832390680909, -0.00036231084959581494`, \
-0.010474298149347305`, -0.010254411026835442`, -0.001265915110707283, \
-0.0027711489237844944`, -0.00960750412195921, -0.009026489220559597, \
-0.01522766798734665, 0.008727367036044598, 0.00820887926965952, 
                    0.006508607883006334, 0.013287140056490898`, 
                    0.006551782134920359, -0.014525720849633217`, 
                    0.014075977727770805`, 0.013234032317996025`, 
                    0.0066650933586061, 0.004600803833454847, 
                    0.006622860208153725, 0.0047165281139314175`, 
                    0.005374656990170479, -0.0028713305946439505`, \
-0.0045578936114907265`, 0.0027967377100139856`, 
                    0.008611409924924374, -0.010763956233859062`, \
-0.009074881672859192, -0.010235066525638103`, -0.008815506473183632, 
                    0.001875711721368134, -0.003190170507878065}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "8" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "9" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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
+0eJrZG+L2TFt7l9xh2otPSt0N/aCHtCAsDcJwV3VZzlqqM1uODNKtyGmzbU
2ffDruiCGdvWHUW/rwdS3S9b5qYyierlvOHoTUeQkq0kVfn5bJR/LN+bew9e
Z1QL7+8mzvKnL6V/t6LIiz048nMK7JcbYTt26BjPndNkivpAHk8UmdryzWzv
Rwl21HYQHm6PhR+zb+GhDAGzf+bL+k9H8ravfIWjDsbQzGMJuODhN9i1sQFO
6N6iJbvi4KeHOTOvkWCibn54KHEYffUSZQ4KCmxqWTsnn30Do7rjMPqoHLmv
P0SmLBNuGYtQZt9kqKqw5Zx2KlC3Zis3udKN4ZJpbO6CozAs/xOcMfoL2T/G
s/W355ENDKKs1HtoVFNn2uu0qKn8E/+uNRnUHM9zap6PYfOsE/D6sSZT+7Ef
94dV0oH9ohTXrMxWNUxirrOb+Lii57hhnDjXc+warj2zk3VmVbKvz8ZQtLoI
Nez2RKO5Jfx1qyJIerSazRCVxAkFVTBY7cwqpV9jdlgFzFslJpTZ2IGVH3ay
yDInwaGwu8iJy0CQ2QI4MfCASzp1Ab82OlL3r614b14p6Yas45ZDOT+iSgA2
iasoK/Ed53nICoKPbKepPdOwMv8BqCwYTe1+b/g2j7Wwynose/HiMhv6oIoK
kc5gM1UNjWLW8/l5JUD3/IRrpq8TcqvzMM3HFV+e0cCFjcpwQGM6ZOppsKvJ
eVD+3xiaEryUovUlsVRjBWaFjqH8ZmM2N/MCVm98jUftH9JME2dmrvEfZx/d
xBYclqIOPxfB/IoJ5KLqIfjUuIWPmnMW3NPKmIlFNyvRtWSJp9L4hQuPsp/B
PK5cI8Xsd6exVxe30VurOHxwTh5XXzoBPzucQEZ+I2xMiccpW8Owf3McbA6s
hBOXs6Db7yQfEJAFep0T+Tu1d8je/YLgunQ7GmsGwHNpN6447A526p6Flp36
mHFVnBojjmCFTgNvNW4+1npl8gMFWrCieTJtebIfV4wvwCWXxXHGFm/MH96H
l+QewMqCmXB0n4C5tq9gh+o7+f1K8fyRKwfwYsks9kFWmWXnRfMjpk6iC291
2CPrI6C64N8tDBrQiU5feJRyhC5+0ue6tBNo9KS/YLC8FlLRRaC13AnXXHBl
66PPs6PTFEnhVzIZto2kGR2n4M7Ki6AgWYyeVcMEYYtSuFyfVfRsqT0pWX5C
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
                    "], "Biases" -> 
                    RawArray[
                    "Real32",{-0.003890459192916751, -0.009899696335196495, 
                    0.011075889691710472`, 0.012002960778772831`, 
                    0.0005898661911487579, 
                    0.022760450839996338`, -0.0017692804103717208`, 
                    0.005867197178304195, 0.0043998039327561855`, 
                    0.014974010176956654`, -0.011614223010838032`, \
-0.003612771863117814, 0.0018114635022357106`, 0.006100725848227739, 
                    0.024660823866724968`, 
                    0.0019417561125010252`, -0.00084365822840482, 
                    0.005112693179398775, -0.004272230435162783, 
                    0.0022969264537096024`, -0.014299198053777218`, 
                    0.002154908375814557, 
                    0.004296044819056988, -0.006315417587757111, 
                    0.0054327878169715405`, -0.0015854031080380082`, \
-0.012183688580989838`, -0.007415319327265024, -0.003730680327862501, \
-0.007657618261873722, 
                    0.005530729424208403, -0.006119224708527327, \
-0.006294914521276951, 
                    0.0025990866124629974`, -0.02020091935992241, \
-0.010795877315104008`, -0.005420763976871967, -0.008827952668070793, \
-0.006055284757167101, -0.0057368408888578415`, -0.004129256121814251, \
-0.0034777687396854162`, 0.002275161212310195, 
                    0.008353485725820065, -0.004834156017750502, \
-0.0074602095410227776`, 0.008196385577321053, 
                    0.0021919775754213333`, -0.009609933942556381, 
                    0.01513321977108717}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "11" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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
+jl3EdLKh4L26mzhq3Qz/B82+hvl
                    "], "Biases" -> 
                    RawArray[
                    "Real32",{-0.009307891130447388, -0.010295778512954712`, \
-0.020732589066028595`, -0.013359702192246914`, 
                    0.0020933884661644697`, -0.009114128537476063, 
                    0.00702575733885169, -0.03471606224775314, \
-0.001055296859703958, -0.0015444025630131364`, -0.006065328139811754, 
                    0.0008057019440457225, 
                    0.006259543355554342, -0.03326950967311859, 
                    0.013674905523657799`, -0.002381682861596346, 
                    0.01283654011785984, -0.013366002589464188`, \
-0.0031081652268767357`, 0.006257378030568361, 
                    0.010249562561511993`, -0.0012249996652826667`, \
-0.011047985404729843`, -0.008879889734089375, -0.006087625399231911, 
                    0.006269737612456083, 
                    0.006964119151234627, -0.0128671545535326, \
-0.010994422249495983`, -0.0005347082042135298, 0.0031243343837559223`, 
                    0.01187820453196764, -0.0052745952270925045`, 
                    0.014310749247670174`, -0.0017243404872715473`, \
-0.00924238283187151, -0.018464185297489166`, -0.00623256666585803, \
-0.0028044525533914566`, -0.003753631142899394, 
                    0.0010286940960213542`, -0.005507062654942274, 
                    0.01283167488873005, 0.0029130084440112114`, 
                    0.007418884430080652, -0.005398102104663849, \
-0.0023388261906802654`, 0.0010039197513833642`, 0.017699776217341423`, 
                    0.003882001154124737}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "12" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "13" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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

                    "], "Biases" -> 
                    RawArray["Real32",{
                    0.008605330251157284, -0.013563851825892925`, \
-0.010247569531202316`, 0.0077054682187736034`, 
                    0.00989424716681242, -0.02047424204647541, 
                    0.0025077015161514282`, -0.004346033558249474, \
-0.005007414612919092, 
                    0.013156643137335777`, -0.014213476330041885`, \
-0.02974701300263405, 0.004919057246297598, 
                    0.005460901185870171, -0.013274638913571835`, \
-0.00980954710394144, -0.0002228411176474765, -0.007731318008154631, 
                    0.006746198050677776, -0.014977846294641495`, \
-0.006894973572343588, 
                    0.002596050500869751, -0.007050016894936562, \
-0.007096574641764164, 0.0008390707662329078, -0.013392195105552673`, 
                    0.004832372069358826, -0.007933628745377064, \
-0.0018833448411896825`, -0.003652469953522086, -0.002458451082929969, 
                    0.004565519746392965, -0.006077323574572802, 
                    0.004803829360753298, 
                    0.005920048803091049, -0.03271349519491196, 
                    0.006789540871977806, -0.0055248248390853405`, 
                    0.003520538564771414, -0.0011972173815593123`, 
                    0.003071031766012311, 0.003139632288366556, 
                    0.017375683411955833`, -0.0033819302916526794`, 
                    0.006370672956109047, 
                    0.004703974816948175, -0.007177188992500305, \
-0.004041415173560381, -0.011589898727834225`, -0.006907782983034849}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "14" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "15" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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
Ke/hjg==
                    "], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0006336949882097542, -0.0036344307009130716`,
                     0.0006130927940830588, 
                    0.0022091176360845566`, -0.005063506308943033, \
-0.023275991901755333`, -0.0014721878105774522`, -0.01004006341099739, \
-0.011116872541606426`, 0.0010409848764538765`, 
                    0.003875535214319825, -0.003946042153984308, \
-0.002830029930919409, -0.007085997611284256, 
                    0.002824218478053808, -0.00820755772292614, \
-0.0004634876095224172, -0.0035649628844112158`, -0.007489099632948637, \
-0.0045754872262477875`, 0.0035229730419814587`, -0.008536048233509064, 
                    0.0047198752872645855`, -0.01001805905252695, \
-0.010288627818226814`, -0.005234026350080967, -0.0064338194206357, \
-0.004237765911966562, -0.0018292965833097696`, 
                    0.007385347504168749, -0.0066727809607982635`, \
-0.0013747266493737698`, -0.004189292434602976, -0.005138010252267122, \
-0.005556740332394838, -0.010280081070959568`, -0.0006718160584568977, \
-0.002747728256508708, 0.002193993655964732, -0.002315705409273505, 
                    0.0014361236244440079`, -0.0051640672609210014`, 
                    0.001792451017536223, -0.009429221041500568, \
-0.006163599900901318, 0.00030756607884541154`, -0.0035621679853647947`, 
                    0.002510549034923315, 
                    0.0020478488877415657`, -0.013989239931106567`}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "16" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "17" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.013634650968015194`, -0.10313615202903748`, 
                    0.045605313032865524`, -0.09101683646440506, 
                    0.11689754575490952`, 0.10403399169445038`, 
                    0.050191204994916916`, -0.1290348321199417, 
                    0.1029035821557045, -0.26533690094947815`, \
-0.010752696543931961`, -0.06381276994943619, 0.05459394305944443, 
                    0.0908244326710701, 0.004103268962353468, 
                    0.06316772848367691, 0.07258658111095428, 
                    0.0908803716301918, 
                    0.09701042622327805, -0.10368365049362183`, \
-0.1389431357383728, -0.0021193011198192835`, 0.10442284494638443`, 
                    0.0949895903468132, -0.08022850006818771, \
-0.07051189988851547, 0.15945148468017578`, 0.08642613887786865, 
                    0.11687086522579193`, 
                    0.22529108822345734`, -0.19818003475666046`, \
-0.1927887350320816, -0.01008946169167757, 0.2750571370124817, 
                    0.1598864644765854, -0.1606169044971466, \
-0.17477458715438843`, -0.10940900444984436`, -0.10037269443273544`, \
-0.07840756326913834, -0.05113198235630989, -0.0465751551091671, \
-0.0627509355545044, -0.10523460805416107`, 0.11102096736431122`, 
                    0.1367153823375702, 
                    0.05152688920497894, -0.09076007455587387, \
-0.07642100751399994, -0.04319033399224281}}], "Biases" -> 
                    RawArray["Real32",{-0.0007615134818479419}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"]}, 
                  "Inputs" -> <|
                   "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath["Inputs", "Input"], 
                NeuralNetworks`NetPath["Outputs", "LogStd"] -> 
                NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                NeuralNetworks`NetPath["Outputs", "Mean"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "1", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], 
           "Training" -> <|
            "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
             TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
             "TotalTrainingTime" -> 3.210468, "MeanInputsPerSecond" -> 
             4360.734945808523|>, "InputType" -> "NumericalVector", 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|
               "(f1f2f3f4f5)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Output" -> <|
               "(f1f2f3f4f5)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Processors" -> {
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Mean" -> {-0.0812613174801503, -0.11663060452178584`, \
-0.07748450547430653, -0.09780138648281839, 0.19723469688244114`}, 
                  "StandardDeviation" -> {1.0676099376867996`, 
                   0.890189106027844, 0.9884952360559629, 1.0008109855781255`,
                    0.886800952000408}, 
                  "Output" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 2283713745384451654|>], 
                MachineLearning`MLProcessor[
                "FirstValues", <|
                 "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>, 
                  "Key" -> "(f1f2f3f4f5)", "Invertibility" -> "Perfect", 
                  "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
              "Missing" -> "Allowed"|>], "FeatureNumber" -> 5, 
           "DistributionData" -> {NormalDistribution, Automatic}, 
           "Calibrator" -> None, "PostProcessor" -> 
           MachineLearning`MLProcessor["Identity"], 
           "Options" -> <|
            "NetworkType" -> <|
              "Value" -> "FullyConnected", "Options" -> <||>|>, 
             "NetworkDepth" -> <|"Value" -> 8, "Options" -> <||>|>, 
             "NumberOfParameters" -> <|"Value" -> 17800, "Options" -> <||>|>, 
             "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>,
              "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
             "Dropout" -> <|"Value" -> None, "Options" -> <||>|>, 
             "NetInitializationMethod" -> <|
              "Value" -> Automatic, "Options" -> <||>|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}, 
               "Options" -> <||>|>, 
             MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
             ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
             "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
             TrainingProgressReporting -> <|
              "Value" -> None, "Options" -> <||>|>, 
             "NetTrainOptions" -> <|
              "Value" -> {
                LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
               "Options" -> <||>|>, 
             "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
             "ValidationSetRatio" -> <|
              "Value" -> None, "Options" -> <||>|>|>|>, 
         "TrainingInformation" -> <|
          "Reporting" -> None, "TrainingFunction" -> Predict, "EMIterations" -> 
           Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 
           4.127093226053854, "PreprocessingTime" -> 
           0.251263`5.851673534301465, "LossName" -> "StandardDeviation", 
           "BestModelInformation" -> 
           Dataset[<|
             "MeanCrossEntropy" -> 
              Around[8.212578737341302, 2.891301425403568], 
              "StandardDeviation" -> 
              Around[64.43283545804485, 18.239050621373703`], 
              "EvaluationTime" -> 0.010540925533894597`, "TestSize" -> 3, 
              "ModelMemory" -> 167112, "ModelUtility" -> -5.150234236667144, 
              "TrainingSize" -> 14, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 743696, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[8.212578737341302, 2.0444588443571936`]}, 
              "StandardDeviationHistory" -> {
                Around[64.43283545804485, 12.896956376778057`]}, 
              "Configuration" -> {
               "NeuralNetwork", "NetworkType" -> "FullyConnected", 
                "NetworkDepth" -> 8, "NumberOfParameters" -> 17800, 
                "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
                "Dropout" -> None, "NetInitializationMethod" -> Automatic, 
                "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
                MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
                "EarlyStopping" -> False, TrainingProgressReporting -> None, 
                "NetTrainOptions" -> Automatic, "LossFunction" -> 
                Automatic}|>, 
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
               "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
               "TrainingTime", "TrainingMemory", "ExperimentCount", 
               "MeanCrossEntropyHistory", "StandardDeviationHistory", 
               "Configuration"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, 1], 
               TypeSystem`Vector[TypeSystem`AnyType, 1], 
               TypeSystem`Tuple[{
                 TypeSystem`Atom[String], TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`AnyType}]}], <||>], "Configurations" -> 
           Dataset[<|<|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 8|>, 
                  "NumberOfParameters" -> <|"Value" -> 17800|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> None|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[8.212578737341302, 2.891301425403568], 
                   "StandardDeviation" -> 
                   Around[64.43283545804485, 18.239050621373703`], 
                   "EvaluationTime" -> 0.010540925533894597`, "TestSize" -> 3,
                    "ModelMemory" -> 167112, 
                   "ModelUtility" -> -5.150234236667144, "TrainingSize" -> 14,
                    "TrainingTime" -> 3.1622776601683795`, "TrainingMemory" -> 
                   743696, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[8.212578737341302, 2.0444588443571936`]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.43283545804485, 12.896956376778057`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.010540925533894597`, "ModelMemory" -> 
                  167112, "StandardDeviation" -> 
                  Around[64.43283545804485, 18.239050621373703`], 
                  "TrainingMemory" -> 743696, "TrainingTime" -> 
                  3.6998648623970043`|>, "Index" -> 1|>, <|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 4|>, 
                  "NumberOfParameters" -> <|"Value" -> 7800|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> None|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 1, "ModelMemory" -> 1, 
                  "StandardDeviation" -> 1, "TrainingMemory" -> 1, 
                  "TrainingTime" -> 1|>, "Index" -> 2|>, <|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 8|>, 
                  "NumberOfParameters" -> <|"Value" -> 17800|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> 0.01|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 1, "ModelMemory" -> 1, 
                  "StandardDeviation" -> 1, "TrainingMemory" -> 1, 
                  "TrainingTime" -> 1|>, "Index" -> 3|>, <|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 2|>, 
                  "NumberOfParameters" -> <|"Value" -> 2800|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> 0.01|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 1, "ModelMemory" -> 1, 
                  "StandardDeviation" -> 1, "TrainingMemory" -> 1, 
                  "TrainingTime" -> 1|>, "Index" -> 4|>, <|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 4|>, 
                  "NumberOfParameters" -> <|"Value" -> 7800|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> 0.01|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 1, "ModelMemory" -> 1, 
                  "StandardDeviation" -> 1, "TrainingMemory" -> 1, 
                  "TrainingTime" -> 1|>, "Index" -> 5|>, <|
               "Value" -> "NeuralNetwork", 
                "Options" -> <|
                 "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                  "NetworkDepth" -> <|"Value" -> 2|>, 
                  "NumberOfParameters" -> <|"Value" -> 2800|>, 
                  "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                  "L2Regularization" -> <|"Value" -> None|>, 
                  "Dropout" -> <|"Value" -> None|>, 
                  "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                  "OptimizationMethod" -> <|
                   "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                  MaxTrainingRounds -> <|"Value" -> 1000|>, 
                  ValidationSet -> <|"Value" -> Automatic|>, 
                  "EarlyStopping" -> <|"Value" -> False|>, 
                  TrainingProgressReporting -> <|"Value" -> None|>, 
                  "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                  "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
               "Experiments" -> {}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 1, "ModelMemory" -> 1, 
                  "StandardDeviation" -> 1, "TrainingMemory" -> 1, 
                  "TrainingTime" -> 1|>, "Index" -> 6|>|>, 
             TypeSystem`Assoc[
              TypeSystem`Struct[{"Value", "Options"}, {
                TypeSystem`Atom[
                 TypeSystem`Enumeration["NeuralNetwork"]], 
                TypeSystem`Assoc[TypeSystem`AnyType, 
                 TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
              
              TypeSystem`Struct[{
               "Experiments", "PredictedPerformances", "Index"}, {
                TypeSystem`Vector[
                 
                 TypeSystem`Struct[{
                  "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                   "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
                   "TrainingTime", "TrainingMemory", "ExperimentCount", 
                   "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
                  TypeSystem`AnyType, TypeSystem`AnyType, 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[TypeSystem`AnyType, 1], 
                   TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
                 TypeSystem`AnyLength], 
                
                TypeSystem`Struct[{
                 "EvaluationTime", "ModelMemory", "StandardDeviation", 
                  "TrainingMemory", "TrainingTime"}, {
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Integer], TypeSystem`AnyType, 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Atom[Real]}], 
                TypeSystem`Atom[Integer]}], 6], <||>], "MaxTrainingSize" -> 
           17, "PreprocessorEvaluationTime" -> 3.58984375*^-6, 
           "PreprocessorMemory" -> 76920, "InputDimension" -> 5, 
           "OutputDimension" -> 1, 
           "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
           True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
           "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
           "LastReportingTime" -> 3.877102485820874`16.341082270290514*^9, 
           "RoundPartitioning" -> 
           Dataset[{<|
              "TrainingSizes" -> 14, "TimeBudgets" -> 2.5237090947142975`, 
               "ElapsedTimes" -> 3.594288, "ExperimentCounts" -> 1|>}, 
             TypeSystem`Vector[
              
              TypeSystem`Struct[{
               "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
                "ExperimentCounts"}, {
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer]}], 1], <||>]|>, "AnomalyDetector" -> 
         None, "Log" -> <|
          "Example" -> 
           MachineLearning`MLDataset[<|
             "f1" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, "ID" -> 
                2873047750387000173|>, 
              "f2" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, "ID" -> 
                1314440341876764847|>, 
              "f3" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, "ID" -> 
                2051880494423027750|>, 
              "f4" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, "ID" -> 
                1203773393871153081|>, 
              "f5" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, "ID" -> 
                145883235305585233|>|>, <|
             "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
              0, "RawExample" -> False|>], "TrainingTime" -> 3.893275, 
           "MaxTrainingMemory" -> 959712, "DataMemory" -> 4120, 
           "FunctionMemory" -> 352912, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 11, 10, 20, 54, 45.841026`8.413829306202118}, 
             "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
           "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
           "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
      "TestSet" -> <|"Input" -> CompressedData["
1:eJylkMuOQUEURUtdEq80YuDd3iF0E+KReDQifsDM1LiDL/Ad7V+MJWJmZGri
H8x6VepMjVSysu/ddar2qZNfb5cbrZSKgQcO/LjQT/iBBGhHKS/6BR3ZO1L3
gRahBxmoUedHCzCDNFyp86Et6EMZnnhutAJtqELSsflZcw/k4URdBC1BQzIe
ctacGUNI2eWWXOOl4KJtz3Xpz7zvrG1/XZiLrvDC8m3em4M/vLjcNYFv2OEF
JGMqPb4zqxteEB3JrAovMu7SSxOGMp+9tllmdgOZzS9eFF2IZ3L+Af3EG4s=

         "], 
        "Output" -> {219.17, 231.6, 214.42, 229.23, 181.47, 187.52, 232.97, 
         184.39, 199.15, 164.26, 157.23, 153.67, 171.93, 152.04, 172.67, 
         219.17, 231.6, 214.42, 155.61, 172.67, 335.28, 275.08, 222.78}|>, 
      "Predictions" -> {236.30925303988144`, 247.60512248959353`, 
       226.81885818345336`, 257.3574205809431, 247.21263717079896`, 
       251.0578263079159, 237.3571948644604, 198.572057180101, 
       215.44606662213295`, 159.4563513772282, 224.49593679337005`, 
       344.9358092100762, 97.21126024839619, 155.4432609592199, 
       170.11073453843755`, 236.3092604305532, 247.60512248959353`, 
       226.81885818345336`, 283.25542822390577`, 170.11073453843755`, 
       248.5141492478976, 152.45489457047765`, 122.99096540860387`}, 
      "Distributions" -> {
        NormalDistribution[236.30925303988144`, 16.084382186985895`], 
        NormalDistribution[247.60512248959353`, 16.084382186985895`], 
        NormalDistribution[226.81885818345336`, 16.084382186985895`], 
        NormalDistribution[257.3574205809431, 16.084382186985895`], 
        NormalDistribution[247.21263717079896`, 16.084382186985895`], 
        NormalDistribution[251.0578263079159, 16.084382186985895`], 
        NormalDistribution[237.3571948644604, 16.084382186985895`], 
        NormalDistribution[198.572057180101, 16.084382186985895`], 
        NormalDistribution[215.44606662213295`, 16.084382186985895`], 
        NormalDistribution[159.4563513772282, 16.084382186985895`], 
        NormalDistribution[224.49593679337005`, 16.084382186985895`], 
        NormalDistribution[344.9358092100762, 16.084382186985895`], 
        NormalDistribution[97.21126024839619, 16.084382186985895`], 
        NormalDistribution[155.4432609592199, 16.084382186985895`], 
        NormalDistribution[170.11073453843755`, 16.084382186985895`], 
        NormalDistribution[236.3092604305532, 16.084382186985895`], 
        NormalDistribution[247.60512248959353`, 16.084382186985895`], 
        NormalDistribution[226.81885818345336`, 16.084382186985895`], 
        NormalDistribution[283.25542822390577`, 16.084382186985895`], 
        NormalDistribution[170.11073453843755`, 16.084382186985895`], 
        NormalDistribution[248.5141492478976, 16.084382186985895`], 
        NormalDistribution[152.45489457047765`, 16.084382186985895`], 
        NormalDistribution[122.99096540860387`, 16.084382186985895`]}, 
      "Modes" -> {236.30925303988144`, 247.60512248959353`, 
       226.81885818345336`, 257.3574205809431, 247.21263717079896`, 
       251.0578263079159, 237.3571948644604, 198.572057180101, 
       215.44606662213295`, 159.4563513772282, 224.49593679337005`, 
       344.9358092100762, 97.21126024839619, 155.4432609592199, 
       170.11073453843755`, 236.3092604305532, 247.60512248959353`, 
       226.81885818345336`, 283.25542822390577`, 170.11073453843755`, 
       248.5141492478976, 152.45489457047765`, 122.99096540860387`}, 
      "Weights" -> SparseArray[Automatic, {23}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.001822391304347826, "SingleEvaluationTime" -> 
      0.00288034375, "Version" -> {13.1, 0}|>]], ",", 
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Predictor Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Predictor method"], 
                    TextCell["Predictor method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "LinearRegression",ExpressionUUID->
                   "a641ddb1-80cf-45ed-9111-07d9cb1120d2"],
                  TextCell["LinearRegression"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "23"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Standard deviation"], 
                    TextCell["Standard deviation"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"45.8602118476373235012`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "10.8787511708449109449`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "24.1027095059475016114`3.", "\", \"", 
                    "67.617714189327145391`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    24.1027095059475016114`3., ", ", 67.617714189327145391`3.,
                     "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Standard deviation baseline"], 
                    TextCell["Standard deviation baseline"]], 
                    "\"Standard deviation of testset values\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Standard deviation of testset values", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"42.6452732307168460579`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "8.9841273716218275069`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "24.677018487473191044`3.", "\", \"", 
                    "60.6135279739605010718`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    24.677018487473191044`3., ", ", 60.6135279739605010718`3.,
                     "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["R-squared"], 
                    TextCell["R-squared"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{
                    RowBox[{"-", "0.1564591870670730689`3."}], 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.7490134498282807751`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   TemplateBox[{"\"95% confidence interval: [\"", 
                    RowBox[{"-", "1.6544860867236346191`3."}], "\", \"", 
                    "1.3415677125894884814`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", \
-1.6544860867236346191`3., ", ", 1.3415677125894884814`3., "]"}], 
                   "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"5.440672788987999553`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0816008489163664308`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "5.2774710911552666914`3.", "\", \"", 
                    "5.6038744868207324146`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    5.2774710911552666914`3., ", ", 5.6038744868207324146`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"1.85`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"300.`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                   FractionBox["\"Examples\"", "\"Seconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[{{{}, {
                    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
                    0.012833333333333334`], AbsoluteThickness[1.6], 
                    GeometricTransformationBox[InsetBox[
                    FormBox[
                    StyleBox[
                    GraphicsBox[
                    {RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
                    1.], CircleBox[{0, 0}, Offset[{1.8, 1.8}, {0., 0.}]]}],
                    StripOnInput->False,
                    GraphicsBoxOptions->{DefaultBaseStyle->Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}],
                    TraditionalForm], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGAQB2JGIGYC4sSdmjmHAtIdbLmuLy5IzXYomVl/xSYw3cEY
BD7nOBT95k65BpM/m+VwelPCtDSgfP+hrxoxy3McXDbJZDMC+UBZW671aQ6L
PCVrXIH8QrCGdAftmP4r2TB5+VwHLZbP7PeB5omsc39YxZPucK9PuVMIKH/2
DBA8yXDo2vzaON833WGHXOvrwI4UBxerOpkPATD7kh2Sa9cn/YG5xzTZ4dGd
Yj9/IP+bRkz/odpUh+RAFq9pQP7DKqANjMkOTZb/VrbA1E9NdSDVvxMbrrD9
BPLfBAJdVIxpnnzUkvTXMP98KXF4s/aSdwXMfsNCB0dZPoYiIF8T6LyvN7Id
AJWjoPw=
                    "]]}, {
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.52373321675535`, 219.17}}]},
                    RowBox[{"{", 
                    RowBox[{"186.52373321675535`", ",", "219.17`"}], "}"}]],
                    
                    Annotation[#, {186.52373321675535`, 219.17}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.5386755459, 231.6}}]},
                    RowBox[{"{", 
                    RowBox[{"186.5386755459`", ",", "231.6`"}], "}"}]],
                    Annotation[#, {186.5386755459, 231.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.52617075290942`, 214.42}}]},
                    RowBox[{"{", 
                    RowBox[{"186.52617075290942`", ",", "214.42`"}], "}"}]],
                    
                    Annotation[#, {186.52617075290942`, 214.42}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.54377287756355`, 229.23}}]},
                    RowBox[{"{", 
                    RowBox[{"186.54377287756355`", ",", "229.23`"}], "}"}]],
                    
                    Annotation[#, {186.54377287756355`, 229.23}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.53142314533955`, 181.47}}]},
                    RowBox[{"{", 
                    RowBox[{"186.53142314533955`", ",", "181.47`"}], "}"}]],
                    
                    Annotation[#, {186.53142314533955`, 181.47}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.539732026472, 187.52}}]},
                    RowBox[{"{", 
                    RowBox[{"186.539732026472`", ",", "187.52`"}], "}"}]],
                    Annotation[#, {186.539732026472, 187.52}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.5444128799439, 232.97}}]},
                    RowBox[{"{", 
                    RowBox[{"186.5444128799439`", ",", "232.97`"}], "}"}]],
                    Annotation[#, {186.5444128799439, 232.97}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.52722547020068`, 184.39}}]},
                    RowBox[{"{", 
                    RowBox[{"186.52722547020068`", ",", "184.39`"}], "}"}]],
                    
                    Annotation[#, {186.52722547020068`, 184.39}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.53351265854775`, 199.15}}]},
                    RowBox[{"{", 
                    RowBox[{"186.53351265854775`", ",", "199.15`"}], "}"}]],
                    
                    Annotation[#, {186.53351265854775`, 199.15}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.4198245624105, 164.26}}]},
                    RowBox[{"{", 
                    RowBox[{"186.4198245624105`", ",", "164.26`"}], "}"}]],
                    Annotation[#, {186.4198245624105, 164.26}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.52931046155766`, 157.23}}]},
                    RowBox[{"{", 
                    RowBox[{"186.52931046155766`", ",", "157.23`"}], "}"}]],
                    
                    Annotation[#, {186.52931046155766`, 157.23}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.5308087756667, 153.67}}]},
                    RowBox[{"{", 
                    RowBox[{"186.5308087756667`", ",", "153.67`"}], "}"}]],
                    Annotation[#, {186.5308087756667, 153.67}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.50968096379717`, 171.93}}]},
                    RowBox[{"{", 
                    RowBox[{"186.50968096379717`", ",", "171.93`"}], "}"}]],
                    
                    Annotation[#, {186.50968096379717`, 171.93}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.51834584086745`, 152.04}}]},
                    RowBox[{"{", 
                    RowBox[{"186.51834584086745`", ",", "152.04`"}], "}"}]],
                    Annotation[#, {186.51834584086745`, 152.04}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.51619434026003`, 172.67}}]},
                    RowBox[{"{", 
                    RowBox[{"186.51619434026003`", ",", "172.67`"}], "}"}]],
                    
                    Annotation[#, {186.51619434026003`, 172.67}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.52373321675535`, 219.17}}]},
                    RowBox[{"{", 
                    RowBox[{"186.52373321675535`", ",", "219.17`"}], "}"}]],
                    
                    Annotation[#, {186.52373321675535`, 219.17}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.5386755459, 231.6}}]},
                    RowBox[{"{", 
                    RowBox[{"186.5386755459`", ",", "231.6`"}], "}"}]],
                    Annotation[#, {186.5386755459, 231.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.52617075290942`, 214.42}}]},
                    RowBox[{"{", 
                    RowBox[{"186.52617075290942`", ",", "214.42`"}], "}"}]],
                    
                    Annotation[#, {186.52617075290942`, 214.42}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.53039876465166`, 155.61}}]},
                    RowBox[{"{", 
                    RowBox[{"186.53039876465166`", ",", "155.61`"}], "}"}]],
                    
                    Annotation[#, {186.53039876465166`, 155.61}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.51619434026003`, 172.67}}]},
                    RowBox[{"{", 
                    RowBox[{"186.51619434026003`", ",", "172.67`"}], "}"}]],
                    
                    Annotation[#, {186.51619434026003`, 172.67}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.52873594379432`, 335.28}}]},
                    RowBox[{"{", 
                    RowBox[{"186.52873594379432`", ",", "335.28`"}], "}"}]],
                    
                    Annotation[#, {186.52873594379432`, 335.28}, 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.5146845927078, 275.08}}]},
                    RowBox[{"{", 
                    RowBox[{"186.5146845927078`", ",", "275.08`"}], "}"}]],
                    Annotation[#, {186.5146845927078, 275.08}, "Tooltip"]& ], 
                    
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{186.51391604191488`, 222.78}}]},
                    RowBox[{"{", 
                    RowBox[{"186.51391604191488`", ",", "222.78`"}], "}"}]],
                    
                    Annotation[#, {186.51391604191488`, 222.78}, 
                    "Tooltip"]& ]}}, {{}, {}}}, {{{}, {}, 
                    TagBox[
                    {GrayLevel[0.2], AbsoluteThickness[1.], Opacity[0.5], 
                    AbsoluteDashing[{2, 4}], LineBox[CompressedData["
1:eJxFxXssFHAAB/DrOpm/WB5xHnObCDk5jqLF6irSLdRcXpvX3XXnvKkbp1JC
R2rpolJyKbVl3DQ7zOOKqzObx6b1MN1kmV2m5FxEqj/6ff/47MNIzY7hUykU
Cvevfxf50xvsp1LC/h/xwsi0mcb27HGNpR53BlbObZvFS/tWWEYDFoVN6MZ/
4dNcuUnumEpmC9diNuKxQepQVDOLPZY477fw08iCtRmfbzP4ob5/SZ6RTk5h
Pls0N2Dn+PFEv0I+ecpG0j+5jhlB1vGJxQJyatBq+nWakOzZaGhpLsM/FFH6
AOoZslq8XJkrx7SWZtENCxE5UlPbnVCLFWIjRUkXk/nFaReG67Gf2CqrkZFB
vjyguxXbhMeWNd7d3hKyq3q3ur4Dm2YeyeJYmWSdIU6l7cGMRCcXu/1ZZFlC
9EV9F57YOxTDO5hNbis5nNSuwZwo6tcPO3PILE9Ht3si/JkdLB15im+qpLRT
C5iW0vv8uE8u+SevZ5QqwfO977ws2/F93npT9SI+kRwanRyQRx5sqHR6XIB7
XKtSWzpwm3WrftOEhcGTRbqgfLLTmBN3XoZPtjrf1Q5gbp/bVltKAZlzILK5
i4M3v59LGS3DIQtJd5SvcCEvzWLEvJCcZ8xSCI7isyuc25fCcbGJXvcgApet
auvfRmLFhkvDkSisNhtVusfh37a+7V/EmLrDTEWVYHP7jyqXTGxFr+iIzcYM
l0+d2nzMcb/e+0SGwz34fS9LMHdXSP/0eRzrNTdgV4qFzNDB8itY4ms7pCzH
OXsMQ30VWMqqe71yFcv8M99sr8KlAYd0zGpcznYYPnYNywMXhwU1+A/jqjNJ

                    "]]},
                    Annotation[#, "Charting`Private`Tag$950208#1"]& ]}, {}}},
                   Axes->{False, False},
                   AxesLabel->{None, None},
                   AxesOrigin->{142.8780000000003, 142.8780000000003},
                   DisplayFunction->Identity,
                   Frame->{{True, False}, {True, False}},
                   FrameLabel->{{
                    FormBox[
                    TagBox["\"actual value\"", HoldForm], TraditionalForm], 
                    None}, {
                    FormBox[
                    TagBox["\"predicted value\"", HoldForm], TraditionalForm],
                     None}},
                   
                   FrameTicks->{{Automatic, Automatic}, {
                    Automatic, Automatic}},
                   GridLines->{Automatic, Automatic},
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.5], 
                    AbsoluteThickness[1], 
                    AbsoluteDashing[{1, 2}]],
                   ImageSize->250,
                   
                   Method->{
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}},
                   
                   PlotRange->{{142.878, 344.90009999999995`}, {142.878, 
                    344.90009999999995`}},
                   PlotRangeClipping->True,
                   PlotRangePadding->{{0, 0}, {0, 0}},
                   Ticks->{Automatic, Automatic}],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    PredictorMeasurementsObject[<|
     "Model" -> PredictorFunction[<|
        "ExampleNumber" -> 17, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical"|>, 
                "f2" -> <|"Type" -> "Numerical"|>, 
                "f3" -> <|"Type" -> "Numerical"|>, 
                "f4" -> <|"Type" -> "Numerical"|>, 
                "f5" -> <|"Type" -> "Numerical"|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor[
                   "Transpose", <|"FeatureNumber" -> 5|>], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f1f2f3f4f5)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Processors" -> {
                MachineLearning`MLProcessor[
                "SynthesizeMissingValues", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Distribution" -> 
                  LearnedDistribution[<|
                    "ExampleNumber" -> 17, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>, 
                    "f5" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7100669430970155518|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {649.5294117647059, 16.41176470588235, 
                    50.411764705882355`, 64.70588235294117, 
                    37.470588235294116`}, 
                    "StandardDeviation" -> {40.86292386397267, 
                    6.562449538444979, 9.311970938966981, 7.176470588235281, 
                    10.13507391109661}, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 4772792621860920984|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{
                    0.3294464620128585, -0.24670478291864095`}, {
                    0.5266978779192711, -0.20091067530452414`}, {
                    0.6075928250009178, -0.38220632047567493`}, \
{-0.31353029417700407`, -0.6809418760462183}, {0.3828630142795621, 
                    0.5375947736621413}}, 
                    "Precisions" -> {0.5140556558990445, 0.863155175120625}, 
                    "NoisePrecision" -> 1.5886875059025845`, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157116188`, \
-0.0018584586044933286`, -0.00024375769149080384`, 8.562084148579801*^-6, 
                    0.00021587557870743752`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 7856623779326335863|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>, 
                    "Key" -> "(f1f2f3f4f5)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 2, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157115991`, \
-0.001858458604493322, -0.00024375769149081688`, 8.562084148556943*^-6, 
                    0.00021587557870744406`}, 
                    "StandardDeviation" -> {0.9973443489182671, 
                    1.0001052004380495`, 1.000282671403912, 
                    0.9982239732130878, 1.0001417047326489`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 5, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1764544953284831100|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                    "Mean" -> {-0.0013497098157115991`, \
-0.001858458604493322, -0.00024375769149081688`, 8.562084148556943*^-6, 
                    0.00021587557870744406`}, 
                    "StandardDeviation" -> {0.9973443489182671, 
                    1.0001052004380495`, 1.000282671403912, 
                    0.9982239732130878, 1.0001417047326489`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 5, 
                    "Output" -> <|
                    "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    1764544953284831100|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 5, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, 
                    "ID" -> 4922843929423532927|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, 
                    "ID" -> 365386638938414886|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, 
                    "ID" -> 8084762059231395715|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, 
                    "ID" -> 717539068447703646|>, 
                    "f5" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, 
                    "ID" -> 3403397587327662634|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.129596, "MaxTrainingMemory" -> 192968,
                     "DataMemory" -> 6400, "FunctionMemory" -> 51568, 
                    "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 11, 10, 20, 54, 46.011235`8.41543886705018}, 
                    "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}|>,
                     "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-4.406902047628646, -4.406902047628646, \
-4.168656228344961, -4.127362310486287, -3.8790302555384786`, \
-3.8157144014569915`, -3.7752140087029566`, -3.538288180712346, \
-3.4944058955364734`, -3.4490724744232923`, -3.432924033093133}, 
                    "LeftBoundary" -> -4.168656228344961, "LeftScale" -> 
                    0.11912290964184223`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[19.043784917961784`, 0.5368425024100205], 
                    "EntropySampleSize" -> 10|>], 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "EvaluationStrategy" -> "ModeFinding", 
                  "Version" -> {13.1, 0}, "ID" -> 5966421770916112094|>], 
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1020916197684206682|>], 
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Mean" -> {649.5294117647059, 16.41176470588235, 
                   50.411764705882355`, 64.70588235294117, 
                   37.470588235294116`}, 
                  "StandardDeviation" -> {40.86292386397267, 
                   6.562449538444979, 9.311970938966981, 7.176470588235281, 
                   10.13507391109661}, 
                  "Output" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 2859614146361296001|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Imputed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|"f1" -> <|"Type" -> "Numerical"|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor["List"], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|"f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 1892463177288152845|>], 
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Mean" -> {186.5176470588235}, 
                  "StandardDeviation" -> {61.9974481950585}, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 5696177821155824089|>], 
                MachineLearning`MLProcessor[
                "FromVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 5443556393657702637|>], 
                MachineLearning`MLProcessor[
                "FirstValues", <|
                 "Info" -> <|"Type" -> "Numerical", "Weight" -> 1|>, "Key" -> 
                  "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                  False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
           "InverseProcessorFunction" -> (186.5176470588235 + 
            61.9974481950585 #& ), 
           "ProcessorFunction" -> (-3.008472969274401 + 
            0.016129696126423874` #& ), "Name" -> "value", 
           "Quantiles" -> {-1.4258271853496902`, 2.7177304525673383`}, "Mean" -> 
           186.51764705882354`|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> (DiracDelta[#2 - #]& ), 
         "Threshold" -> 0, "PerformanceGoal" -> Automatic, "BatchProcessing" -> 
         Automatic, 
         "Model" -> <|
          "MeanFunction" -> 
           LinearLayer[<|
             "Type" -> "Linear", 
              "Arrays" -> <|
               "Weights" -> 
                RawArray["Real32",{{
                  0.0001022566357278265, -0.000029769986213068478`, \
-4.256757620169083*^-6, -5.452260666061193*^-6, 0.000017828686395660043`}}], 
                "Biases" -> RawArray["Real32",{2.742919529220611*^-16}]|>, 
              "Parameters" -> <|
               "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
                5, "$InputDimensions" -> {5}|>, 
              "Inputs" -> <|
               "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`AtomT]|>,
               "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], 
           "DistributionData" -> {NormalDistribution, 1.243077490388852}, 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|
               "(f1f2f3f4f5)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
              "Output" -> <|
               "(f1f2f3f4f5)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 5|>|>, "Processors" -> {
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Mean" -> {0.0015238368206923285`, 
                   0.0001960125331606793, -0.003053086958476699, 
                   0.0003484793101807369, -0.0017051122868508132`}, 
                  "StandardDeviation" -> {0.999579510982794, 
                   0.9973638566085912, 1.0002751161218724`, 
                   0.9997172300055037, 1.0009988024737557`}, 
                  "Output" -> <|
                   "(f1f2f3f4f5)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 5|>|>, 
                  "Version" -> {13.1, 0}, "ID" -> 598096601813410430|>], 
                MachineLearning`MLProcessor[
                "FirstValues", <|
                 "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 5|>, 
                  "Key" -> "(f1f2f3f4f5)", "Invertibility" -> "Perfect", 
                  "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
              "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
           "LinearRegression", "PostProcessor" -> 
           MachineLearning`MLProcessor["Identity"], 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
             "L2Regularization" -> <|"Value" -> 100000., "Options" -> <||>|>, 
             "OptimizationMethod" -> <|
              "Value" -> "NormalEquation", "Options" -> <||>|>, 
             MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
         "TrainingInformation" -> <|
          "Reporting" -> None, "TrainingFunction" -> Predict, "EMIterations" -> 
           Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 
           4.127093226053854, "PreprocessingTime" -> 
           0.285607`5.90731384094226, "LossName" -> "StandardDeviation", 
           "BestModelInformation" -> 
           Dataset[<|
             "MeanCrossEntropy" -> 
              Around[5.545772961414833, 0.060480592063955174`], 
              "StandardDeviation" -> 
              Around[58.78047698301086, 7.789540791684971], "EvaluationTime" -> 
              0.000610371555321924, "TestSize" -> 12, "ModelMemory" -> 15488.,
               "ModelUtility" -> -4.793121644845749, "TrainingSize" -> 14, 
              "TrainingTime" -> 0.007289798786266461, "TrainingMemory" -> 
              73008., "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                Around[5.542983344995577, 0.11239757473183765`], 
                Around[5.50966671240032, 0.10653285506897352`], 
                Around[5.551854439441349, 0.12343335235780473`], 
                Around[5.578587348822083, 0.13307851591148315`]}, 
              "StandardDeviationHistory" -> {
                Around[58.99547026541086, 13.151832462077266`], 
                Around[51.020741836078734`, 15.72731542197369], 
                Around[60.23165460944468, 14.938595357984449`], 
                Around[64.87404122110915, 14.457898745223057`]}, 
              "Configuration" -> {
               "LinearRegression", "L1Regularization" -> 0, 
                "L2Regularization" -> 100000., "OptimizationMethod" -> 
                Automatic, MaxIterations -> 30}, "FinalTrainingSize" -> 17|>, 
             
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
               "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
               "TrainingTime", "TrainingMemory", "ExperimentCount", 
               "MeanCrossEntropyHistory", "StandardDeviationHistory", 
               "Configuration", "FinalTrainingSize"}, {
              TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, 4], 
               TypeSystem`Vector[TypeSystem`AnyType, 4], 
               TypeSystem`Tuple[{
                 TypeSystem`Atom[String], TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
               TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
           Dataset[<|<|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 100000.|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.545772961414833, 0.060480592063955174`], 
                   "StandardDeviation" -> 
                   Around[58.78047698301086, 7.789540791684971], 
                   "EvaluationTime" -> 0.000610371555321924, "TestSize" -> 12,
                    "ModelMemory" -> 15488., 
                   "ModelUtility" -> -4.793121644845749, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.007289798786266461, "TrainingMemory" -> 
                   73008., "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                    Around[5.542983344995577, 0.11239757473183765`], 
                    Around[5.50966671240032, 0.10653285506897352`], 
                    Around[5.551854439441349, 0.12343335235780473`], 
                    Around[5.578587348822083, 0.13307851591148315`]}, 
                   "StandardDeviationHistory" -> {
                    Around[58.99547026541086, 13.151832462077266`], 
                    Around[51.020741836078734`, 15.72731542197369], 
                    Around[60.23165460944468, 14.938595357984449`], 
                    Around[64.87404122110915, 14.457898745223057`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.000610371555321924, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[58.78047698301086, 7.789540791684971], 
                  "TrainingMemory" -> 73008., "TrainingTime" -> 
                  0.00852906457993176|>, "Index" -> 1|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.01|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.761444548940688, 0.28851435171801093`], 
                   "StandardDeviation" -> 
                   Around[72.78383707914007, 14.742706427725231`], 
                   "EvaluationTime" -> 0.000562495157696018, "TestSize" -> 9, 
                   "ModelMemory" -> 15488., 
                   "ModelUtility" -> -5.020358914730533, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                   72900., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                    Around[5.534717558068659, 0.16921119591922218`], 
                    Around[6.282267582921669, 0.6418679997359864], 
                    Around[5.467348505831736, 0.18537386851378437`]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.18104494711723, 13.255549543309627`], 
                    Around[95.06127341741073, 23.000519709698143`], 
                    Around[59.109192872892265`, 17.171270669186253`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.000562495157696018, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[72.78383707914007, 14.742706427725231`], 
                  "TrainingMemory" -> 72900., "TrainingTime" -> 
                  0.007382200930418258|>, "Index" -> 2|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.00001|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.762213073936855, 0.2891908756145487], 
                   "StandardDeviation" -> 
                   Around[72.81229258816217, 14.76442112532492], 
                   "EvaluationTime" -> 0.000562495157696018, "TestSize" -> 9, 
                   "ModelMemory" -> 15488., 
                   "ModelUtility" -> -5.02079190454368, "TrainingSize" -> 14, 
                   "TrainingTime" -> 0.006718000670412151, "TrainingMemory" -> 
                   73032., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                    Around[5.534682922478275, 0.16927824477692485`], 
                    Around[6.284479207170306, 0.6436115123807173], 
                    Around[5.467477092161981, 0.18547361733290976`]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.17884816653434, 13.260083028702061`], 
                    Around[95.13867833805087, 23.043382803327937`], 
                    Around[59.11935125990129, 17.1757078335859]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.000562495157696018, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[72.81229258816217, 14.76442112532492], 
                  "TrainingMemory" -> 73032., "TrainingTime" -> 
                  0.007860060784382217|>, "Index" -> 3|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 1.|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.755563731549198, 0.18980549387942885`], 
                   "StandardDeviation" -> 
                   Around[73.29785803350558, 11.12566529112454], 
                   "EvaluationTime" -> 0.0005556556723208886, "TestSize" -> 
                   12, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -5.017590247083016, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.006636315225290107, "TrainingMemory" -> 
                   73035.2, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                    Around[5.537018835452896, 0.162857584923597], 
                    Around[6.082550758596856, 0.49237622361394645`], 
                    Around[5.460532768414772, 0.17520207393443116`], 
                    Around[5.942152563732269, 0.616728779125768]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.342053390633, 12.905678991735893`], 
                    Around[88.31834443982007, 19.599927716359378`], 
                    Around[58.47860980099668, 16.678389530697014`], 
                    Around[82.05242450257255, 26.88458118417234]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.0005556556723208886, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[73.29785803350558, 11.12566529112454], 
                  "TrainingMemory" -> 73035.2, "TrainingTime" -> 
                  0.007764488813589425|>, "Index" -> 4|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 100.|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.52704752920782, 0.059833333436540785`], 
                   "StandardDeviation" -> 
                   Around[59.06307435441815, 7.1277709070352655`], 
                   "EvaluationTime" -> 0.0005556556723208886, "TestSize" -> 
                   12, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -4.795608508697825, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                   73097.6, "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                    Around[5.531514416788595, 0.11645358574404258`], 
                    Around[5.494124840785624, 0.1088831297755258], 
                    Around[5.535454201843598, 0.12152542072185327`], 
                    Around[5.547096657413462, 0.12483529941674258`]}, 
                   "StandardDeviationHistory" -> {
                    Around[60.13420798295833, 12.973819118386215`], 
                    Around[52.8969016822823, 14.7623356585785], 
                    Around[60.14538357694005, 13.948029801011218`], 
                    Around[63.07580417549193, 12.887058680571473`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.0005556556723208886, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[59.06307435441815, 7.1277709070352655`], 
                  "TrainingMemory" -> 73097.6, "TrainingTime" -> 
                  0.007382200930418258|>, "Index" -> 5|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.0001|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.762206151614397, 0.28918477557449224`], 
                   "StandardDeviation" -> 
                   Around[72.81203627080747, 14.764225053841171`], 
                   "EvaluationTime" -> 0.000562495157696018, "TestSize" -> 9, 
                   "ModelMemory" -> 15488., 
                   "ModelUtility" -> -5.020788003909638, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.006718000670412151, "TrainingMemory" -> 
                   73034., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                    Around[5.534683249753409, 0.1692776444683391], 
                    Around[6.284459271315347, 0.643595780574491], 
                    Around[5.467475933774436, 0.1854727235442694]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.1788689040908, 13.260042036424538`], 
                    Around[95.13798004273157, 23.04299550738775], 
                    Around[59.119259865600014`, 17.175668039506018`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.000562495157696018, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[72.81203627080747, 14.764225053841171`], 
                  "TrainingMemory" -> 73034., "TrainingTime" -> 
                  0.007860060784382217|>, "Index" -> 6|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 1.*^6|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.545795103598917, 0.06048169504948894], 
                   "StandardDeviation" -> 
                   Around[58.780381496412176`, 7.790319220786534], 
                   "EvaluationTime" -> 0.0006174552215907863, "TestSize" -> 
                   12, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -4.793122649622534, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                   73040., "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                    Around[5.542997781911346, 0.11239398949153957`], 
                    Around[5.509685521772135, 0.1065309092188283], 
                    Around[5.551872364079654, 0.12343499929930912`], 
                    Around[5.578624746632535, 0.13308921629493362`]}, 
                   "StandardDeviationHistory" -> {
                    Around[58.994284804719925`, 13.15201486589744], 
                    Around[51.01900798760274, 15.728315521454363`], 
                    Around[60.231653911012614`, 14.939724030257922`], 
                    Around[64.87657928231343, 14.459903245463327`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.0006174552215907863, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[58.780381496412176`, 7.790319220786534], 
                  "TrainingMemory" -> 73040., "TrainingTime" -> 
                  0.007382200930418258|>, "Index" -> 7|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.828874730655696, 0.2309158294220318], 
                   "StandardDeviation" -> 
                   Around[75.93805452584338, 12.453011937371743`], 
                   "EvaluationTime" -> 0.0005900972800902686, "TestSize" -> 
                   12, "ModelMemory" -> 15488., 
                   "ModelUtility" -> -5.055342536277571, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                   71264., "ExperimentCount" -> 4, "MeanCrossEntropyHistory" -> {
                    Around[5.534682903229695, 0.16927830708545105`], 
                    Around[6.284481196998263, 0.6436130829374975], 
                    Around[5.467477209369381, 0.18547370723997095`], 
                    Around[6.028857613025443, 0.6841911689155443]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.17884694687201, 13.260087015896893`], 
                    Around[95.13874803652833, 23.043421474021667`], 
                    Around[59.11936050719379, 17.17571181577855], 
                    Around[85.3152626127794, 28.34197665472279]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.0005900972800902686, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[75.93805452584338, 12.453011937371743`], 
                  "TrainingMemory" -> 71264., "TrainingTime" -> 
                  0.007382200930418258|>, "Index" -> 8|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.001|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.762136864206496, 0.2891238075392723], 
                   "StandardDeviation" -> 
                   Around[72.80946847902437, 14.76226682696847], 
                   "EvaluationTime" -> 0.0005966925845716652, "TestSize" -> 9,
                    "ModelMemory" -> 15488., 
                   "ModelUtility" -> -5.020748976540439, "TrainingSize" -> 14,
                    "TrainingTime" -> 0.006718000670412151, "TrainingMemory" -> 
                   72956., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                    Around[5.534686370015957, 0.16927160321192455`], 
                    Around[6.284259946812004, 0.6434385442562445], 
                    Around[5.467464275791524, 0.18546374111869726`]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.17906663655944, 13.259632749513159`], 
                    Around[95.13099884411103, 23.039125723974024`], 
                    Around[59.11833995640268, 17.175268845380003`]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.0005966925845716652, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[72.80946847902437, 14.76226682696847], 
                  "TrainingMemory" -> 72956., "TrainingTime" -> 
                  0.007860060784382217|>, "Index" -> 9|>, <|
               "Value" -> "LinearRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.1|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[5.754576052418996, 0.28244900256016603`], 
                   "StandardDeviation" -> 
                   Around[72.53176000661027, 14.54946533403942], 
                   "EvaluationTime" -> 0.000562495157696018, "TestSize" -> 9, 
                   "ModelMemory" -> 15488., 
                   "ModelUtility" -> -5.01651267676352, "TrainingSize" -> 14, 
                   "TrainingTime" -> 0.007534855121632593, "TrainingMemory" -> 
                   72988., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                    Around[5.535018969362517, 0.16860673913559598`], 
                    Around[6.262446890652057, 0.6263541347291746], 
                    Around[5.466262297242416, 0.18446678648849757`]}, 
                   "StandardDeviationHistory" -> {
                    Around[64.20035014985204, 13.215745834665299`], 
                    Around[94.37271094267881, 22.623610560216054`], 
                    Around[59.02221892729996, 17.13053783734946]}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.000562495157696018, "ModelMemory" -> 
                  15488., "StandardDeviation" -> 
                  Around[72.53176000661027, 14.54946533403942], 
                  "TrainingMemory" -> 72988., "TrainingTime" -> 
                  0.008815780492310134|>, "Index" -> 10|>|>, 
             TypeSystem`Assoc[
              TypeSystem`Struct[{"Value", "Options"}, {
                TypeSystem`Atom[
                 TypeSystem`Enumeration["LinearRegression"]], 
                TypeSystem`Assoc[TypeSystem`AnyType, 
                 TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
              
              TypeSystem`Struct[{
               "Experiments", "PredictedPerformances", "Index"}, {
                TypeSystem`Vector[
                 
                 TypeSystem`Struct[{
                  "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                   "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
                   "TrainingTime", "TrainingMemory", "ExperimentCount", 
                   "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
                  TypeSystem`AnyType, TypeSystem`AnyType, 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[
                   TypeSystem`AnyType, TypeSystem`AnyLength], 
                   TypeSystem`Vector[
                   TypeSystem`AnyType, TypeSystem`AnyLength]}], 1], 
                
                TypeSystem`Struct[{
                 "EvaluationTime", "ModelMemory", "StandardDeviation", 
                  "TrainingMemory", "TrainingTime"}, {
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], TypeSystem`AnyType, 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real]}], 
                TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 
           17, "PreprocessorEvaluationTime" -> 4.34375*^-6, 
           "PreprocessorMemory" -> 76920, "InputDimension" -> 5, 
           "OutputDimension" -> 1, 
           "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
           True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
           "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
           "LastReportingTime" -> 3.877102486191059`16.341082270331977*^9, 
           "RoundPartitioning" -> 
           Dataset[{<|
              "TrainingSizes" -> 14, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
               0.39938000000000007`, "ExperimentCounts" -> 35|>}, 
             TypeSystem`Vector[
              
              TypeSystem`Struct[{
               "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
                "ExperimentCounts"}, {
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer]}], 1], <||>]|>, "AnomalyDetector" -> 
         None, "Log" -> <|
          "Example" -> 
           MachineLearning`MLDataset[<|
             "f1" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {666}, "ID" -> 
                2873047750387000173|>, 
              "f2" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {9}, "ID" -> 
                1314440341876764847|>, 
              "f3" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {52}, "ID" -> 
                2051880494423027750|>, 
              "f4" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {75}, "ID" -> 
                1203773393871153081|>, 
              "f5" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, "ID" -> 
                145883235305585233|>|>, <|
             "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
              0, "RawExample" -> False|>], "TrainingTime" -> 0.784037, 
           "MaxTrainingMemory" -> 473896, "DataMemory" -> 4120, 
           "FunctionMemory" -> 215464, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 11, 10, 20, 54, 46.660674`8.421525984375092}, 
             "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, 
           "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
           "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
      "TestSet" -> <|"Input" -> CompressedData["
1:eJylkMuOQUEURUtdEq80YuDd3iF0E+KReDQifsDM1LiDL/Ad7V+MJWJmZGri
H8x6VepMjVSysu/ddar2qZNfb5cbrZSKgQcO/LjQT/iBBGhHKS/6BR3ZO1L3
gRahBxmoUedHCzCDNFyp86Et6EMZnnhutAJtqELSsflZcw/k4URdBC1BQzIe
ctacGUNI2eWWXOOl4KJtz3Xpz7zvrG1/XZiLrvDC8m3em4M/vLjcNYFv2OEF
JGMqPb4zqxteEB3JrAovMu7SSxOGMp+9tllmdgOZzS9eFF2IZ3L+Af3EG4s=

         "], 
        "Output" -> {219.17, 231.6, 214.42, 229.23, 181.47, 187.52, 232.97, 
         184.39, 199.15, 164.26, 157.23, 153.67, 171.93, 152.04, 172.67, 
         219.17, 231.6, 214.42, 155.61, 172.67, 335.28, 275.08, 222.78}|>, 
      "Predictions" -> {186.52373321675535`, 186.5386755459, 
       186.52617075290942`, 186.54377287756355`, 186.53142314533955`, 
       186.539732026472, 186.5444128799439, 186.52722547020068`, 
       186.53351265854775`, 186.4198245624105, 186.52931046155766`, 
       186.5308087756667, 186.50968096379717`, 186.51834584086745`, 
       186.51619434026003`, 186.52373321675535`, 186.5386755459, 
       186.52617075290942`, 186.53039876465166`, 186.51619434026003`, 
       186.52873594379432`, 186.5146845927078, 186.51391604191488`}, 
      "Distributions" -> {
        NormalDistribution[186.52373321675535`, 77.06763231282618], 
        NormalDistribution[186.5386755459, 77.06763231282618], 
        NormalDistribution[186.52617075290942`, 77.06763231282618], 
        NormalDistribution[186.54377287756355`, 77.06763231282618], 
        NormalDistribution[186.53142314533955`, 77.06763231282618], 
        NormalDistribution[186.539732026472, 77.06763231282618], 
        NormalDistribution[186.5444128799439, 77.06763231282618], 
        NormalDistribution[186.52722547020068`, 77.06763231282618], 
        NormalDistribution[186.53351265854775`, 77.06763231282618], 
        NormalDistribution[186.4198245624105, 77.06763231282618], 
        NormalDistribution[186.52931046155766`, 77.06763231282618], 
        NormalDistribution[186.5308087756667, 77.06763231282618], 
        NormalDistribution[186.50968096379717`, 77.06763231282618], 
        NormalDistribution[186.51834584086745`, 77.06763231282618], 
        NormalDistribution[186.51619434026003`, 77.06763231282618], 
        NormalDistribution[186.52373321675535`, 77.06763231282618], 
        NormalDistribution[186.5386755459, 77.06763231282618], 
        NormalDistribution[186.52617075290942`, 77.06763231282618], 
        NormalDistribution[186.53039876465166`, 77.06763231282618], 
        NormalDistribution[186.51619434026003`, 77.06763231282618], 
        NormalDistribution[186.52873594379432`, 77.06763231282618], 
        NormalDistribution[186.5146845927078, 77.06763231282618], 
        NormalDistribution[186.51391604191488`, 77.06763231282618]}, 
      "Modes" -> {186.52373321675535`, 186.5386755459, 186.52617075290942`, 
       186.54377287756355`, 186.53142314533955`, 186.539732026472, 
       186.5444128799439, 186.52722547020068`, 186.53351265854775`, 
       186.4198245624105, 186.52931046155766`, 186.5308087756667, 
       186.50968096379717`, 186.51834584086745`, 186.51619434026003`, 
       186.52373321675535`, 186.5386755459, 186.52617075290942`, 
       186.53039876465166`, 186.51619434026003`, 186.52873594379432`, 
       186.5146845927078, 186.51391604191488`}, "Weights" -> 
      SparseArray[Automatic, {23}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.0033397391304347823`, "SingleEvaluationTime" -> 
      0.00185503125, "Version" -> {13.1, 0}|>]]}], "}"}]], "Output",
 CellChangeTimes->{3.8771276259788027`*^9, 3.877127754721553*^9},
 CellLabel->
  "Out[366]=",ExpressionUUID->"d705af90-fa7f-4036-986e-7c66260bed3d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"a", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<First Name\>\"", ",", "\"\<Last Name\>\"", ",", 
      "\"\<Year of Birth\>\"", ",", "\"\<Region\>\"", ",", 
      "\"\<USSA Points\>\"", ",", "\"\<Sex\>\"", ",", "\"\<Qualified\>\"", 
      ",", "\"\<Location\>\"", ",", "\"\<Estimated Elevation\>\"", ",", 
      "\"\<3,000 m Test Seconds\>\"", ",", "\"\<1,000 meter DP Erg\>\"", ",", 
      "\"\<Afton Coulee DP Test\>\"", ",", "\"\<Rollerski agility\>\"", ",", 
      "\"\<Strength Test Sum\>\"", ",", "\"\<Pull Ups\>\"", ",", 
      "\"\<Sit Ups\>\"", ",", "\"\<Push Ups\>\"", ",", 
      "\"\<Box Jumps (16in)\>\"", ",", "\"\<Dips\>\"", ",", 
      "\"\<Strength Test Sum\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Phoebe\>\"", ",", "\"\<Sweet\>\"", ",", "2000", ",", "\"\<East\>\"",
       ",", "136.57`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "702", ",", "0", ",", 
      "0", ",", "0", ",", "199", ",", "10", ",", "50", ",", "40", ",", "52", 
      ",", "27", ",", "199"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Nina\>\"", ",", "\"\<Seemann\>\"", ",", "2002", ",", "\"\<East\>\"",
       ",", "121.54`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "795", ",", "243", ",", 
      "0", ",", "0", ",", "258", ",", "15", ",", "65", ",", "53", ",", "54", 
      ",", "41", ",", "258"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Camille\>\"", ",", "\"\<Bolduc\>\"", ",", "2003", ",", 
      "\"\<East\>\"", ",", "201.92`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "699", ",", "0", 
      ",", "0", ",", "0", ",", "183", ",", "8", ",", "56", ",", "41", ",", 
      "42", ",", "20", ",", "183"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lil Q\>\"", ",", "\"\<Massey-Bierman\>\"", ",", "2003", ",", 
      "\"\<East\>\"", ",", "198.71`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "713", ",", "0", 
      ",", "0", ",", "0", ",", "231", ",", "15", ",", "53", ",", "38", ",", 
      "60", ",", "35", ",", "231"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Maggie\>\"", ",", "\"\<McGee\>\"", ",", "2004", ",", "\"\<East\>\"",
       ",", "231.52`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "696", ",", "0", ",", 
      "0", ",", "0", ",", "197", ",", "8", ",", "50", ",", "32", ",", "54", 
      ",", "37", ",", "197"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Adrienne\>\"", ",", "\"\<Remick\>\"", ",", "2002", ",", 
      "\"\<East\>\"", ",", "221.76`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "725", ",", "0", 
      ",", "0", ",", "0", ",", "228", ",", "13", ",", "53", ",", "43", ",", 
      "60", ",", "33", ",", "228"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Emma\>\"", ",", "\"\<Charles\>\"", ",", "2004", ",", "\"\<East\>\"",
       ",", "231.6`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Oakland, ME\>\"", ",", "\"\<\>\"", ",", "783", ",", "255", ",", 
      "0", ",", "0", ",", "175", ",", "6", ",", "48", ",", "35", ",", "44", 
      ",", "30", ",", "175"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Evie\>\"", ",", "\"\<Walton\>\"", ",", "2004", ",", "\"\<East\>\"", 
      ",", "189.82`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Keene Valley, NY\>\"", ",", "\"\<\>\"", ",", "809", ",", "0", ",", 
      "0", ",", "0", ",", "188", ",", "6", ",", "51", ",", "35", ",", "57", 
      ",", "27", ",", "188"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Amelia\>\"", ",", "\"\<Tucker\>\"", ",", "2002", ",", 
      "\"\<East\>\"", ",", "176.99`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<MA\>\"", ",", "\"\<\>\"", ",", "755", ",", "0", ",", "0", 
      ",", "0", ",", "168", ",", "5", ",", "40", ",", "28", ",", "54", ",", 
      "31", ",", "168"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sofia\>\"", ",", "\"\<Scirica\>\"", ",", "2004", ",", 
      "\"\<East\>\"", ",", "155.61`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<MA\>\"", ",", "\"\<\>\"", ",", "728", ",", "0", ",", "0", 
      ",", "0", ",", "213", ",", "12", ",", "52", ",", "47", ",", "58", ",", 
      "20", ",", "213"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Mica\>\"", ",", "\"\<Bodkins\>\"", ",", "2004", ",", "\"\<East\>\"",
       ",", "214.32`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<MA\>\"", ",", "\"\<\>\"", ",", "731", ",", "0", ",", "0", ",", "0",
       ",", "221", ",", "13", ",", "56", ",", "47", ",", "50", ",", "29", ",",
       "221"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Shea\>\"", ",", "\"\<Brams\>\"", ",", "2002", ",", "\"\<East\>\"", 
      ",", "177.26`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Hanover NH\>\"", ",", "\"\<\>\"", ",", "715", ",", "0", ",", "0", 
      ",", "0", ",", "196", ",", "8", ",", "46", ",", "36", ",", "57", ",", 
      "33", ",", "196"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Ava\>\"", ",", "\"\<Thurston\>\"", ",", "2004", ",", "\"\<East\>\"",
       ",", "145.22`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "665", ",", "282", 
      ",", "0", ",", "0", ",", "221", ",", "11", ",", "52", ",", "47", ",", 
      "60", ",", "29", ",", "221"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Rose\>\"", ",", "\"\<Clayton\>\"", ",", "2001", ",", "\"\<East\>\"",
       ",", "205.69`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "706", ",", "0", ",", 
      "0", ",", "0", ",", "122", ",", "0", ",", "43", ",", "20", ",", "46", 
      ",", "13", ",", "122"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Hattie\>\"", ",", "\"\<Barker\>\"", ",", "2004", ",", 
      "\"\<East\>\"", ",", "219.17`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "687", ",", "0",
       ",", "0", ",", "0", ",", "135", ",", "0", ",", "37", ",", "32", ",", 
      "46", ",", "20", ",", "135"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Samantha\>\"", ",", "\"\<Nolan\>\"", ",", "2002", ",", 
      "\"\<East\>\"", ",", "213.43`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "827", ",", "0",
       ",", "0", ",", "0", ",", "139", ",", "2", ",", "51", ",", "25", ",", 
      "48", ",", "9", ",", "139"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Finnegan\>\"", ",", "\"\<Mittelstadt\>\"", ",", "2004", ",", 
      "\"\<East\>\"", ",", "223.73`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "658", ",", 
      "275", ",", "0", ",", "0", ",", "175", ",", "2", ",", "53", ",", "40", 
      ",", "45", ",", "31", ",", "175"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Callie\>\"", ",", "\"\<Young\>\"", ",", "2000", ",", "\"\<East\>\"",
       ",", "117.3`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "731", ",", "0", ",", "0", ",", "0", 
      ",", "245", ",", "15", ",", "59", ",", "43", ",", "64", ",", "34", ",", 
      "245"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Maddie\>\"", ",", "\"\<Relyea\[CapitalEHat]\>\"", ",", "2002", ",", 
      "\"\<East\>\"", ",", "246.05`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<Mayfield NY\>\"", ",", "\"\<\>\"", ",", "709", ",", "0", ",",
       "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Grace\>\"", ",", "\"\<Mattern\[CapitalEHat]\>\"", ",", "2003", ",", 
      "\"\<East\>\"", ",", "229.22`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<Brighton NY\[CapitalEHat]\>\"", ",", "\"\<\>\"", ",", "710", 
      ",", "260", ",", "0", ",", "0", ",", "163", ",", "3", ",", "48", ",", 
      "37", ",", "51", ",", "18", ",", "163"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Zofia\>\"", ",", "\"\<Stefankovic\>\"", ",", "2002", ",", 
      "\"\<East\>\"", ",", "236.07`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<Brighton NY\[CapitalEHat]\>\"", ",", "\"\<\>\"", ",", "736", 
      ",", "260", ",", "0", ",", "0", ",", "175", ",", "13", ",", "38", ",", 
      "36", ",", "36", ",", "26", ",", "175"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Elsa\>\"", ",", "\"\<Bolinger\>\"", ",", "2003", ",", 
      "\"\<East\>\"", ",", "212.14`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<Lyme, NH\>\"", ",", "\"\<\>\"", ",", "683", ",", "242", ",", 
      "0", ",", "0", ",", "180", ",", "6", ",", "44", ",", "24", ",", "62", 
      ",", "32", ",", "180"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Emma\>\"", ",", "\"\<Strack\>\"", ",", "2002", ",", "\"\<East\>\"", 
      ",", "217.25`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<GMVS\>\"", ",", "\"\<\>\"", ",", "766", ",", "256", ",", "0", ",", 
      "0", ",", "\"\<\>\"", ",", "4", ",", "51", ",", "34", ",", "33", ",", 
      "41", ",", "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Finnegan\>\"", ",", "\"\<Mittelstadt\>\"", ",", "2004", ",", 
      "\"\<East\>\"", ",", "223.73`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<Hinesburg, VT\>\"", ",", "\"\<\>\"", ",", "658", ",", "275", 
      ",", "0", ",", "0", ",", "175", ",", "2", ",", "53", ",", "40", ",", 
      "45", ",", "31", ",", "175"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sam\>\"", ",", "\"\<Murray\>\"", ",", "2003", ",", "\"\<East\>\"", 
      ",", "159.78`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Hanover NH\>\"", ",", "\"\<\>\"", ",", "605", ",", "220", ",", "0",
       ",", "0", ",", "238", ",", "15", ",", "46", ",", "35", ",", "67", ",", 
      "45", ",", "238"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jack\>\"", ",", "\"\<Lange\>\"", ",", "2004", ",", "\"\<East\>\"", 
      ",", "164.63`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Lyme NH\>\"", ",", "\"\<\>\"", ",", "614", ",", "235", ",", "0", 
      ",", "0", ",", "229", ",", "11", ",", "50", ",", "44", ",", "57", ",", 
      "45", ",", "229"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Finn\>\"", ",", "\"\<Sweet\>\"", ",", "2002", ",", "\"\<East\>\"", 
      ",", "110.23`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "586", ",", "211", ",", 
      "0", ",", "0", ",", "305", ",", "27", ",", "56", ",", "60", ",", "63", 
      ",", "45", ",", "305"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Quinn\>\"", ",", "\"\<Wilson\>\"", ",", "2002", ",", "\"\<East\>\"",
       ",", "160.61`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Dublin, NH\>\"", ",", "\"\<\>\"", ",", "673", ",", "226", ",", "0",
       ",", "0", ",", "228", ",", "19", ",", "40", ",", "48", ",", "49", ",", 
      "34", ",", "228"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Clint\>\"", ",", "\"\<Macy\>\"", ",", "2004", ",", "\"\<East\>\"", 
      ",", "256.83`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Dublin, NH\>\"", ",", "\"\<\>\"", ",", "694", ",", "240", ",", "0",
       ",", "0", ",", "274", ",", "23", ",", "52", ",", "60", ",", "59", ",", 
      "34", ",", "274"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Caden\>\"", ",", "\"\<Cote\>\"", ",", "2004", ",", "\"\<East\>\"", 
      ",", "241.39`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Oakland, ME\>\"", ",", "\"\<\>\"", ",", "656", ",", "229", ",", 
      "0", ",", "0", ",", "202", ",", "9", ",", "47", ",", "32", ",", "66", 
      ",", "30", ",", "202"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Linden\>\"", ",", "\"\<Niedeck\>\"", ",", "2002", ",", 
      "\"\<East\>\"", ",", "149.08`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<MA\[CapitalEHat]\>\"", ",", "\"\<\>\"", ",", "653", ",", 
      "216", ",", "0", ",", "0", ",", "214", ",", "8", ",", "39", ",", "48", 
      ",", "57", ",", "46", ",", "214"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Adam\>\"", ",", "\"\<Carlisle\>\"", ",", "2002", ",", 
      "\"\<East\>\"", ",", "185.41`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Amherst, MA\>\"", ",", "\"\<\>\"", ",", "679", ",", "0", ",", 
      "0", ",", "0", ",", "325", ",", "29", ",", "73", ",", "62", ",", "61", 
      ",", "42", ",", "325"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Brian\>\"", ",", "\"\<Bushey\>\"", ",", "2002", ",", "\"\<East\>\"",
       ",", "98.12`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<GMVS\>\"", ",", "\"\<\>\"", ",", "591", ",", "213", ",", "0", ",", 
      "0", ",", "241", ",", "15", ",", "47", ",", "54", ",", "69", ",", "26", 
      ",", "241"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cormac\>\"", ",", "\"\<Leahy\>\"", ",", "2004", ",", "\"\<East\>\"",
       ",", "233.01`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "578", ",", "0", ",", 
      "0", ",", "0", ",", "234", ",", "16", ",", "52", ",", "37", ",", "63", 
      ",", "34", ",", "234"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Aidan\>\"", ",", "\"\<Burt\>\"", ",", "2003", ",", "\"\<East\>\"", 
      ",", "126.76`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<GMVS\>\"", ",", "\"\<\>\"", ",", "642", ",", "213", ",", "0", ",", 
      "0", ",", "209", ",", "9", ",", "45", ",", "41", ",", "76", ",", "20", 
      ",", "209"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Fin\>\"", ",", "\"\<Bailey\>\"", ",", "2005", ",", "\"\<East\>\"", 
      ",", "195.43`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Peru VT\>\"", ",", "\"\<\>\"", ",", "666", ",", "218", ",", "0", 
      ",", "0", ",", "237", ",", "9", ",", "55", ",", "52", ",", "75", ",", 
      "28", ",", "237"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jack\>\"", ",", "\"\<Young\>\"", ",", "2002", ",", "\"\<East\>\"", 
      ",", "154.05`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "685", ",", "0", ",", 
      "0", ",", "0", ",", "298", ",", "22", ",", "50", ",", "60", ",", "66", 
      ",", "56", ",", "298"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Trey\>\"", ",", "\"\<Jones\>\"", ",", "2004", ",", "\"\<East\>\"", 
      ",", "169.14`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Steamboat Springs CO\>\"", ",", "\"\<\>\"", ",", "665", ",", "0", 
      ",", "0", ",", "0", ",", "275", ",", "19", ",", "51", ",", "53", ",", 
      "78", ",", "36", ",", "275"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jack\>\"", ",", "\"\<Christner\>\"", ",", "2002", ",", 
      "\"\<East\>\"", ",", "147.24`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Frost Mountain\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",",
       "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Rena\>\"", ",", "\"\<Schwartz\>\"", ",", "1999", ",", 
      "\"\<East\>\"", ",", "125.77`", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "637", ",", "268", 
      ",", "0", ",", "0", ",", "231", ",", "14", ",", "53", ",", "50", ",", 
      "61", ",", "25", ",", "231"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Avery\>\"", ",", "\"\<Ellis\>\"", ",", "1998", ",", "\"\<East\>\"", 
      ",", "125.24`", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "685", ",", "240", ",", 
      "0", ",", "0", ",", "253", ",", "14", ",", "54", ",", "54", ",", "70", 
      ",", "33", ",", "253"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Emelia\>\"", ",", "\"\<Jordan\[CapitalEHat]\>\"", ",", "2005", ",", 
      "\"\<East\>\"", ",", "303.82`", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Brighton NY\[CapitalEHat]\>\"", ",", "\"\<\>\"", ",", "776", 
      ",", "298", ",", "0", ",", "0", ",", "143", ",", "2", ",", "39", ",", 
      "31", ",", "40", ",", "27", ",", "143"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cathrine\>\"", ",", "\"\<Anzellotti\>\"", ",", "2005", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Brighton NY\[CapitalEHat]\>\"", ",", "\"\<\>\"", 
      ",", "679", ",", "284", ",", "0", ",", "0", ",", "154", ",", "0", ",", 
      "50", ",", "33", ",", "42", ",", "29", ",", "154"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Liza\>\"", ",", "\"\<Bell\>\"", ",", "2004", ",", "\"\<East\>\"", 
      ",", "310.96`", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Putney, VT\>\"", ",", "\"\<\>\"", ",", "0", ",", "258", ",", "0", 
      ",", "0", ",", "199", ",", "3", ",", "44", ",", "39", ",", "58", ",", 
      "49", ",", "199"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Charlotte\>\"", ",", "\"\<Brown\>\"", ",", "2001", ",", 
      "\"\<East\>\"", ",", "222.1`", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<St Paul, MN\>\"", ",", "\"\<\>\"", ",", "734", ",", "258", 
      ",", "0", ",", "0", ",", "154", ",", "7", ",", "46", ",", "25", ",", 
      "38", ",", "24", ",", "154"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Amanda\>\"", ",", "\"\<Vansant\>\"", ",", "2002", ",", 
      "\"\<East\>\"", ",", "289.46`", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Holderness Nordic\>\"", ",", "\"\<\>\"", ",", "0", ",", 
      "270", ",", "0", ",", "0", ",", "81", ",", "0", ",", "41", ",", "20", 
      ",", "\"\<\>\"", ",", "20", ",", "81"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lilly\>\"", ",", "\"\<Magnus\>\"", ",", "2002", ",", "\"\<East\>\"",
       ",", "405.59`", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Holderness Nordic\>\"", ",", "\"\<\>\"", ",", "1060", ",", "285", 
      ",", "0", ",", "0", ",", "85", ",", "2", ",", "30", ",", "25", ",", 
      "\"\<\>\"", ",", "24", ",", "85"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Mae\>\"", ",", "\"\<Whitcomb\>\"", ",", "2003", ",", "\"\<East\>\"",
       ",", "239.02`", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Holderness Nordic\>\"", ",", "\"\<\>\"", ",", "827", ",", "284", 
      ",", "0", ",", "0", ",", "88", ",", "3", ",", "41", ",", "16", ",", 
      "\"\<\>\"", ",", "22", ",", "88"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Reid\>\"", ",", "\"\<Donovan\>\"", ",", "\"\<\>\"", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Holderness Nordic\>\"", ",", "\"\<\>\"", ",", 
      "0", ",", "0", ",", "0", ",", "0", ",", "64", ",", "0", ",", "33", ",", 
      "15", ",", "\"\<\>\"", ",", "16", ",", "64"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Kelsey\>\"", ",", "\"\<Maine\>\"", ",", "\"\<\>\"", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Holderness Nordic\>\"", ",", "\"\<\>\"", ",", 
      "0", ",", "0", ",", "0", ",", "0", ",", "78", ",", "1", ",", "44", ",", 
      "20", ",", "\"\<\>\"", ",", "11", ",", "78"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Adah\>\"", ",", "\"\<Chapman\>\"", ",", "\"\<\>\"", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Holderness Nordic\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", 
      ",", "0", ",", "0", ",", "99", ",", "4", ",", "43", ",", "25", ",", 
      "\"\<\>\"", ",", "19", ",", "99"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sam\>\"", ",", "\"\<Clark\>\"", ",", "2003", ",", "\"\<East\>\"", 
      ",", "314.61`", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", 
      ",", "0", ",", "214", ",", "14", ",", "42", ",", "50", ",", "50", ",", 
      "30", ",", "214"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jed\>\"", ",", "\"\<Kurts\>\"", ",", "2003", ",", "\"\<East\>\"", 
      ",", "196.95`", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", 
      ",", "0", ",", "273", ",", "20", ",", "55", ",", "55", ",", "53", ",", 
      "50", ",", "273"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Chip\>\"", ",", "\"\<Freeman\>\"", ",", "2005", ",", "\"\<East\>\"",
       ",", "355.01`", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Peru VT\>\"", ",", "\"\<\>\"", ",", "731", ",", "270", ",", "0", 
      ",", "0", ",", "252", ",", "8", ",", "54", ",", "54", ",", "66", ",", 
      "54", ",", "252"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jasper\>\"", ",", "\"\<Henderson\>\"", ",", "2002", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "231", ",", "11", ",", "57", ",", "41", ",", "60", 
      ",", "40", ",", "231"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Gunnar\>\"", ",", "\"\<Caldwell\>\"", ",", "2004", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Putney, VT\>\"", ",", "\"\<\>\"", ",", "0", ",", "262", ",", 
      "0", ",", "0", ",", "163", ",", "5", ",", "36", ",", "43", ",", "53", 
      ",", "16", ",", "163"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Omar\>\"", ",", "\"\<Arbruster\[CapitalEHat]\>\"", ",", "2003", 
      ",", "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Honeoye Falls NY\>\"", ",", "\"\<\>\"", ",", 
      "618", ",", "252", ",", "0", ",", "0", ",", "235", ",", "15", ",", "44",
       ",", "43", ",", "58", ",", "45", ",", "235"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jack\>\"", ",", "\"\<Hulsey\[CapitalEHat]\>\"", ",", "2003", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Honeoye Falls NY\>\"", ",", "\"\<\>\"", ",", "647", ",", 
      "249", ",", "0", ",", "0", ",", "283", ",", "21", ",", "43", ",", "62", 
      ",", "64", ",", "51", ",", "283"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Liam\>\"", ",", "\"\<Judd\>\"", ",", "2003", ",", "\"\<East\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Brighton NY\[CapitalEHat]\>\"", ",", "\"\<\>\"", ",", "725", ",", 
      "252", ",", "0", ",", "0", ",", "195", ",", "6", ",", "42", ",", "45", 
      ",", "50", ",", "40", ",", "195"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Alex\>\"", ",", "\"\<Pogharien\>\"", ",", "2002", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Pittsford NY\[CapitalEHat]\>\"", ",", "\"\<\>\"", ",", "707", 
      ",", "243", ",", "0", ",", "0", ",", "202", ",", "10", ",", "41", ",", 
      "41", ",", "45", ",", "45", ",", "202"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Paul\>\"", ",", "\"\<Mason\>\"", ",", "\"\<\>\"", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Holderness Nordic\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", 
      ",", "0", ",", "0", ",", "68", ",", "2", ",", "26", ",", "14", ",", 
      "\"\<\>\"", ",", "22", ",", "68"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Charlie\>\"", ",", "\"\<Dobson\>\"", ",", "\"\<\>\"", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Holderness Nordic\>\"", ",", "\"\<\>\"", ",", "693", ",", "0",
       ",", "0", ",", "0", ",", "245", ",", "30", ",", "59", ",", "46", ",", 
      "\"\<\>\"", ",", "50", ",", "245"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Surya\>\"", ",", "\"\<Amundsen\>\"", ",", "2003", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Oakland, ME\>\"", ",", "\"\<\>\"", ",", "808", ",", "298", 
      ",", "0", ",", "0", ",", "164", ",", "2", ",", "45", ",", "35", ",", 
      "47", ",", "31", ",", "164"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Keya\>\"", ",", "\"\<Amundsen\>\"", ",", "2004", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Oakland, ME\>\"", ",", "\"\<\>\"", ",", "928", ",", "311", 
      ",", "0", ",", "0", ",", "109", ",", "3", ",", "35", ",", "20", ",", 
      "30", ",", "15", ",", "109"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Charles\>\"", ",", "\"\<Martell\>\"", ",", "2002", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "598", ",", "0", 
      ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Silas\>\"", ",", "\"\<Brown\>\"", ",", "2002", ",", "\"\<East\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "653", ",", "0", ",", 
      "0", ",", "0", ",", "215", ",", "13", ",", "49", ",", "40", ",", "58", 
      ",", "29", ",", "215"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Niko\>\"", ",", "\"\<Cuneo\>\"", ",", "2007", ",", "\"\<East\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "665", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Taylor\>\"", ",", "\"\<Carlson\>\"", ",", "2006", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "721", ",", "0", 
      ",", "0", ",", "0", ",", "136", ",", "3", ",", "30", ",", "39", ",", 
      "34", ",", "24", ",", "136"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jax\>\"", ",", "\"\<Lubkowitz\>\"", ",", "2002", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "739", ",", "0", 
      ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Carl\>\"", ",", "\"\<Priganc\>\"", ",", "2006", ",", "\"\<East\>\"",
       ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "777", ",", "0", ",", 
      "0", ",", "0", ",", "177", ",", "5", ",", "57", ",", "45", ",", "30", 
      ",", "30", ",", "177"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lily\>\"", ",", "\"\<Porth\>\"", ",", "2001", ",", "\"\<East\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "719", ",", "0", ",", 
      "0", ",", "0", ",", "192", ",", "8", ",", "45", ",", "37", ",", "58", 
      ",", "30", ",", "192"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Julia\>\"", ",", "\"\<Thurston\>\"", ",", "2006", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", 
      "727", ",", "0", ",", "0", ",", "0", ",", "143", ",", "6", ",", "47", 
      ",", "26", ",", "38", ",", "14", ",", "143"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Isabelle\>\"", ",", "\"\<Serrano\>\"", ",", "2003", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Craftsbury/MNC\>\"", ",", "\"\<\>\"", ",", "754",
       ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Julia\>\"", ",", "\"\<Oliver\>\"", ",", "2002", ",", "\"\<East\>\"",
       ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "819", ",", "0", ",", 
      "0", ",", "0", ",", "162", ",", "3", ",", "52", ",", "43", ",", "38", 
      ",", "20", ",", "162"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Ali\>\"", ",", "\"\<Priganc\>\"", ",", "2002", ",", "\"\<East\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "819", ",", "0", ",", 
      "0", ",", "0", ",", "150", ",", "3", ",", "36", ",", "40", ",", "40", 
      ",", "25", ",", "150"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Hanna\>\"", ",", "\"\<Holm\>\"", ",", "2003", ",", "\"\<East\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "844", ",", "0", ",", 
      "0", ",", "0", ",", "164", ",", "6", ",", "45", ",", "33", ",", "47", 
      ",", "21", ",", "164"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Virginia\>\"", ",", "\"\<Cobb\>\"", ",", "2005", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", 
      "870", ",", "0", ",", "0", ",", "0", ",", "120", ",", "0", ",", "44", 
      ",", "31", ",", "30", ",", "15", ",", "120"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jessie\>\"", ",", "\"\<Kennedy\>\"", ",", "2003", ",", 
      "\"\<East\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", 
      "941", ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Evan\>\"", ",", "\"\<Grover\>\"", ",", "2004", ",", "\"\<East\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Bend Oregon\>\"", ",", "\"\<\>\"", ",", "635", ",", "250", ",", 
      "0", ",", "0", ",", "181", ",", "14", ",", "37", ",", "53", ",", "55", 
      ",", "27", ",", "181"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Anja\>\"", ",", "\"\<Grover\>\"", ",", "2004", ",", "\"\<East\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Sun Valley Idaho\>\"", ",", "\"\<\>\"", ",", "1108", ",", "0", ",",
       "0", ",", "0", ",", "\"\<\>\"", ",", "7", ",", "41", ",", "39", ",", 
      "54", ",", "31", ",", "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Fran\>\"", ",", "\"\<Peterson\>\"", ",", "2005", ",", 
      "\"\<Central\>\"", ",", "355.61`", ",", "\"\<Female\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Barron\[CapitalEHat]\>\"", ",", "1150", ",", 
      "713", ",", "288", ",", "0", ",", "0", ",", "175", ",", "4", ",", "45", 
      ",", "32", ",", "39", ",", "47", ",", "175"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Margo\>\"", ",", "\"\<Nightingale\>\"", ",", "2005", ",", 
      "\"\<Central\>\"", ",", "232.11`", ",", "\"\<Female\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "0", ",", "84", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Morgan\>\"", ",", "\"\<Richter\>\"", ",", "2001", ",", 
      "\"\<Central\>\"", ",", "235.9`", ",", "\"\<Female\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "638", ",",
       "0", ",", "478", ",", "132", ",", "209", ",", "6", ",", "68", ",", 
      "46", ",", "47", ",", "30", ",", "209"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jasper\>\"", ",", "\"\<Johnston\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "159.86`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Ely\>\"", ",", "800", ",", "649", ",", "210", 
      ",", "0", ",", "0", ",", "261", ",", "18", ",", "49", ",", "59", ",", 
      "61", ",", "40", ",", "261"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Owen\>\"", ",", "\"\<Williams\>\"", ",", "2004", ",", 
      "\"\<Central\>\"", ",", "251.46`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Stevens Point,WI\>\"", ",", "1090", ",", "675", 
      ",", "194", ",", "0", ",", "0", ",", "268", ",", "22", ",", "55", ",", 
      "58", ",", "67", ",", "22", ",", "268"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Isak\>\"", ",", "\"\<Nightingale\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "175.88`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "0", ",", "65", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Victor\[CapitalEHat]\>\"", ",", "\"\<Sparks\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "183.1`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "616", ",", "0", ",", 
      "407", ",", "66", ",", "297", ",", "22", ",", "70", ",", "50", ",", 
      "60", ",", "51", ",", "297"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jon\>\"", ",", "\"\<Clarke\>\"", ",", "2004", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "652", ",",
       "0", ",", "435", ",", "67", ",", "234", ",", "23", ",", "60", ",", 
      "32", ",", "48", ",", "25", ",", "234"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Adrik\>\"", ",", "\"\<Kraftson\>\"", ",", "2004", ",", 
      "\"\<Central\>\"", ",", "241.48`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "578", ",",
       "0", ",", "392", ",", "72", ",", "277", ",", "20", ",", "66", ",", 
      "55", ",", "59", ",", "37", ",", "277"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jon\>\"", ",", "\"\<Saldin\>\"", ",", "2004", ",", 
      "\"\<Central\>\"", ",", "286.77`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "671", ",",
       "0", ",", "458", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Roger\>\"", ",", "\"\<Anderson\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "146.86`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "585", ",",
       "0", ",", "0", ",", "0", ",", "319", ",", "22", ",", "52", ",", "57", 
      ",", "62", ",", "82", ",", "319"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Aidan\>\"", ",", "\"\<Earll\>\"", ",", "\"\<\>\"", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "673", ",", "0", ",", "0", ",", 
      "0", ",", "245", ",", "14", ",", "55", ",", "57", ",", "61", ",", "30", 
      ",", "245"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Bank\>\"", ",", "\"\<Bodor\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "596", ",", "215", ",", "0", ",",
       "0", ",", "230", ",", "13", ",", "46", ",", "50", ",", "61", ",", "34",
       ",", "230"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Casey\>\"", ",", "\"\<Van Hefty\>\"", ",", "2004", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "625", ",", "232", ",", "0", ",",
       "0", ",", "255", ",", "17", ",", "48", ",", "63", ",", "61", ",", "32",
       ",", "255"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Grace\>\"", ",", "\"\<Kern\>\"", ",", "\"\<\>\"", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "799", ",", "304", ",", "0", ",",
       "0", ",", "180", ",", "11", ",", "31", ",", "31", ",", "45", ",", "40",
       ",", "180"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Caden\>\"", ",", "\"\<Albrecht\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "450", ",", "64", ",", "273", ",", "24", ",", "46", ",", "53",
       ",", "53", ",", "49", ",", "273"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jeff\>\"", ",", "\"\<Hodgson\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "525", ",", "78", ",", "169", ",", "3", ",", "68", ",", "25", 
      ",", "47", ",", "20", ",", "169"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Hariharam\>\"", ",", "\"\<Chidambaram\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "425", ",", "100", ",", "200", ",", "12", ",", "64", ",", 
      "23", ",", "55", ",", "22", ",", "200"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Magnus\>\"", ",", "\"\<O'Connor\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "444", ",", "75", ",", "218", ",", "10", ",", "55", ",", "36",
       ",", "63", ",", "34", ",", "218"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cooper\>\"", ",", "\"\<Camp\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "0", ",", "83", ",", "184", ",", "13", ",", "49", ",", "33", 
      ",", "51", ",", "12", ",", "184"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Nico\>\"", ",", "\"\<Alexander\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "418", ",", "95", ",", "202", ",", "13", ",", "62", ",", "33",
       ",", "58", ",", "10", ",", "202"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Benon\>\"", ",", "\"\<Bettobro\>\"", ",", "2004", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "426", ",", "85", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Leif\>\"", ",", "\"\<Sciroa\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "0", ",", "86", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Andrew\>\"", ",", "\"\<Defor\>\"", ",", "2004", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "448", ",", "79", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Evan\>\"", ",", "\"\<O'Connor\>\"", ",", "2004", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "462", ",", "77", ",", "167", ",", "3", ",", "54", ",", "28", 
      ",", "56", ",", "20", ",", "167"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Colin\>\"", ",", "\"\<Freed\>\"", ",", "2002", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "444", ",", "75", ",", "381", ",", "32", ",", "68", ",", "80",
       ",", "69", ",", "68", ",", "381"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Ericka\>\"", ",", "\"\<Peterson\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "737", ",", "86", ",", "148", ",", "1", ",", "67", ",", "18", 
      ",", "41", ",", "19", ",", "148"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sophia\>\"", ",", "\"\<Pung\>\"", ",", "2004", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "745", ",", "100", ",", "163", ",", "6", ",", "55", ",", "28",
       ",", "40", ",", "22", ",", "163"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Johanna\>\"", ",", "\"\<Perry\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "692", ",", "126", ",", "135", ",", "0", ",", "57", ",", "30",
       ",", "30", ",", "18", ",", "135"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Addie\>\"", ",", "\"\<Fabel\>\"", ",", "2004", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "0", ",", "98", ",", "151", ",", "3", ",", "45", ",", "42", 
      ",", "30", ",", "25", ",", "151"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Eleanor\>\"", ",", "\"\<Wheeler\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "711", ",", "130", ",", "149", ",", "0", ",", "64", ",", "15",
       ",", "43", ",", "27", ",", "149"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Laura\>\"", ",", "\"\<Pacala\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "755", ",", "120", ",", "153", ",", "1", ",", "58", ",", "27",
       ",", "48", ",", "17", ",", "153"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Kathryn\>\"", ",", "\"\<House\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "640", ",", "113", ",", "168", ",", "0", ",", "68", ",", "17",
       ",", "48", ",", "35", ",", "168"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sierra\>\"", ",", "\"\<Larson\>\"", ",", "2004", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "0", ",", "106", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Etta\>\"", ",", "\"\<Luegers\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "557", ",", "98", ",", "103", ",", "2", ",", "50", ",", "28", 
      ",", "\"\<\>\"", ",", "19", ",", "103"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Mila\>\"", ",", "\"\<Finch\>\"", ",", "2004", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "560", ",", "115", ",", "192", ",", "2", ",", "57", ",", "39",
       ",", "58", ",", "32", ",", "192"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Eli\[CapitalEHat]\>\"", ",", "\"\<Frenkel\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "466", ",", "0", ",", "200", ",", "13", ",", "55", ",", "39", 
      ",", "43", ",", "24", ",", "200"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Stas\>\"", ",", "\"\<Bednarski\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "460", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Charlie\>\"", ",", "\"\<Grabow\>\"", ",", "2002", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "440", ",", "0", ",", "255", ",", "23", ",", "51", ",", "41", 
      ",", "60", ",", "34", ",", "255"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Bergen\>\"", ",", "\"\<Thorson\>\"", ",", "2004", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "488", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Grete\>\"", ",", "\"\<Engels\>\"", ",", "2003", ",", 
      "\"\<Central\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "167", ",", "7", ",", "56", ",", "24", 
      ",", "42", ",", "24", ",", "167"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lexie\>\"", ",", "\"\<Madigan\>\"", ",", "2002", ",", 
      "\"\<West\>\"", ",", "229.23`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<Truckee High School\>\"", ",", "\"\<\>\"", ",", "810", ",", 
      "246", ",", "0", ",", "0", ",", "200", ",", "10", ",", "43", ",", "34", 
      ",", "65", ",", "28", ",", "200"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Annie\>\"", ",", "\"\<McColgan\>\"", ",", "2002", ",", 
      "\"\<West\>\"", ",", "181.47`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "722", ",", "250", ",", "0", 
      ",", "0", ",", "224", ",", "9", ",", "56", ",", "49", ",", "55", ",", 
      "37", ",", "224"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Novie\[CapitalEHat]\>\"", ",", "\"\<McCabe\>\"", ",", "2001", ",", 
      "\"\<West\>\"", ",", "93.8`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Methow Valley WA\>\"", ",", "\"\<\>\"", ",", "660", ",", 
      "255", ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Anja\>\"", ",", "\"\<Jensen\>\"", ",", "2002", ",", "\"\<West\>\"", 
      ",", "200.63`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Sun Valley\>\"", ",", "\"\<\>\"", ",", "757", ",", "258", ",", "0",
       ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sidney\>\"", ",", "\"\<Barbier\[CapitalEHat]\>\"", ",", "2003", 
      ",", "\"\<West\>\"", ",", "187.52`", ",", "\"\<Female\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Steamboat Springs\>\"", ",", "\"\<\>\"", ",", 
      "761", ",", "270", ",", "0", ",", "0", ",", "192", ",", "4", ",", "51", 
      ",", "39", ",", "50", ",", "40", ",", "192"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lily\>\"", ",", "\"\<Murnane\>\"", ",", "2003", ",", "\"\<West\>\"",
       ",", "232.97`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Truckee High School\>\"", ",", "\"\<\>\"", ",", "794", ",", "289", 
      ",", "0", ",", "0", ",", "164", ",", "5", ",", "43", ",", "31", ",", 
      "42", ",", "33", ",", "164"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Gretta\>\"", ",", "\"\<Scholz\>\"", ",", "2001", ",", 
      "\"\<West\>\"", ",", "184.39`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "710", ",", "289", ",", "0", 
      ",", "0", ",", "216", ",", "17", ",", "54", ",", "36", ",", "46", ",", 
      "29", ",", "216"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Kate\>\"", ",", "\"\<Oldham\>\"", ",", "2002", ",", "\"\<West\>\"", 
      ",", "142.1`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"",
       ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Molly\>\"", ",", "\"\<Blakslee\>\"", ",", "2002", ",", 
      "\"\<West\>\"", ",", "199.15`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "742", ",", "0", ",", "0", ",", 
      "0", ",", "172", ",", "4", ",", "44", ",", "40", ",", "61", ",", "15", 
      ",", "172"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sarah\>\"", ",", "\"\<Bivens\>\"", ",", "2003", ",", "\"\<West\>\"",
       ",", "164.26`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", 
      ",", "187", ",", "4", ",", "53", ",", "34", ",", "61", ",", "27", ",", 
      "187"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Haley\>\"", ",", "\"\<Brewster\>\"", ",", "2003", ",", 
      "\"\<West\>\"", ",", "157.23`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "715", ",", "0", ",", "0", ",", 
      "0", ",", "204", ",", "8", ",", "60", ",", "43", ",", "54", ",", "23", 
      ",", "204"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Emma\>\"", ",", "\"\<Reeder\>\"", ",", "2003", ",", "\"\<West\>\"", 
      ",", "153.67`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Vail, CO\>\"", ",", "\"\<\>\"", ",", "713", ",", "0", ",", "0", 
      ",", "0", ",", "268", ",", "10", ",", "65", ",", "53", ",", "67", ",", 
      "53", ",", "268"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Walker\>\"", ",", "\"\<Hall\>\"", ",", "2002", ",", "\"\<West\>\"", 
      ",", "114.42`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "210", ",", "0", ",", "0", ",", "0", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jack\>\"", ",", "\"\<Conde\>\"", ",", "2003", ",", "\"\<West\>\"", 
      ",", "171.93`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "601", ",", "218", ",", "0", ",", "0", ",", "242",
       ",", "16", ",", "47", ",", "53", ",", "62", ",", "32", ",", "242"}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lane\>\"", ",", "\"\<Myshrall\>\"", ",", "2001", ",", 
      "\"\<West\>\"", ",", "152.04`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<park city\>\"", ",", "\"\<\>\"", ",", "664", ",", "223", ",", 
      "0", ",", "0", ",", "299", ",", "24", ",", "58", ",", "61", ",", "63", 
      ",", "45", ",", "299"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Wes\>\"", ",", "\"\<Campbell\>\"", ",", "2004", ",", "\"\<West\>\"",
       ",", "172.67`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"",
       ",", "\"\<\>\"", ",", "624", ",", "226", ",", "0", ",", "0", ",", 
      "227", ",", "11", ",", "54", ",", "34", ",", "64", ",", "42", ",", 
      "227"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Travis\>\"", ",", "\"\<Grialou\>\"", ",", "2002", ",", 
      "\"\<West\>\"", ",", "166.14`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "227", ",", "0", ",", 
      "0", ",", "170", ",", "22", ",", "40", ",", "48", ",", "\"\<\>\"", ",", 
      "16", ",", "170"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Skylar\>\"", ",", "\"\<Patten\>\"", ",", "2001", ",", 
      "\"\<West\>\"", ",", "125.67`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Sun Valley\>\"", ",", "\"\<\>\"", ",", "589", ",", "232", ",",
       "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Elijah\>\"", ",", "\"\<Weenig\>\"", ",", "2002", ",", 
      "\"\<West\>\"", ",", "124.89`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Sun Valley\>\"", ",", "\"\<\>\"", ",", "630", ",", "236", ",",
       "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Logan\>\"", ",", "\"\<Moore\>\"", ",", "2002", ",", "\"\<West\>\"", 
      ",", "140.39`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Durango, Colorado\>\"", ",", "\"\<\>\"", ",", "573", ",", "236", 
      ",", "0", ",", "0", ",", "273", ",", "21", ",", "40", ",", "62", ",", 
      "50", ",", "58", ",", "273"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Wally\>\"", ",", "\"\<Magill\>\"", ",", "2003", ",", "\"\<West\>\"",
       ",", "96.13`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Steamboat Springs\>\"", ",", "\"\<\>\"", ",", "597", ",", "0", ",",
       "0", ",", "0", ",", "297", ",", "23", ",", "51", ",", "49", ",", "75", 
      ",", "53", ",", "297"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Carson\>\"", ",", "\"\<Williams\>\"", ",", "2002", ",", 
      "\"\<West\>\"", ",", "158.5`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Boulder, CO\>\"", ",", "\"\<\>\"", ",", "585", ",", "0", ",", 
      "0", ",", "0", ",", "226", ",", "8", ",", "48", ",", "54", ",", "56", 
      ",", "44", ",", "226"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Nikolas\>\"", ",", "\"\<Burkhart\>\"", ",", "2001", ",", 
      "\"\<West\>\"", ",", "197.26`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"",
       ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Seth\>\"", ",", "\"\<Wyatt\>\"", ",", "2001", ",", "\"\<West\>\"", 
      ",", "153.54`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cooper\>\"", ",", "\"\<Jones\>\"", ",", "2001", ",", "\"\<West\>\"",
       ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Steamboat Springs\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Hadassah\[CapitalEHat]\>\"", ",", "\"\<Lurbur\>\"", ",", "2000", 
      ",", "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Winthrop WA\>\"", ",", "\"\<\>\"", ",", "0", ",",
       "243", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Greta\[CapitalEHat]\>\"", ",", "\"\<Laesch\>\"", ",", "2002", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<winthrop WA\>\"", ",", "\"\<\>\"", ",", "708", 
      ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Eva\[CapitalEHat]\>\"", ",", "\"\<Weymuller\>\"", ",", "2003", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<winthrop WA\>\"", ",", "\"\<\>\"", ",", "812", 
      ",", "0", ",", "0", ",", "0", ",", "163", ",", "9", ",", "44", ",", 
      "25", ",", "46", ",", "21", ",", "163"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Dashe\>\"", ",", "\"\<McCabe\>\"", ",", "2006", ",", "\"\<West\>\"",
       ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<winthrop WA\>\"", ",", "\"\<\>\"", ",", "772", ",", "0", ",", "0", 
      ",", "0", ",", "210", ",", "20", ",", "39", ",", "42", ",", "49", ",", 
      "20", ",", "210"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Carter\>\"", ",", "\"\<Sheley\>\"", ",", "2005", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<winthrop WA\>\"", ",", "\"\<\>\"", ",", "662", ",", "0", ",", 
      "0", ",", "0", ",", "198", ",", "14", ",", "48", ",", "46", ",", "47", 
      ",", "15", ",", "198"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Graham\>\"", ",", "\"\<Sheley\>\"", ",", "2005", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<winthrop WA\>\"", ",", "\"\<\>\"", ",", "641", ",", "0", ",", 
      "0", ",", "0", ",", "229", ",", "19", ",", "41", ",", "60", ",", "47", 
      ",", "24", ",", "229"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jori\>\"", ",", "\"\<Grialou\>\"", ",", "2004", ",", "\"\<West\>\"",
       ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<winthrop WA\>\"", ",", "\"\<\>\"", ",", "735", ",", "0", ",", "0", 
      ",", "0", ",", "162", ",", "12", ",", "40", ",", "39", ",", "37", ",", 
      "10", ",", "162"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Mariah\[CapitalEHat]\>\"", ",", "\"\<Lucy\>\"", ",", "2004", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<winthrop WA\>\"", ",", "\"\<\>\"", ",", "856", 
      ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Bordes\>\"", ",", "\"\<Etienne\>\"", ",", "\"\<\>\"", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "624", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cuneo\>\"", ",", "\"\<Steffen\>\"", ",", "\"\<\>\"", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "628", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Deluna\>\"", ",", "\"\<Matthew\>\"", ",", "\"\<\>\"", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "737", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lehmkuhl\>\"", ",", "\"\<Kili\>\"", ",", "\"\<\>\"", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "739", 
      ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Garso\>\"", ",", "\"\<Jackie\>\"", ",", "\"\<\>\"", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "762", 
      ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Feland\>\"", ",", "\"\<Zandra\>\"", ",", "\"\<\>\"", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "794", 
      ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Powell\>\"", ",", "\"\<Alani\>\"", ",", "\"\<\>\"", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "799", 
      ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Scott\>\"", ",", "\"\<Keira\>\"", ",", "\"\<\>\"", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "801", 
      ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Hammond\>\"", ",", "\"\<Hannah\>\"", ",", "\"\<\>\"", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "830", 
      ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cutler\>\"", ",", "\"\<Ben\>\"", ",", "\"\<\>\"", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "860", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Schoonmaker\>\"", ",", "\"\<Mera\>\"", ",", "\"\<\>\"", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "871", 
      ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jake\>\"", ",", "\"\<Steeves\[CapitalEHat]\>\"", ",", "\"\<\>\"", 
      ",", "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Boulder, CO\>\"", ",", "\"\<\>\"", ",", "0", ",",
       "0", ",", "0", ",", "0", ",", "210", ",", "9", ",", "42", ",", "35", 
      ",", "68", ",", "38", ",", "210"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sam\>\"", ",", "\"\<Brooks\[CapitalEHat]\>\"", ",", "\"\<\>\"", 
      ",", "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Boulder, CO\>\"", ",", "\"\<\>\"", ",", "0", ",",
       "0", ",", "0", ",", "0", ",", "290", ",", "19", ",", "60", ",", "63", 
      ",", "51", ",", "59", ",", "290"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Samuel\>\"", ",", "\"\<Berets\>\"", ",", "\"\<\>\"", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Boulder, CO\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "276", ",", "13", ",", "61", ",", "52", ",", "52", 
      ",", "72", ",", "276"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Samuel\>\"", ",", "\"\<Gurarie\>\"", ",", "\"\<\>\"", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Boulder, CO\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "130", ",", "7", ",", "34", ",", "28", ",", "32", 
      ",", "15", ",", "130"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lucas\>\"", ",", "\"\<Martens\>\"", ",", "\"\<\>\"", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Boulder, CO\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "263", ",", "16", ",", "48", ",", "62", ",", "57", 
      ",", "48", ",", "263"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sophie\>\"", ",", "\"\<Spalding\>\"", ",", "\"\<\>\"", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Boulder, CO\>\"", ",", "\"\<\>\"", ",", "0", ",",
       "0", ",", "0", ",", "0", ",", "242", ",", "10", ",", "50", ",", "61", 
      ",", "50", ",", "51", ",", "242"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Wettermark\>\"", ",", "\"\<Pascal\>\"", ",", "2006", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "702", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Nygard\>\"", ",", "\"\<CJ\>\"", ",", "2005", ",", "\"\<West\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "711", ",", "0", ",", "0", 
      ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cisler\>\"", ",", "\"\<Grace\>\"", ",", "\"\<\>\"", ",", 
      "\"\<West\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Yuba City, CA\>\"", ",", "\"\<\>\"", ",", "799", 
      ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Hattie\>\"", ",", "\"\<Barker\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "219.17`", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "665", ",", 
      "246", ",", "0", ",", "0", ",", "162", ",", "1", ",", "42", ",", "30", 
      ",", "62", ",", "25", ",", "162"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Emma\>\"", ",", "\"\<Charles\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "231.6`", ",", "\"\<Female\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "770", ",", "250", 
      ",", "0", ",", "0", ",", "200", ",", "8", ",", "50", ",", "44", ",", 
      "52", ",", "30", ",", "200"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Elena\>\"", ",", "\"\<Grissom\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "214.42`", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "700", ",", 
      "255", ",", "0", ",", "0", ",", "202", ",", "14", ",", "42", ",", "35", 
      ",", "54", ",", "29", ",", "202"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Anja\>\"", ",", "\"\<Grover\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "235", ",", "\"\<Female\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "258", 
      ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Hayden\>\"", ",", "\"\<McJunkin\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "253.17`", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", 
      "270", ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Natalie\[CapitalEHat]\>\"", ",", "\"\<O\[CapitalOTilde]Brien\>\"", 
      ",", "2004", ",", "\"\<National U16 Camp\>\"", ",", "\"\<\>\"", ",", 
      "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "0", ",", "289", ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",",
       "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Elsa\>\"", ",", "\"\<Perkins\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "174.62`", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", 
      "289", ",", "0", ",", "0", ",", "205", ",", "9", ",", "64", ",", "35", 
      ",", "59", ",", "20", ",", "205"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Fran\>\"", ",", "\"\<Peterson\>\"", ",", "2005", ",", 
      "\"\<National U16 Camp\>\"", ",", "355.61`", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "674", ",", 
      "0", ",", "0", ",", "0", ",", "196", ",", "7", ",", "46", ",", "39", 
      ",", "44", ",", "46", ",", "196"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Kaylynn\>\"", ",", "\"\<Sandall\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "298.09`", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "737", ",", 
      "0", ",", "0", ",", "0", ",", "147", ",", "2", ",", "41", ",", "20", 
      ",", "56", ",", "24", ",", "147"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Nina\>\"", ",", "\"\<Schamberger\>\"", ",", "2005", ",", 
      "\"\<National U16 Camp\>\"", ",", "163.5`", ",", "\"\<Female\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "684", ",", "0", 
      ",", "0", ",", "0", ",", "258", ",", "13", ",", "64", ",", "55", ",", 
      "69", ",", "31", ",", "258"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sofia\>\"", ",", "\"\<Scirica\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "155.61`", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "728", ",", 
      "0", ",", "0", ",", "0", ",", "251", ",", "12", ",", "56", ",", "60", 
      ",", "65", ",", "34", ",", "251"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Ava\>\"", ",", "\"\<Thurston\[CapitalEHat]\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", 
      "210", ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Fin\>\"", ",", "\"\<Bailey\>\"", ",", "2005", ",", 
      "\"\<National U16 Camp\>\"", ",", "195.43`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "218", 
      ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Wes\>\"", ",", "\"\<Campbell\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "172.67`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "624", ",", "223", 
      ",", "0", ",", "0", ",", "227", ",", "11", ",", "54", ",", "34", ",", 
      "64", ",", "42", ",", "227"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Matthew\>\"", ",", "\"\<DeLuna\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "335.28`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "737", ",", "226", 
      ",", "0", ",", "0", ",", "250", ",", "24", ",", "41", ",", "47", ",", 
      "59", ",", "31", ",", "250"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Ethan\>\"", ",", "\"\<Eski\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "275.08`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "638", ",", "227", 
      ",", "0", ",", "0", ",", "282", ",", "25", ",", "53", ",", "50", ",", 
      "58", ",", "46", ",", "282"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Phineas\>\"", ",", "\"\<Fischer\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "214.38`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "232", 
      ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Gavin\>\"", ",", "\"\<Galyardt\>\"", ",", "2005", ",", 
      "\"\<National U16 Camp\>\"", ",", "271.85`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "236", 
      ",", "0", ",", "0", ",", "181", ",", "8", ",", "26", ",", "45", ",", 
      "51", ",", "35", ",", "181"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Trey\>\"", ",", "\"\<Jones\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "169.14`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "236", 
      ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Max\>\"", ",", "\"\<Kluck\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "218.35`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jack\>\"", ",", "\"\<Lange\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "164.63`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "611", ",", "0", 
      ",", "0", ",", "0", ",", "239", ",", "12", ",", "49", ",", "49", ",", 
      "57", ",", "48", ",", "239"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Clint\>\"", ",", "\"\<Macy\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "256.83`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Ben\>\"", ",", "\"\<Oldham\>\"", ",", "2005", ",", 
      "\"\<National U16 Camp\>\"", ",", "237.65`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "220", ",", "19", ",", "42", ",", "32", ",", "60", 
      ",", "29", ",", "220"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Aaron\>\"", ",", "\"\<Power\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "222.78`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "620", ",", "0", 
      ",", "0", ",", "0", ",", "287", ",", "19", ",", "49", ",", "69", ",", 
      "58", ",", "54", ",", "287"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Derek\>\"", ",", "\"\<Richardson\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "241.4`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Griff\>\"", ",", "\"\<Rillos\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "211.74`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Matt\>\"", ",", "\"\<Seline\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "240.1`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cole\>\"", ",", "\"\<Shockey\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "259.19`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Emmet\>\"", ",", "\"\<Shuman\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "437.75`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "176", ",", "9", ",", "32", ",", "29", ",", "58", 
      ",", "30", ",", "176"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Noah\>\"", ",", "\"\<Straka\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "249.91`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "617", ",", "0", 
      ",", "0", ",", "0", ",", "306", ",", "32", ",", "50", ",", "60", ",", 
      "50", ",", "50", ",", "306"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Mason\[CapitalEHat]\>\"", ",", "\"\<Wheeler\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "215.39`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Owen\>\"", ",", "\"\<Williams\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "251.46`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Tyler\>\"", ",", "\"\<Wright\>\"", ",", "2004", ",", 
      "\"\<National U16 Camp\>\"", ",", "225.91`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Kate\>\"", ",", "\"\<Oldham\>\"", ",", "2002", ",", 
      "\"\<National REG Only\>\"", ",", "142.1`", ",", "\"\<Female\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Truckee High School\>\"", ",", "5957", ",", 
      "810", ",", "0", ",", "0", ",", "0", ",", "200", ",", "10", ",", "43", 
      ",", "\"\<\>\"", ",", "65", ",", "28", ",", "200"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lily\>\"", ",", "\"\<Murnane\>\"", ",", "2003", ",", 
      "\"\<National REG Only\>\"", ",", "232.97`", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "722", ",", 
      "0", ",", "0", ",", "0", ",", "224", ",", "9", ",", "56", ",", 
      "\"\<\>\"", ",", "55", ",", "37", ",", "224"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Nikolas\>\"", ",", "\"\<Burkhart\>\"", ",", "2001", ",", 
      "\"\<National REG Only\>\"", ",", "197.26`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Methow Valley WA\>\"", ",", "2000", ",", "660", 
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lexie\>\"", ",", "\"\<Madigan\>\"", ",", "2002", ",", 
      "\"\<National REG Only\>\"", ",", "229.23`", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<Sun Valley\>\"", ",", "5300", ",", "757", 
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Carson\>\"", ",", "\"\<Williams\>\"", ",", "2002", ",", 
      "\"\<National REG Only\>\"", ",", "158.5`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Steamboat Springs\>\"", ",", "6750", ",", "761", 
      ",", "0", ",", "0", ",", "0", ",", "192", ",", "4", ",", "51", ",", 
      "\"\<\>\"", ",", "50", ",", "40", ",", "192"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Seth\>\"", ",", "\"\<Wyatt\>\"", ",", "2001", ",", 
      "\"\<National REG Only\>\"", ",", "153.54`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Truckee High School\>\"", ",", "5957", ",", 
      "794", ",", "0", ",", "0", ",", "0", ",", "164", ",", "5", ",", "43", 
      ",", "\"\<\>\"", ",", "42", ",", "33", ",", "164"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Logan\>\"", ",", "\"\<Moore\>\"", ",", "2002", ",", 
      "\"\<National REG Only\>\"", ",", "140.39`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "2000", ",", "710", ",", "0", ",", 
      "0", ",", "0", ",", "216", ",", "17", ",", "54", ",", "\"\<\>\"", ",", 
      "46", ",", "29", ",", "216"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jack\>\"", ",", "\"\<Conde\>\"", ",", "2003", ",", 
      "\"\<National REG Only\>\"", ",", "171.93`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Novie\[CapitalEHat]\>\"", ",", "\"\<McCabe\>\"", ",", "2001", ",", 
      "\"\<National REG Only\>\"", ",", "93.8`", ",", "\"\<Female\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "742", ",", "0", 
      ",", "0", ",", "0", ",", "172", ",", "4", ",", "44", ",", "\"\<\>\"", 
      ",", "61", ",", "15", ",", "172"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Gretta\>\"", ",", "\"\<Scholz\>\"", ",", "2001", ",", 
      "\"\<National REG Only\>\"", ",", "184.39`", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", 
      ",", "0", ",", "0", ",", "187", ",", "4", ",", "53", ",", "\"\<\>\"", 
      ",", "61", ",", "27", ",", "187"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Annie\>\"", ",", "\"\<McColgan\>\"", ",", "2002", ",", 
      "\"\<National REG Only\>\"", ",", "181.47`", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "715", ",", 
      "0", ",", "0", ",", "0", ",", "204", ",", "8", ",", "60", ",", 
      "\"\<\>\"", ",", "54", ",", "23", ",", "204"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Travis\>\"", ",", "\"\<Grialou\>\"", ",", "2002", ",", 
      "\"\<National REG Only\>\"", ",", "166.14`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Vail, CO\>\"", ",", "7400", ",", "713", ",", "0",
       ",", "0", ",", "0", ",", "268", ",", "10", ",", "65", ",", "\"\<\>\"", 
      ",", "67", ",", "53", ",", "268"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Walker\>\"", ",", "\"\<Hall\>\"", ",", "2002", ",", 
      "\"\<National REG Only\>\"", ",", "114.42`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lane\>\"", ",", "\"\<Myshrall\>\"", ",", "2001", ",", 
      "\"\<National REG Only\>\"", ",", "152.04`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "601", ",", "0", 
      ",", "0", ",", "0", ",", "242", ",", "16", ",", "47", ",", "\"\<\>\"", 
      ",", "62", ",", "32", ",", "242"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Wes\>\"", ",", "\"\<Campbell\>\"", ",", "2004", ",", 
      "\"\<National REG Only\>\"", ",", "172.67`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<park city\>\"", ",", "6755", ",", "664", ",", 
      "0", ",", "0", ",", "0", ",", "299", ",", "24", ",", "58", ",", 
      "\"\<\>\"", ",", "63", ",", "45", ",", "299"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Emma\>\"", ",", "\"\<Reeder\>\"", ",", "2003", ",", 
      "\"\<National REG Only\>\"", ",", "153.67`", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<\>\"", ",", "6755", ",", "624", ",", "0", 
      ",", "0", ",", "0", ",", "227", ",", "11", ",", "54", ",", "\"\<\>\"", 
      ",", "64", ",", "42", ",", "227"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Haley\>\"", ",", "\"\<Brewster\>\"", ",", "2003", ",", 
      "\"\<National REG Only\>\"", ",", "157.23`", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", 
      ",", "0", ",", "0", ",", "170", ",", "22", ",", "40", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "16", ",", "170"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Molly\>\"", ",", "\"\<Blakslee\>\"", ",", "2002", ",", 
      "\"\<National REG Only\>\"", ",", "199.15`", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<Sun Valley\>\"", ",", "5300", ",", "589", 
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sarah\>\"", ",", "\"\<Bivens\>\"", ",", "2003", ",", 
      "\"\<National REG Only\>\"", ",", "164.26`", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<Sun Valley\>\"", ",", "5300", ",", "630", 
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sidney\>\"", ",", "\"\<Barbier\[CapitalEHat]\>\"", ",", "2003", 
      ",", "\"\<National REG Only\>\"", ",", "187.52`", ",", "\"\<Female\>\"",
       ",", "\"\<Y\>\"", ",", "\"\<Durango, Colorado\>\"", ",", "6512", ",", 
      "573", ",", "0", ",", "0", ",", "0", ",", "273", ",", "21", ",", "40", 
      ",", "\"\<\>\"", ",", "50", ",", "58", ",", "273"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cooper\>\"", ",", "\"\<Jones\>\"", ",", "2001", ",", 
      "\"\<National REG Only\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Steamboat Springs\>\"", ",", "6900", ",", "597", 
      ",", "0", ",", "0", ",", "0", ",", "297", ",", "23", ",", "51", ",", 
      "\"\<\>\"", ",", "75", ",", "53", ",", "297"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Wally\>\"", ",", "\"\<Magill\>\"", ",", "2003", ",", 
      "\"\<National REG Only\>\"", ",", "96.13`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Boulder, CO\>\"", ",", "5300", ",", "585", ",", 
      "0", ",", "0", ",", "0", ",", "226", ",", "8", ",", "48", ",", 
      "\"\<\>\"", ",", "56", ",", "44", ",", "226"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Anja\>\"", ",", "\"\<Jensen\>\"", ",", "2002", ",", 
      "\"\<National REG Only\>\"", ",", "200.63`", ",", "\"\<Female\>\"", 
      ",", "\"\<Y\>\"", ",", "\"\<Sun Valley\>\"", ",", "5300", ",", "757", 
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Elijah\>\"", ",", "\"\<Weenig\>\"", ",", "2002", ",", 
      "\"\<National REG Only\>\"", ",", "124.89`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<\>\"", ",", "5300", ",", "0", ",", "0", ",", "0",
       ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Skylar\>\"", ",", "\"\<Patten\>\"", ",", "2001", ",", 
      "\"\<National REG Only\>\"", ",", "125.67`", ",", "\"\<Male\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Steamboat Springs\>\"", ",", "5300", ",", "0", 
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Phoebe\>\"", ",", "\"\<Sweet\>\"", ",", "2000", ",", "\"\<All\>\"", 
      ",", "136.57`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "702", ",", "0", ",", 
      "0", ",", "0", ",", "199", ",", "10", ",", "50", ",", "40", ",", "52", 
      ",", "27", ",", "199"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Nina\>\"", ",", "\"\<Seemann\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "121.54`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "795", ",", "243", ",", 
      "0", ",", "0", ",", "258", ",", "15", ",", "65", ",", "53", ",", "54", 
      ",", "41", ",", "258"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Camille\>\"", ",", "\"\<Bolduc\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "201.92`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "699", ",", "0", 
      ",", "0", ",", "0", ",", "183", ",", "8", ",", "56", ",", "41", ",", 
      "42", ",", "20", ",", "183"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lil Q\>\"", ",", "\"\<Massey-Bierman\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "198.71`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "713", ",", "0", 
      ",", "0", ",", "0", ",", "231", ",", "15", ",", "53", ",", "38", ",", 
      "60", ",", "35", ",", "231"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Maggie\>\"", ",", "\"\<McGee\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "231.52`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "696", ",", "0", ",", 
      "0", ",", "0", ",", "197", ",", "8", ",", "50", ",", "32", ",", "54", 
      ",", "37", ",", "197"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Adrienne\>\"", ",", "\"\<Remick\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "221.76`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "725", ",", "0", 
      ",", "0", ",", "0", ",", "228", ",", "13", ",", "53", ",", "43", ",", 
      "60", ",", "33", ",", "228"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Emma\>\"", ",", "\"\<Charles\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "231.6`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Oakland, ME\>\"", ",", "\"\<\>\"", ",", "783", ",", "255", ",", 
      "0", ",", "0", ",", "175", ",", "6", ",", "48", ",", "35", ",", "44", 
      ",", "30", ",", "175"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Evie\>\"", ",", "\"\<Walton\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "189.82`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Keene Valley, NY\>\"", ",", "\"\<\>\"", ",", "809", ",", "0", ",", 
      "0", ",", "0", ",", "188", ",", "6", ",", "51", ",", "35", ",", "57", 
      ",", "27", ",", "188"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Amelia\>\"", ",", "\"\<Tucker\>\"", ",", "2002", ",", "\"\<All\>\"",
       ",", "176.99`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<MA\>\"", ",", "\"\<\>\"", ",", "755", ",", "0", ",", "0", ",", "0",
       ",", "168", ",", "5", ",", "40", ",", "28", ",", "54", ",", "31", ",", 
      "168"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sofia\>\"", ",", "\"\<Scirica\>\"", ",", "2004", ",", "\"\<All\>\"",
       ",", "155.61`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<MA\>\"", ",", "\"\<\>\"", ",", "728", ",", "0", ",", "0", ",", "0",
       ",", "213", ",", "12", ",", "52", ",", "47", ",", "58", ",", "20", ",",
       "213"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Mica\>\"", ",", "\"\<Bodkins\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "214.32`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<MA\>\"", ",", "\"\<\>\"", ",", "731", ",", "0", ",", "0", ",", "0",
       ",", "221", ",", "13", ",", "56", ",", "47", ",", "50", ",", "29", ",",
       "221"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Shea\>\"", ",", "\"\<Brams\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "177.26`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Hanover NH\>\"", ",", "\"\<\>\"", ",", "715", ",", "0", ",", "0", 
      ",", "0", ",", "196", ",", "8", ",", "46", ",", "36", ",", "57", ",", 
      "33", ",", "196"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Ava\>\"", ",", "\"\<Thurston\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "145.22`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "665", ",", "282", 
      ",", "0", ",", "0", ",", "221", ",", "11", ",", "52", ",", "47", ",", 
      "60", ",", "29", ",", "221"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Rose\>\"", ",", "\"\<Clayton\>\"", ",", "2001", ",", "\"\<All\>\"", 
      ",", "205.69`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "706", ",", "0", ",", 
      "0", ",", "0", ",", "122", ",", "0", ",", "43", ",", "20", ",", "46", 
      ",", "13", ",", "122"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Hattie\>\"", ",", "\"\<Barker\>\"", ",", "2004", ",", "\"\<All\>\"",
       ",", "219.17`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "687", ",", "0", ",", 
      "0", ",", "0", ",", "135", ",", "0", ",", "37", ",", "32", ",", "46", 
      ",", "20", ",", "135"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Samantha\>\"", ",", "\"\<Nolan\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "213.43`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "827", ",", "0", 
      ",", "0", ",", "0", ",", "139", ",", "2", ",", "51", ",", "25", ",", 
      "48", ",", "9", ",", "139"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Finnegan\>\"", ",", "\"\<Mittelstadt\>\"", ",", "2004", ",", 
      "\"\<All\>\"", ",", "223.73`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "658", ",", 
      "275", ",", "0", ",", "0", ",", "175", ",", "2", ",", "53", ",", "40", 
      ",", "45", ",", "31", ",", "175"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Callie\>\"", ",", "\"\<Young\>\"", ",", "2000", ",", "\"\<All\>\"", 
      ",", "117.3`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"",
       ",", "\"\<\>\"", ",", "731", ",", "0", ",", "0", ",", "0", ",", "245", 
      ",", "15", ",", "59", ",", "43", ",", "64", ",", "34", ",", "245"}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Maddie\>\"", ",", "\"\<Relyea\[CapitalEHat]\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "246.05`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Mayfield NY\>\"", ",", "\"\<\>\"", ",", "709", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Grace\>\"", ",", "\"\<Mattern\[CapitalEHat]\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "229.22`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Brighton NY\[CapitalEHat]\>\"", ",", "\"\<\>\"", ",", "710", 
      ",", "260", ",", "0", ",", "0", ",", "163", ",", "3", ",", "48", ",", 
      "37", ",", "51", ",", "18", ",", "163"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Zofia\>\"", ",", "\"\<Stefankovic\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "236.07`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Brighton NY\[CapitalEHat]\>\"", ",", "\"\<\>\"", ",", "736", 
      ",", "260", ",", "0", ",", "0", ",", "175", ",", "13", ",", "38", ",", 
      "36", ",", "36", ",", "26", ",", "175"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Elsa\>\"", ",", "\"\<Bolinger\>\"", ",", "2003", ",", "\"\<All\>\"",
       ",", "212.14`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Lyme, NH\>\"", ",", "\"\<\>\"", ",", "683", ",", "242", ",", "0", 
      ",", "0", ",", "180", ",", "6", ",", "44", ",", "24", ",", "62", ",", 
      "32", ",", "180"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Emma\>\"", ",", "\"\<Strack\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "217.25`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<GMVS\>\"", ",", "\"\<\>\"", ",", "766", ",", "256", ",", "0", ",", 
      "0", ",", "\"\<\>\"", ",", "4", ",", "51", ",", "34", ",", "33", ",", 
      "41", ",", "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Finnegan\>\"", ",", "\"\<Mittelstadt\>\"", ",", "2004", ",", 
      "\"\<All\>\"", ",", "223.73`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Hinesburg, VT\>\"", ",", "\"\<\>\"", ",", "658", ",", "275", 
      ",", "0", ",", "0", ",", "175", ",", "2", ",", "53", ",", "40", ",", 
      "45", ",", "31", ",", "175"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sam\>\"", ",", "\"\<Murray\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "159.78`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Hanover NH\>\"", ",", "\"\<\>\"", ",", "605", ",", "220", ",", "0",
       ",", "0", ",", "238", ",", "15", ",", "46", ",", "35", ",", "67", ",", 
      "45", ",", "238"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jack\>\"", ",", "\"\<Lange\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "164.63`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Lyme NH\>\"", ",", "\"\<\>\"", ",", "614", ",", "235", ",", "0", 
      ",", "0", ",", "229", ",", "11", ",", "50", ",", "44", ",", "57", ",", 
      "45", ",", "229"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Finn\>\"", ",", "\"\<Sweet\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "110.23`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "586", ",", "211", ",", 
      "0", ",", "0", ",", "305", ",", "27", ",", "56", ",", "60", ",", "63", 
      ",", "45", ",", "305"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Quinn\>\"", ",", "\"\<Wilson\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "160.61`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Dublin, NH\>\"", ",", "\"\<\>\"", ",", "673", ",", "226", ",", "0",
       ",", "0", ",", "228", ",", "19", ",", "40", ",", "48", ",", "49", ",", 
      "34", ",", "228"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Clint\>\"", ",", "\"\<Macy\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "256.83`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Dublin, NH\>\"", ",", "\"\<\>\"", ",", "694", ",", "240", ",", "0",
       ",", "0", ",", "274", ",", "23", ",", "52", ",", "60", ",", "59", ",", 
      "34", ",", "274"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Caden\>\"", ",", "\"\<Cote\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "241.39`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Oakland, ME\>\"", ",", "\"\<\>\"", ",", "656", ",", "229", ",", 
      "0", ",", "0", ",", "202", ",", "9", ",", "47", ",", "32", ",", "66", 
      ",", "30", ",", "202"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Linden\>\"", ",", "\"\<Niedeck\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "149.08`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<MA\[CapitalEHat]\>\"", ",", "\"\<\>\"", ",", "653", ",", 
      "216", ",", "0", ",", "0", ",", "214", ",", "8", ",", "39", ",", "48", 
      ",", "57", ",", "46", ",", "214"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Adam\>\"", ",", "\"\<Carlisle\>\"", ",", "2002", ",", "\"\<All\>\"",
       ",", "185.41`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Amherst, MA\>\"", ",", "\"\<\>\"", ",", "679", ",", "0", ",", "0", 
      ",", "0", ",", "325", ",", "29", ",", "73", ",", "62", ",", "61", ",", 
      "42", ",", "325"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Brian\>\"", ",", "\"\<Bushey\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "98.12`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<GMVS\>\"", ",", "\"\<\>\"", ",", "591", ",", "213", ",", "0", ",", 
      "0", ",", "241", ",", "15", ",", "47", ",", "54", ",", "69", ",", "26", 
      ",", "241"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cormac\>\"", ",", "\"\<Leahy\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "233.01`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "578", ",", "0", ",", 
      "0", ",", "0", ",", "234", ",", "16", ",", "52", ",", "37", ",", "63", 
      ",", "34", ",", "234"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Aidan\>\"", ",", "\"\<Burt\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "126.76`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<GMVS\>\"", ",", "\"\<\>\"", ",", "642", ",", "213", ",", "0", ",", 
      "0", ",", "209", ",", "9", ",", "45", ",", "41", ",", "76", ",", "20", 
      ",", "209"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Fin\>\"", ",", "\"\<Bailey\>\"", ",", "2005", ",", "\"\<All\>\"", 
      ",", "195.43`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Peru VT\>\"", ",", "\"\<\>\"", ",", "666", ",", "218", ",", "0", 
      ",", "0", ",", "237", ",", "9", ",", "55", ",", "52", ",", "75", ",", 
      "28", ",", "237"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jack\>\"", ",", "\"\<Young\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "154.05`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "685", ",", "0", ",", 
      "0", ",", "0", ",", "298", ",", "22", ",", "50", ",", "60", ",", "66", 
      ",", "56", ",", "298"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Trey\>\"", ",", "\"\<Jones\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "169.14`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Steamboat Springs CO\>\"", ",", "\"\<\>\"", ",", "665", ",", "0", 
      ",", "0", ",", "0", ",", "275", ",", "19", ",", "51", ",", "53", ",", 
      "78", ",", "36", ",", "275"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jack\>\"", ",", "\"\<Christner\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "147.24`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Frost Mountain\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",",
       "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Rena\>\"", ",", "\"\<Schwartz\>\"", ",", "1999", ",", "\"\<All\>\"",
       ",", "125.77`", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "637", ",", "268", ",", 
      "0", ",", "0", ",", "231", ",", "14", ",", "53", ",", "50", ",", "61", 
      ",", "25", ",", "231"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Avery\>\"", ",", "\"\<Ellis\>\"", ",", "1998", ",", "\"\<All\>\"", 
      ",", "125.24`", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "685", ",", "240", ",", 
      "0", ",", "0", ",", "253", ",", "14", ",", "54", ",", "54", ",", "70", 
      ",", "33", ",", "253"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Emelia\>\"", ",", "\"\<Jordan\[CapitalEHat]\>\"", ",", "2005", ",", 
      "\"\<All\>\"", ",", "303.82`", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Brighton NY\[CapitalEHat]\>\"", ",", "\"\<\>\"", ",", "776", 
      ",", "298", ",", "0", ",", "0", ",", "143", ",", "2", ",", "39", ",", 
      "31", ",", "40", ",", "27", ",", "143"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cathrine\>\"", ",", "\"\<Anzellotti\>\"", ",", "2005", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Brighton NY\[CapitalEHat]\>\"", ",", "\"\<\>\"", ",", "679", 
      ",", "284", ",", "0", ",", "0", ",", "154", ",", "0", ",", "50", ",", 
      "33", ",", "42", ",", "29", ",", "154"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Liza\>\"", ",", "\"\<Bell\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "310.96`", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Putney, VT\>\"", ",", "\"\<\>\"", ",", "0", ",", "258", ",", "0", 
      ",", "0", ",", "199", ",", "3", ",", "44", ",", "39", ",", "58", ",", 
      "49", ",", "199"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Charlotte\>\"", ",", "\"\<Brown\>\"", ",", "2001", ",", 
      "\"\<All\>\"", ",", "222.1`", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<St Paul, MN\>\"", ",", "\"\<\>\"", ",", "734", ",", "258", 
      ",", "0", ",", "0", ",", "154", ",", "7", ",", "46", ",", "25", ",", 
      "38", ",", "24", ",", "154"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Amanda\>\"", ",", "\"\<Vansant\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "289.46`", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Holderness Nordic\>\"", ",", "\"\<\>\"", ",", "0", ",", "270",
       ",", "0", ",", "0", ",", "81", ",", "0", ",", "41", ",", "20", ",", 
      "\"\<\>\"", ",", "20", ",", "81"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lilly\>\"", ",", "\"\<Magnus\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "405.59`", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Holderness Nordic\>\"", ",", "\"\<\>\"", ",", "1060", ",", "285", 
      ",", "0", ",", "0", ",", "85", ",", "2", ",", "30", ",", "25", ",", 
      "\"\<\>\"", ",", "24", ",", "85"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Mae\>\"", ",", "\"\<Whitcomb\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "239.02`", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Holderness Nordic\>\"", ",", "\"\<\>\"", ",", "827", ",", "284", 
      ",", "0", ",", "0", ",", "88", ",", "3", ",", "41", ",", "16", ",", 
      "\"\<\>\"", ",", "22", ",", "88"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Reid\>\"", ",", "\"\<Donovan\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Holderness Nordic\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", 
      ",", "0", ",", "0", ",", "64", ",", "0", ",", "33", ",", "15", ",", 
      "\"\<\>\"", ",", "16", ",", "64"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Kelsey\>\"", ",", "\"\<Maine\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Holderness Nordic\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", 
      ",", "0", ",", "0", ",", "78", ",", "1", ",", "44", ",", "20", ",", 
      "\"\<\>\"", ",", "11", ",", "78"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Adah\>\"", ",", "\"\<Chapman\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Holderness Nordic\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "99", ",", "4", ",", "43", ",", "25", ",", 
      "\"\<\>\"", ",", "19", ",", "99"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sam\>\"", ",", "\"\<Clark\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "314.61`", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", 
      ",", "0", ",", "214", ",", "14", ",", "42", ",", "50", ",", "50", ",", 
      "30", ",", "214"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jed\>\"", ",", "\"\<Kurts\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "196.95`", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", 
      ",", "0", ",", "273", ",", "20", ",", "55", ",", "55", ",", "53", ",", 
      "50", ",", "273"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Chip\>\"", ",", "\"\<Freeman\>\"", ",", "2005", ",", "\"\<All\>\"", 
      ",", "355.01`", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Peru VT\>\"", ",", "\"\<\>\"", ",", "731", ",", "270", ",", "0", 
      ",", "0", ",", "252", ",", "8", ",", "54", ",", "54", ",", "66", ",", 
      "54", ",", "252"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jasper\>\"", ",", "\"\<Henderson\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Craftsbury VT\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "231", ",", "11", ",", "57", ",", "41", ",", "60", 
      ",", "40", ",", "231"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Gunnar\>\"", ",", "\"\<Caldwell\>\"", ",", "2004", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Putney, VT\>\"", ",", "\"\<\>\"", ",", "0", ",", "262", ",", 
      "0", ",", "0", ",", "163", ",", "5", ",", "36", ",", "43", ",", "53", 
      ",", "16", ",", "163"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Omar\>\"", ",", "\"\<Arbruster\[CapitalEHat]\>\"", ",", "2003", 
      ",", "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Honeoye Falls NY\>\"", ",", "\"\<\>\"", ",", 
      "618", ",", "252", ",", "0", ",", "0", ",", "235", ",", "15", ",", "44",
       ",", "43", ",", "58", ",", "45", ",", "235"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jack\>\"", ",", "\"\<Hulsey\[CapitalEHat]\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Honeoye Falls NY\>\"", ",", "\"\<\>\"", ",", "647", ",", 
      "249", ",", "0", ",", "0", ",", "283", ",", "21", ",", "43", ",", "62", 
      ",", "64", ",", "51", ",", "283"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Liam\>\"", ",", "\"\<Judd\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Brighton NY\[CapitalEHat]\>\"", ",", "\"\<\>\"", ",", "725", ",", 
      "252", ",", "0", ",", "0", ",", "195", ",", "6", ",", "42", ",", "45", 
      ",", "50", ",", "40", ",", "195"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Alex\>\"", ",", "\"\<Pogharien\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Pittsford NY\[CapitalEHat]\>\"", ",", "\"\<\>\"", ",", "707", 
      ",", "243", ",", "0", ",", "0", ",", "202", ",", "10", ",", "41", ",", 
      "41", ",", "45", ",", "45", ",", "202"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Paul\>\"", ",", "\"\<Mason\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Holderness Nordic\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", 
      ",", "0", ",", "0", ",", "68", ",", "2", ",", "26", ",", "14", ",", 
      "\"\<\>\"", ",", "22", ",", "68"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Charlie\>\"", ",", "\"\<Dobson\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Holderness Nordic\>\"", ",", "\"\<\>\"", ",", "693", ",", "0",
       ",", "0", ",", "0", ",", "245", ",", "30", ",", "59", ",", "46", ",", 
      "\"\<\>\"", ",", "50", ",", "245"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Surya\>\"", ",", "\"\<Amundsen\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Oakland, ME\>\"", ",", "\"\<\>\"", ",", "808", ",", "298", 
      ",", "0", ",", "0", ",", "164", ",", "2", ",", "45", ",", "35", ",", 
      "47", ",", "31", ",", "164"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Keya\>\"", ",", "\"\<Amundsen\>\"", ",", "2004", ",", "\"\<All\>\"",
       ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Oakland, ME\>\"", ",", "\"\<\>\"", ",", "928", ",", "311", ",", 
      "0", ",", "0", ",", "109", ",", "3", ",", "35", ",", "20", ",", "30", 
      ",", "15", ",", "109"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Charles\>\"", ",", "\"\<Martell\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "598", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Silas\>\"", ",", "\"\<Brown\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "653", ",", "0", ",", 
      "0", ",", "0", ",", "215", ",", "13", ",", "49", ",", "40", ",", "58", 
      ",", "29", ",", "215"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Niko\>\"", ",", "\"\<Cuneo\>\"", ",", "2007", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "665", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Taylor\>\"", ",", "\"\<Carlson\>\"", ",", "2006", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "721", ",", "0", ",", 
      "0", ",", "0", ",", "136", ",", "3", ",", "30", ",", "39", ",", "34", 
      ",", "24", ",", "136"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jax\>\"", ",", "\"\<Lubkowitz\>\"", ",", "2002", ",", "\"\<All\>\"",
       ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "739", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Carl\>\"", ",", "\"\<Priganc\>\"", ",", "2006", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "777", ",", "0", ",", 
      "0", ",", "0", ",", "177", ",", "5", ",", "57", ",", "45", ",", "30", 
      ",", "30", ",", "177"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lily\>\"", ",", "\"\<Porth\>\"", ",", "2001", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "719", ",", "0", ",", 
      "0", ",", "0", ",", "192", ",", "8", ",", "45", ",", "37", ",", "58", 
      ",", "30", ",", "192"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Julia\>\"", ",", "\"\<Thurston\>\"", ",", "2006", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "727", ",", "0",
       ",", "0", ",", "0", ",", "143", ",", "6", ",", "47", ",", "26", ",", 
      "38", ",", "14", ",", "143"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Isabelle\>\"", ",", "\"\<Serrano\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Craftsbury/MNC\>\"", ",", "\"\<\>\"", ",", "754", ",", "0", 
      ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Julia\>\"", ",", "\"\<Oliver\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "819", ",", "0", ",", 
      "0", ",", "0", ",", "162", ",", "3", ",", "52", ",", "43", ",", "38", 
      ",", "20", ",", "162"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Ali\>\"", ",", "\"\<Priganc\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "819", ",", "0", ",", 
      "0", ",", "0", ",", "150", ",", "3", ",", "36", ",", "40", ",", "40", 
      ",", "25", ",", "150"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Hanna\>\"", ",", "\"\<Holm\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "844", ",", "0", ",", 
      "0", ",", "0", ",", "164", ",", "6", ",", "45", ",", "33", ",", "47", 
      ",", "21", ",", "164"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Virginia\>\"", ",", "\"\<Cobb\>\"", ",", "2005", ",", "\"\<All\>\"",
       ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "870", ",", "0", ",", 
      "0", ",", "0", ",", "120", ",", "0", ",", "44", ",", "31", ",", "30", 
      ",", "15", ",", "120"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jessie\>\"", ",", "\"\<Kennedy\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Mansfield Nordic\>\"", ",", "\"\<\>\"", ",", "941", ",", "0",
       ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Evan\>\"", ",", "\"\<Grover\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Bend Oregon\>\"", ",", "\"\<\>\"", ",", "635", ",", "250", ",", 
      "0", ",", "0", ",", "181", ",", "14", ",", "37", ",", "53", ",", "55", 
      ",", "27", ",", "181"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Anja\>\"", ",", "\"\<Grover\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Sun Valley Idaho\>\"", ",", "\"\<\>\"", ",", "1108", ",", "0", ",",
       "0", ",", "0", ",", "\"\<\>\"", ",", "7", ",", "41", ",", "39", ",", 
      "54", ",", "31", ",", "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Fran\>\"", ",", "\"\<Peterson\>\"", ",", "2005", ",", "\"\<All\>\"",
       ",", "355.61`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Barron\[CapitalEHat]\>\"", ",", "1150", ",", "713", ",", "288", 
      ",", "0", ",", "0", ",", "175", ",", "4", ",", "45", ",", "32", ",", 
      "39", ",", "47", ",", "175"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Margo\>\"", ",", "\"\<Nightingale\>\"", ",", "2005", ",", 
      "\"\<All\>\"", ",", "232.11`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "0",
       ",", "84", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"",
       ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Morgan\>\"", ",", "\"\<Richter\>\"", ",", "2001", ",", 
      "\"\<All\>\"", ",", "235.9`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "638", ",", "0", ",", 
      "478", ",", "132", ",", "209", ",", "6", ",", "68", ",", "46", ",", 
      "47", ",", "30", ",", "209"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jasper\>\"", ",", "\"\<Johnston\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "159.86`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Ely\>\"", ",", "800", ",", "649", ",", "210", ",", "0", ",", 
      "0", ",", "261", ",", "18", ",", "49", ",", "59", ",", "61", ",", "40", 
      ",", "261"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Owen\>\"", ",", "\"\<Williams\>\"", ",", "2004", ",", "\"\<All\>\"",
       ",", "251.46`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Stevens Point,WI\>\"", ",", "1090", ",", "675", ",", "194", ",", 
      "0", ",", "0", ",", "268", ",", "22", ",", "55", ",", "58", ",", "67", 
      ",", "22", ",", "268"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Isak\>\"", ",", "\"\<Nightingale\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "175.88`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "0",
       ",", "65", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"",
       ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Victor\[CapitalEHat]\>\"", ",", "\"\<Sparks\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "183.1`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "616", ",", "0", ",", 
      "407", ",", "66", ",", "297", ",", "22", ",", "70", ",", "50", ",", 
      "60", ",", "51", ",", "297"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jon\>\"", ",", "\"\<Clarke\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "652", ",", "0", ",", "435", 
      ",", "67", ",", "234", ",", "23", ",", "60", ",", "32", ",", "48", ",", 
      "25", ",", "234"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Adrik\>\"", ",", "\"\<Kraftson\>\"", ",", "2004", ",", 
      "\"\<All\>\"", ",", "241.48`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "578", ",", "0", ",", 
      "392", ",", "72", ",", "277", ",", "20", ",", "66", ",", "55", ",", 
      "59", ",", "37", ",", "277"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jon\>\"", ",", "\"\<Saldin\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "286.77`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "671", ",", "0", ",", "458", 
      ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Roger\>\"", ",", "\"\<Anderson\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "146.86`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "585", ",", "0", ",", 
      "0", ",", "0", ",", "319", ",", "22", ",", "52", ",", "57", ",", "62", 
      ",", "82", ",", "319"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Aidan\>\"", ",", "\"\<Earll\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "673", ",", "0", ",", "0", ",", "0", 
      ",", "245", ",", "14", ",", "55", ",", "57", ",", "61", ",", "30", ",", 
      "245"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Bank\>\"", ",", "\"\<Bodor\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "596", ",", "215", ",", "0", ",", "0", ",", "230",
       ",", "13", ",", "46", ",", "50", ",", "61", ",", "34", ",", "230"}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Casey\>\"", ",", "\"\<Van Hefty\>\"", ",", "2004", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "625", ",", "232", ",", "0", ",", "0",
       ",", "255", ",", "17", ",", "48", ",", "63", ",", "61", ",", "32", ",",
       "255"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Grace\>\"", ",", "\"\<Kern\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "799", ",", "304", ",", "0", ",", "0",
       ",", "180", ",", "11", ",", "31", ",", "31", ",", "45", ",", "40", ",",
       "180"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Caden\>\"", ",", "\"\<Albrecht\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", 
      "450", ",", "64", ",", "273", ",", "24", ",", "46", ",", "53", ",", 
      "53", ",", "49", ",", "273"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jeff\>\"", ",", "\"\<Hodgson\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "525", 
      ",", "78", ",", "169", ",", "3", ",", "68", ",", "25", ",", "47", ",", 
      "20", ",", "169"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Hariharam\>\"", ",", "\"\<Chidambaram\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", 
      "425", ",", "100", ",", "200", ",", "12", ",", "64", ",", "23", ",", 
      "55", ",", "22", ",", "200"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Magnus\>\"", ",", "\"\<O'Connor\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", 
      "444", ",", "75", ",", "218", ",", "10", ",", "55", ",", "36", ",", 
      "63", ",", "34", ",", "218"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cooper\>\"", ",", "\"\<Camp\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "0", ",",
       "83", ",", "184", ",", "13", ",", "49", ",", "33", ",", "51", ",", 
      "12", ",", "184"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Nico\>\"", ",", "\"\<Alexander\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", 
      "418", ",", "95", ",", "202", ",", "13", ",", "62", ",", "33", ",", 
      "58", ",", "10", ",", "202"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Benon\>\"", ",", "\"\<Bettobro\>\"", ",", "2004", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", 
      "426", ",", "85", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Leif\>\"", ",", "\"\<Sciroa\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "0", ",",
       "86", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Andrew\>\"", ",", "\"\<Defor\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "448", 
      ",", "79", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Evan\>\"", ",", "\"\<O'Connor\>\"", ",", "2004", ",", "\"\<All\>\"",
       ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "462", 
      ",", "77", ",", "167", ",", "3", ",", "54", ",", "28", ",", "56", ",", 
      "20", ",", "167"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Colin\>\"", ",", "\"\<Freed\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "444", 
      ",", "75", ",", "381", ",", "32", ",", "68", ",", "80", ",", "69", ",", 
      "68", ",", "381"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Ericka\>\"", ",", "\"\<Peterson\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", 
      "737", ",", "86", ",", "148", ",", "1", ",", "67", ",", "18", ",", "41",
       ",", "19", ",", "148"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sophia\>\"", ",", "\"\<Pung\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "745", 
      ",", "100", ",", "163", ",", "6", ",", "55", ",", "28", ",", "40", ",", 
      "22", ",", "163"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Johanna\>\"", ",", "\"\<Perry\>\"", ",", "2003", ",", "\"\<All\>\"",
       ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "692", 
      ",", "126", ",", "135", ",", "0", ",", "57", ",", "30", ",", "30", ",", 
      "18", ",", "135"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Addie\>\"", ",", "\"\<Fabel\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "0", ",",
       "98", ",", "151", ",", "3", ",", "45", ",", "42", ",", "30", ",", "25",
       ",", "151"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Eleanor\>\"", ",", "\"\<Wheeler\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", 
      "711", ",", "130", ",", "149", ",", "0", ",", "64", ",", "15", ",", 
      "43", ",", "27", ",", "149"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Laura\>\"", ",", "\"\<Pacala\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "755", 
      ",", "120", ",", "153", ",", "1", ",", "58", ",", "27", ",", "48", ",", 
      "17", ",", "153"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Kathryn\>\"", ",", "\"\<House\>\"", ",", "2003", ",", "\"\<All\>\"",
       ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "640", 
      ",", "113", ",", "168", ",", "0", ",", "68", ",", "17", ",", "48", ",", 
      "35", ",", "168"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sierra\>\"", ",", "\"\<Larson\>\"", ",", "2004", ",", "\"\<All\>\"",
       ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "0", ",",
       "106", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Etta\>\"", ",", "\"\<Luegers\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "557", 
      ",", "98", ",", "103", ",", "2", ",", "50", ",", "28", ",", "\"\<\>\"", 
      ",", "19", ",", "103"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Mila\>\"", ",", "\"\<Finch\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "560", 
      ",", "115", ",", "192", ",", "2", ",", "57", ",", "39", ",", "58", ",", 
      "32", ",", "192"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Eli\[CapitalEHat]\>\"", ",", "\"\<Frenkel\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", 
      "466", ",", "0", ",", "200", ",", "13", ",", "55", ",", "39", ",", "43",
       ",", "24", ",", "200"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Stas\>\"", ",", "\"\<Bednarski\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", 
      "460", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Charlie\>\"", ",", "\"\<Grabow\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", 
      "440", ",", "0", ",", "255", ",", "23", ",", "51", ",", "41", ",", "60",
       ",", "34", ",", "255"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Bergen\>\"", ",", "\"\<Thorson\>\"", ",", "2004", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", 
      "488", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Grete\>\"", ",", "\"\<Engels\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Minneapolis MN\>\"", ",", "630", ",", "0", ",", "0", ",", "0", ",",
       "0", ",", "167", ",", "7", ",", "56", ",", "24", ",", "42", ",", "24", 
      ",", "167"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lexie\>\"", ",", "\"\<Madigan\>\"", ",", "2002", ",", "\"\<All\>\"",
       ",", "229.23`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Truckee High School\>\"", ",", "\"\<\>\"", ",", "810", ",", "246", 
      ",", "0", ",", "0", ",", "200", ",", "10", ",", "43", ",", "34", ",", 
      "65", ",", "28", ",", "200"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Annie\>\"", ",", "\"\<McColgan\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "181.47`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "722", ",", "250", ",", "0", ",",
       "0", ",", "224", ",", "9", ",", "56", ",", "49", ",", "55", ",", "37", 
      ",", "224"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Novie\[CapitalEHat]\>\"", ",", "\"\<McCabe\>\"", ",", "2001", ",", 
      "\"\<All\>\"", ",", "93.8`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Methow Valley WA\>\"", ",", "\"\<\>\"", ",", "660", ",", 
      "255", ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Anja\>\"", ",", "\"\<Jensen\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "200.63`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Sun Valley\>\"", ",", "\"\<\>\"", ",", "757", ",", "258", ",", "0",
       ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sidney\>\"", ",", "\"\<Barbier\[CapitalEHat]\>\"", ",", "2003", 
      ",", "\"\<All\>\"", ",", "187.52`", ",", "\"\<Female\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Steamboat Springs\>\"", ",", "\"\<\>\"", ",", 
      "761", ",", "270", ",", "0", ",", "0", ",", "192", ",", "4", ",", "51", 
      ",", "39", ",", "50", ",", "40", ",", "192"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lily\>\"", ",", "\"\<Murnane\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "232.97`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Truckee High School\>\"", ",", "\"\<\>\"", ",", "794", ",", "289", 
      ",", "0", ",", "0", ",", "164", ",", "5", ",", "43", ",", "31", ",", 
      "42", ",", "33", ",", "164"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Gretta\>\"", ",", "\"\<Scholz\>\"", ",", "2001", ",", "\"\<All\>\"",
       ",", "184.39`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "710", ",", "289", ",", "0", ",", "0",
       ",", "216", ",", "17", ",", "54", ",", "36", ",", "46", ",", "29", ",",
       "216"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Kate\>\"", ",", "\"\<Oldham\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "142.1`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"",
       ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Molly\>\"", ",", "\"\<Blakslee\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "199.15`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "742", ",", "0", ",", "0", ",", 
      "0", ",", "172", ",", "4", ",", "44", ",", "40", ",", "61", ",", "15", 
      ",", "172"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sarah\>\"", ",", "\"\<Bivens\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "164.26`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", 
      ",", "187", ",", "4", ",", "53", ",", "34", ",", "61", ",", "27", ",", 
      "187"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Haley\>\"", ",", "\"\<Brewster\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "157.23`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "715", ",", "0", ",", "0", ",", 
      "0", ",", "204", ",", "8", ",", "60", ",", "43", ",", "54", ",", "23", 
      ",", "204"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Emma\>\"", ",", "\"\<Reeder\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "153.67`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Vail, CO\>\"", ",", "\"\<\>\"", ",", "713", ",", "0", ",", "0", 
      ",", "0", ",", "268", ",", "10", ",", "65", ",", "53", ",", "67", ",", 
      "53", ",", "268"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Walker\>\"", ",", "\"\<Hall\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "114.42`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "210", ",", "0", ",", "0", ",", "0", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jack\>\"", ",", "\"\<Conde\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "171.93`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "601", ",", "218", ",", "0", ",", "0", ",", "242",
       ",", "16", ",", "47", ",", "53", ",", "62", ",", "32", ",", "242"}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lane\>\"", ",", "\"\<Myshrall\>\"", ",", "2001", ",", "\"\<All\>\"",
       ",", "152.04`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<park city\>\"", ",", "\"\<\>\"", ",", "664", ",", "223", ",", "0", 
      ",", "0", ",", "299", ",", "24", ",", "58", ",", "61", ",", "63", ",", 
      "45", ",", "299"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Wes\>\"", ",", "\"\<Campbell\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "172.67`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "624", ",", "226", ",", "0", ",", "0", ",", "227",
       ",", "11", ",", "54", ",", "34", ",", "64", ",", "42", ",", "227"}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Travis\>\"", ",", "\"\<Grialou\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "166.14`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "227", ",", "0", ",", 
      "0", ",", "170", ",", "22", ",", "40", ",", "48", ",", "\"\<\>\"", ",", 
      "16", ",", "170"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Skylar\>\"", ",", "\"\<Patten\>\"", ",", "2001", ",", "\"\<All\>\"",
       ",", "125.67`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Sun Valley\>\"", ",", "\"\<\>\"", ",", "589", ",", "232", ",", "0",
       ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Elijah\>\"", ",", "\"\<Weenig\>\"", ",", "2002", ",", "\"\<All\>\"",
       ",", "124.89`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Sun Valley\>\"", ",", "\"\<\>\"", ",", "630", ",", "236", ",", "0",
       ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Logan\>\"", ",", "\"\<Moore\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "140.39`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Durango, Colorado\>\"", ",", "\"\<\>\"", ",", "573", ",", "236", 
      ",", "0", ",", "0", ",", "273", ",", "21", ",", "40", ",", "62", ",", 
      "50", ",", "58", ",", "273"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Wally\>\"", ",", "\"\<Magill\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "96.13`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Steamboat Springs\>\"", ",", "\"\<\>\"", ",", "597", ",", "0", ",",
       "0", ",", "0", ",", "297", ",", "23", ",", "51", ",", "49", ",", "75", 
      ",", "53", ",", "297"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Carson\>\"", ",", "\"\<Williams\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "158.5`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Boulder, CO\>\"", ",", "\"\<\>\"", ",", "585", ",", "0", ",", 
      "0", ",", "0", ",", "226", ",", "8", ",", "48", ",", "54", ",", "56", 
      ",", "44", ",", "226"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Nikolas\>\"", ",", "\"\<Burkhart\>\"", ",", "2001", ",", 
      "\"\<All\>\"", ",", "197.26`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"",
       ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Seth\>\"", ",", "\"\<Wyatt\>\"", ",", "2001", ",", "\"\<All\>\"", 
      ",", "153.54`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cooper\>\"", ",", "\"\<Jones\>\"", ",", "2001", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Steamboat Springs\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Hadassah\[CapitalEHat]\>\"", ",", "\"\<Lurbur\>\"", ",", "2000", 
      ",", "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Winthrop WA\>\"", ",", "\"\<\>\"", ",", "0", ",",
       "243", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Greta\[CapitalEHat]\>\"", ",", "\"\<Laesch\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<winthrop WA\>\"", ",", "\"\<\>\"", ",", "708", ",", "0", ",",
       "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Eva\[CapitalEHat]\>\"", ",", "\"\<Weymuller\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<winthrop WA\>\"", ",", "\"\<\>\"", ",", "812", ",", "0", ",",
       "0", ",", "0", ",", "163", ",", "9", ",", "44", ",", "25", ",", "46", 
      ",", "21", ",", "163"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Dashe\>\"", ",", "\"\<McCabe\>\"", ",", "2006", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<winthrop WA\>\"", ",", "\"\<\>\"", ",", "772", ",", "0", ",", "0", 
      ",", "0", ",", "210", ",", "20", ",", "39", ",", "42", ",", "49", ",", 
      "20", ",", "210"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Carter\>\"", ",", "\"\<Sheley\>\"", ",", "2005", ",", "\"\<All\>\"",
       ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<winthrop WA\>\"", ",", "\"\<\>\"", ",", "662", ",", "0", ",", "0", 
      ",", "0", ",", "198", ",", "14", ",", "48", ",", "46", ",", "47", ",", 
      "15", ",", "198"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Graham\>\"", ",", "\"\<Sheley\>\"", ",", "2005", ",", "\"\<All\>\"",
       ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<winthrop WA\>\"", ",", "\"\<\>\"", ",", "641", ",", "0", ",", "0", 
      ",", "0", ",", "229", ",", "19", ",", "41", ",", "60", ",", "47", ",", 
      "24", ",", "229"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jori\>\"", ",", "\"\<Grialou\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<winthrop WA\>\"", ",", "\"\<\>\"", ",", "735", ",", "0", ",", "0", 
      ",", "0", ",", "162", ",", "12", ",", "40", ",", "39", ",", "37", ",", 
      "10", ",", "162"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Mariah\[CapitalEHat]\>\"", ",", "\"\<Lucy\>\"", ",", "2004", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<winthrop WA\>\"", ",", "\"\<\>\"", ",", "856", ",", "0", ",",
       "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Bordes\>\"", ",", "\"\<Etienne\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "624", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cuneo\>\"", ",", "\"\<Steffen\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "628", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Deluna\>\"", ",", "\"\<Matthew\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "737", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lehmkuhl\>\"", ",", "\"\<Kili\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "739", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Garso\>\"", ",", "\"\<Jackie\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "762", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Feland\>\"", ",", "\"\<Zandra\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "794", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Powell\>\"", ",", "\"\<Alani\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "799", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Scott\>\"", ",", "\"\<Keira\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "801", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Hammond\>\"", ",", "\"\<Hannah\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "830", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cutler\>\"", ",", "\"\<Ben\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "860", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Schoonmaker\>\"", ",", "\"\<Mera\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "871", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jake\>\"", ",", "\"\<Steeves\[CapitalEHat]\>\"", ",", "\"\<\>\"", 
      ",", "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Boulder, CO\>\"", ",", "\"\<\>\"", ",", "0", ",",
       "0", ",", "0", ",", "0", ",", "210", ",", "9", ",", "42", ",", "35", 
      ",", "68", ",", "38", ",", "210"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sam\>\"", ",", "\"\<Brooks\[CapitalEHat]\>\"", ",", "\"\<\>\"", 
      ",", "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", 
      "\"\<N\>\"", ",", "\"\<Boulder, CO\>\"", ",", "\"\<\>\"", ",", "0", ",",
       "0", ",", "0", ",", "0", ",", "290", ",", "19", ",", "60", ",", "63", 
      ",", "51", ",", "59", ",", "290"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Samuel\>\"", ",", "\"\<Berets\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Boulder, CO\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "276", ",", "13", ",", "61", ",", "52", ",", "52", 
      ",", "72", ",", "276"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Samuel\>\"", ",", "\"\<Gurarie\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Boulder, CO\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "130", ",", "7", ",", "34", ",", "28", ",", "32", 
      ",", "15", ",", "130"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lucas\>\"", ",", "\"\<Martens\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Boulder, CO\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "263", ",", "16", ",", "48", ",", "62", ",", "57", 
      ",", "48", ",", "263"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sophie\>\"", ",", "\"\<Spalding\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Boulder, CO\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "242", ",", "10", ",", "50", ",", "61", ",", "50", 
      ",", "51", ",", "242"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Wettermark\>\"", ",", "\"\<Pascal\>\"", ",", "2006", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", 
      ",", "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "702", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Nygard\>\"", ",", "\"\<CJ\>\"", ",", "2005", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<N\>\"", ",", 
      "\"\<Truckee CA\>\"", ",", "\"\<\>\"", ",", "711", ",", "0", ",", "0", 
      ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cisler\>\"", ",", "\"\<Grace\>\"", ",", "\"\<\>\"", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<N\>\"",
       ",", "\"\<Yuba City, CA\>\"", ",", "\"\<\>\"", ",", "799", ",", "0", 
      ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Hattie\>\"", ",", "\"\<Barker\>\"", ",", "2004", ",", "\"\<All\>\"",
       ",", "219.17`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "665", ",", "246", ",", "0", ",", "0",
       ",", "162", ",", "1", ",", "42", ",", "30", ",", "62", ",", "25", ",", 
      "162"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Emma\>\"", ",", "\"\<Charles\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "231.6`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"",
       ",", "\"\<\>\"", ",", "770", ",", "250", ",", "0", ",", "0", ",", 
      "200", ",", "8", ",", "50", ",", "44", ",", "52", ",", "30", ",", 
      "200"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Elena\>\"", ",", "\"\<Grissom\>\"", ",", "2004", ",", "\"\<All\>\"",
       ",", "214.42`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "700", ",", "255", ",", "0", ",", "0",
       ",", "202", ",", "14", ",", "42", ",", "35", ",", "54", ",", "29", ",",
       "202"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Anja\>\"", ",", "\"\<Grover\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "235", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "258", ",", "0", ",", "0", ",", "0", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Hayden\>\"", ",", "\"\<McJunkin\>\"", ",", "2004", ",", 
      "\"\<All\>\"", ",", "253.17`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "270", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Natalie\[CapitalEHat]\>\"", ",", "\"\<O\[CapitalOTilde]Brien\>\"", 
      ",", "2004", ",", "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"",
       ",", "\"\<Y\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", 
      "289", ",", "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Elsa\>\"", ",", "\"\<Perkins\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "174.62`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "289", ",", "0", ",", "0", 
      ",", "205", ",", "9", ",", "64", ",", "35", ",", "59", ",", "20", ",", 
      "205"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Fran\>\"", ",", "\"\<Peterson\>\"", ",", "2005", ",", "\"\<All\>\"",
       ",", "355.61`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "674", ",", "0", ",", "0", ",", "0", 
      ",", "196", ",", "7", ",", "46", ",", "39", ",", "44", ",", "46", ",", 
      "196"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Kaylynn\>\"", ",", "\"\<Sandall\>\"", ",", "2004", ",", 
      "\"\<All\>\"", ",", "298.09`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "737", ",", "0", ",", "0", ",", 
      "0", ",", "147", ",", "2", ",", "41", ",", "20", ",", "56", ",", "24", 
      ",", "147"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Nina\>\"", ",", "\"\<Schamberger\>\"", ",", "2005", ",", 
      "\"\<All\>\"", ",", "163.5`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "684", ",", "0", ",", "0", ",", 
      "0", ",", "258", ",", "13", ",", "64", ",", "55", ",", "69", ",", "31", 
      ",", "258"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sofia\>\"", ",", "\"\<Scirica\>\"", ",", "2004", ",", "\"\<All\>\"",
       ",", "155.61`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "728", ",", "0", ",", "0", ",", "0", 
      ",", "251", ",", "12", ",", "56", ",", "60", ",", "65", ",", "34", ",", 
      "251"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Ava\>\"", ",", "\"\<Thurston\[CapitalEHat]\>\"", ",", "2004", ",", 
      "\"\<All\>\"", ",", "\"\<\>\"", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"",
       ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "210", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Fin\>\"", ",", "\"\<Bailey\>\"", ",", "2005", ",", "\"\<All\>\"", 
      ",", "195.43`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "218", ",", "0", ",", "0", ",", "0", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Wes\>\"", ",", "\"\<Campbell\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "172.67`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "624", ",", "223", ",", "0", ",", "0", ",", "227",
       ",", "11", ",", "54", ",", "34", ",", "64", ",", "42", ",", "227"}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Matthew\>\"", ",", "\"\<DeLuna\>\"", ",", "2004", ",", 
      "\"\<All\>\"", ",", "335.28`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "737", ",", "226", ",", "0", ",",
       "0", ",", "250", ",", "24", ",", "41", ",", "47", ",", "59", ",", "31",
       ",", "250"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Ethan\>\"", ",", "\"\<Eski\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "275.08`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "638", ",", "227", ",", "0", ",", "0", ",", "282",
       ",", "25", ",", "53", ",", "50", ",", "58", ",", "46", ",", "282"}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Phineas\>\"", ",", "\"\<Fischer\>\"", ",", "2004", ",", 
      "\"\<All\>\"", ",", "214.38`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "232", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Gavin\>\"", ",", "\"\<Galyardt\>\"", ",", "2005", ",", 
      "\"\<All\>\"", ",", "271.85`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "236", ",", "0", ",", 
      "0", ",", "181", ",", "8", ",", "26", ",", "45", ",", "51", ",", "35", 
      ",", "181"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Trey\>\"", ",", "\"\<Jones\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "169.14`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "236", ",", "0", ",", "0", ",", "0", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Max\>\"", ",", "\"\<Kluck\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "218.35`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jack\>\"", ",", "\"\<Lange\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "164.63`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "611", ",", "0", ",", "0", ",", "0", ",", "239", 
      ",", "12", ",", "49", ",", "49", ",", "57", ",", "48", ",", "239"}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Clint\>\"", ",", "\"\<Macy\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "256.83`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Ben\>\"", ",", "\"\<Oldham\>\"", ",", "2005", ",", "\"\<All\>\"", 
      ",", "237.65`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", ",", "220", 
      ",", "19", ",", "42", ",", "32", ",", "60", ",", "29", ",", "220"}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Aaron\>\"", ",", "\"\<Power\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "222.78`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "620", ",", "0", ",", "0", ",", "0", ",", "287", 
      ",", "19", ",", "49", ",", "69", ",", "58", ",", "54", ",", "287"}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Derek\>\"", ",", "\"\<Richardson\>\"", ",", "2004", ",", 
      "\"\<All\>\"", ",", "241.4`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Griff\>\"", ",", "\"\<Rillos\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "211.74`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Matt\>\"", ",", "\"\<Seline\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "240.1`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cole\>\"", ",", "\"\<Shockey\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "259.19`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Emmet\>\"", ",", "\"\<Shuman\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "437.75`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", ",", "176", 
      ",", "9", ",", "32", ",", "29", ",", "58", ",", "30", ",", "176"}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Noah\>\"", ",", "\"\<Straka\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "249.91`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "617", ",", "0", ",", "0", ",", "0", ",", "306", 
      ",", "32", ",", "50", ",", "60", ",", "50", ",", "50", ",", "306"}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Mason\[CapitalEHat]\>\"", ",", "\"\<Wheeler\>\"", ",", "2004", ",", 
      "\"\<All\>\"", ",", "215.39`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Owen\>\"", ",", "\"\<Williams\>\"", ",", "2004", ",", "\"\<All\>\"",
       ",", "251.46`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"",
       ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Tyler\>\"", ",", "\"\<Wright\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "225.91`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Kate\>\"", ",", "\"\<Oldham\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "142.1`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Truckee High School\>\"", ",", "5957", ",", "810", ",", "0", ",", 
      "0", ",", "0", ",", "200", ",", "10", ",", "43", ",", "\"\<\>\"", ",", 
      "65", ",", "28", ",", "200"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lily\>\"", ",", "\"\<Murnane\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "232.97`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "722", ",", "0", ",", "0", ",", "0", 
      ",", "224", ",", "9", ",", "56", ",", "\"\<\>\"", ",", "55", ",", "37", 
      ",", "224"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Nikolas\>\"", ",", "\"\<Burkhart\>\"", ",", "2001", ",", 
      "\"\<All\>\"", ",", "197.26`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Methow Valley WA\>\"", ",", "2000", ",", "660", ",", "0", ",",
       "0", ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lexie\>\"", ",", "\"\<Madigan\>\"", ",", "2002", ",", "\"\<All\>\"",
       ",", "229.23`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Sun Valley\>\"", ",", "5300", ",", "757", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Carson\>\"", ",", "\"\<Williams\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "158.5`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Steamboat Springs\>\"", ",", "6750", ",", "761", ",", "0", 
      ",", "0", ",", "0", ",", "192", ",", "4", ",", "51", ",", "\"\<\>\"", 
      ",", "50", ",", "40", ",", "192"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Seth\>\"", ",", "\"\<Wyatt\>\"", ",", "2001", ",", "\"\<All\>\"", 
      ",", "153.54`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Truckee High School\>\"", ",", "5957", ",", "794", ",", "0", ",", 
      "0", ",", "0", ",", "164", ",", "5", ",", "43", ",", "\"\<\>\"", ",", 
      "42", ",", "33", ",", "164"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Logan\>\"", ",", "\"\<Moore\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "140.39`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "2000", ",", "710", ",", "0", ",", "0", ",", "0", ",", "216", ",", 
      "17", ",", "54", ",", "\"\<\>\"", ",", "46", ",", "29", ",", "216"}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Jack\>\"", ",", "\"\<Conde\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "171.93`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Novie\[CapitalEHat]\>\"", ",", "\"\<McCabe\>\"", ",", "2001", ",", 
      "\"\<All\>\"", ",", "93.8`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "742", ",", "0", ",", "0", ",", 
      "0", ",", "172", ",", "4", ",", "44", ",", "\"\<\>\"", ",", "61", ",", 
      "15", ",", "172"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Gretta\>\"", ",", "\"\<Scholz\>\"", ",", "2001", ",", "\"\<All\>\"",
       ",", "184.39`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", 
      ",", "187", ",", "4", ",", "53", ",", "\"\<\>\"", ",", "61", ",", "27", 
      ",", "187"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Annie\>\"", ",", "\"\<McColgan\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "181.47`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "715", ",", "0", ",", "0", ",", 
      "0", ",", "204", ",", "8", ",", "60", ",", "\"\<\>\"", ",", "54", ",", 
      "23", ",", "204"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Travis\>\"", ",", "\"\<Grialou\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "166.14`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Vail, CO\>\"", ",", "7400", ",", "713", ",", "0", ",", "0", 
      ",", "0", ",", "268", ",", "10", ",", "65", ",", "\"\<\>\"", ",", "67", 
      ",", "53", ",", "268"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Walker\>\"", ",", "\"\<Hall\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "114.42`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Lane\>\"", ",", "\"\<Myshrall\>\"", ",", "2001", ",", "\"\<All\>\"",
       ",", "152.04`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"",
       ",", "\"\<\>\"", ",", "601", ",", "0", ",", "0", ",", "0", ",", "242", 
      ",", "16", ",", "47", ",", "\"\<\>\"", ",", "62", ",", "32", ",", 
      "242"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Wes\>\"", ",", "\"\<Campbell\>\"", ",", "2004", ",", "\"\<All\>\"", 
      ",", "172.67`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<park city\>\"", ",", "6755", ",", "664", ",", "0", ",", "0", ",", 
      "0", ",", "299", ",", "24", ",", "58", ",", "\"\<\>\"", ",", "63", ",", 
      "45", ",", "299"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Emma\>\"", ",", "\"\<Reeder\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "153.67`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<\>\"", ",", "6755", ",", "624", ",", "0", ",", "0", ",", "0", ",", 
      "227", ",", "11", ",", "54", ",", "\"\<\>\"", ",", "64", ",", "42", ",",
       "227"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Haley\>\"", ",", "\"\<Brewster\>\"", ",", "2003", ",", 
      "\"\<All\>\"", ",", "157.23`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "170", ",", "22", ",", "40", ",", "\"\<\>\"", ",", "\"\<\>\"",
       ",", "16", ",", "170"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Molly\>\"", ",", "\"\<Blakslee\>\"", ",", "2002", ",", 
      "\"\<All\>\"", ",", "199.15`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", 
      ",", "\"\<Sun Valley\>\"", ",", "5300", ",", "589", ",", "0", ",", "0", 
      ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sarah\>\"", ",", "\"\<Bivens\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "164.26`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Sun Valley\>\"", ",", "5300", ",", "630", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Sidney\>\"", ",", "\"\<Barbier\[CapitalEHat]\>\"", ",", "2003", 
      ",", "\"\<All\>\"", ",", "187.52`", ",", "\"\<Female\>\"", ",", 
      "\"\<Y\>\"", ",", "\"\<Durango, Colorado\>\"", ",", "6512", ",", "573", 
      ",", "0", ",", "0", ",", "0", ",", "273", ",", "21", ",", "40", ",", 
      "\"\<\>\"", ",", "50", ",", "58", ",", "273"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Cooper\>\"", ",", "\"\<Jones\>\"", ",", "2001", ",", "\"\<All\>\"", 
      ",", "\"\<\>\"", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Steamboat Springs\>\"", ",", "6900", ",", "597", ",", "0", ",", 
      "0", ",", "0", ",", "297", ",", "23", ",", "51", ",", "\"\<\>\"", ",", 
      "75", ",", "53", ",", "297"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Wally\>\"", ",", "\"\<Magill\>\"", ",", "2003", ",", "\"\<All\>\"", 
      ",", "96.13`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Boulder, CO\>\"", ",", "5300", ",", "585", ",", "0", ",", "0", ",",
       "0", ",", "226", ",", "8", ",", "48", ",", "\"\<\>\"", ",", "56", ",", 
      "44", ",", "226"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Anja\>\"", ",", "\"\<Jensen\>\"", ",", "2002", ",", "\"\<All\>\"", 
      ",", "200.63`", ",", "\"\<Female\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Sun Valley\>\"", ",", "5300", ",", "757", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Elijah\>\"", ",", "\"\<Weenig\>\"", ",", "2002", ",", "\"\<All\>\"",
       ",", "124.89`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", "\"\<\>\"",
       ",", "5300", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
      "\"\<\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Skylar\>\"", ",", "\"\<Patten\>\"", ",", "2001", ",", "\"\<All\>\"",
       ",", "125.67`", ",", "\"\<Male\>\"", ",", "\"\<Y\>\"", ",", 
      "\"\<Steamboat Springs\>\"", ",", "5300", ",", "0", ",", "0", ",", "0", 
      ",", "0", ",", "0", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", 
      ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "0"}], "}"}]}], "}"}]}]], "Input",\

 CellOpen->False,
 CellChangeTimes->{{3.877125978818035*^9, 3.8771259889028883`*^9}},
 CellLabel->
  "In[255]:=",ExpressionUUID->"60264606-de89-42e1-9a72-04a147c1c974"]
}, Open  ]]
},
WindowSize->{1280, 755},
WindowMargins->{{66, Automatic}, {Automatic, 0}},
FrontEndVersion->"13.1 for Mac OS X x86 (64-bit) (June 21, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"0231292d-0119-4438-ace2-fd3b7921efe2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[583, 22, 236, 6, 67, "Section",ExpressionUUID->"ff52f1fc-74a6-4d33-8b4f-eeed5add4a2e"],
Cell[822, 30, 209, 4, 30, "Input",ExpressionUUID->"7cbcef5d-45b4-4427-95f6-a58a26bb6a1e"],
Cell[CellGroupData[{
Cell[1056, 38, 574, 10, 46, "Input",ExpressionUUID->"c13cc93b-4268-46f7-9273-78b6d0c3b23f"],
Cell[1633, 50, 1842, 36, 173, "Output",ExpressionUUID->"03830298-864c-4879-8603-b5bf57b3c7a4"]
}, Open  ]],
Cell[3490, 89, 2421, 79, 94, "Input",ExpressionUUID->"757440f7-5b93-4acd-8213-b72ed164fcaf"],
Cell[CellGroupData[{
Cell[5936, 172, 469, 13, 68, "Input",ExpressionUUID->"b5183e3b-4950-4918-b224-66f203b53655"],
Cell[6408, 187, 67140, 1233, 61, "Output",ExpressionUUID->"f14d7abe-4f73-4604-80f0-09f1c58d1cf8"],
Cell[73551, 1422, 51779, 963, 61, "Output",ExpressionUUID->"8a73c3e0-25a6-4654-8465-773f27605880"]
}, Open  ]],
Cell[125345, 2388, 811, 24, 30, "Input",ExpressionUUID->"f309d808-1389-4462-b753-c415ae92c5ca"],
Cell[126159, 2414, 3887, 120, 152, "Input",ExpressionUUID->"4db357d7-da48-477a-8c63-ebebfa9f3d08"],
Cell[CellGroupData[{
Cell[130071, 2538, 233, 6, 30, "Input",ExpressionUUID->"3a2489bb-7c3d-466c-8ade-51822bde4b87"],
Cell[130307, 2546, 130368, 2462, 272, "Output",ExpressionUUID->"50f9021c-81fe-4e84-ac9a-cd508952f56f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[260712, 5013, 226, 5, 30, "Input",ExpressionUUID->"bbbf05b5-5f09-493f-9529-e122bb829c90"],
Cell[260941, 5020, 154348, 2889, 500, "Output",ExpressionUUID->"ba5c9b22-1596-4f1b-a9db-fb1f6c1154a5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[415326, 7914, 299, 7, 46, "Input",ExpressionUUID->"dc9fb956-3853-474e-a2d5-e3feb9d9d4a4"],
Cell[415628, 7923, 33080, 726, 315, "Output",ExpressionUUID->"fc74bd6d-7f66-40c8-96cf-80d90d602f70"]
}, Open  ]],
Cell[CellGroupData[{
Cell[448745, 8654, 1117, 33, 68, "Input",ExpressionUUID->"aa5bf5aa-22e8-4104-b5c7-9bd039c7c18d"],
Cell[449865, 8689, 524, 12, 37, "Output",ExpressionUUID->"d8e7d887-813c-4282-b9b8-c32338e07b4d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[450426, 8706, 401, 8, 30, "Input",ExpressionUUID->"721c6f13-7719-4593-9f42-2c0a202e7a29"],
Cell[450830, 8716, 1811, 35, 173, "Output",ExpressionUUID->"90d36ff4-6f34-4dbe-a615-007251aa8321"]
}, Open  ]],
Cell[452656, 8754, 2692, 75, 115, "Input",ExpressionUUID->"2e1cb6b2-06c4-4277-b1a3-8c9bc243b5f6"],
Cell[CellGroupData[{
Cell[455373, 8833, 577, 14, 52, "Input",ExpressionUUID->"df75e094-af84-48e1-8deb-4eb78ef03649"],
Cell[455953, 8849, 165336, 2873, 62, "Output",ExpressionUUID->"9294710f-607f-4167-aae8-8d170219d080"],
Cell[621292, 11724, 55524, 1033, 62, "Output",ExpressionUUID->"331d8430-1d48-4422-8115-bea7d22954ee"]
}, Open  ]],
Cell[676831, 12760, 7820, 200, 283, "Input",ExpressionUUID->"4550a008-7dd9-4e88-a038-4790ce143e6f"],
Cell[CellGroupData[{
Cell[684676, 12964, 282, 7, 30, "Input",ExpressionUUID->"4f87f671-b305-46cb-a728-608a03cb3839"],
Cell[684961, 12973, 230791, 4143, 272, "Output",ExpressionUUID->"02187314-c92f-4776-9724-604b8329e113"]
}, Open  ]],
Cell[CellGroupData[{
Cell[915789, 17121, 226, 5, 30, "Input",ExpressionUUID->"59c93412-ff2a-4de5-8f7d-517029eaa53b"],
Cell[916018, 17128, 264465, 4760, 500, "Output",ExpressionUUID->"0b3706f1-427e-49e3-8beb-bdd753e435b6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1180520, 21893, 226, 5, 30, "Input",ExpressionUUID->"0d52c23e-cfc4-488d-80ef-e0ad6edb91ff"],
Cell[1180749, 21900, 264465, 4760, 500, "Output",ExpressionUUID->"d705af90-fa7f-4036-986e-7c66260bed3d"]
}, Open  ]],
Cell[1445229, 26663, 181133, 3342, 19, "Input",ExpressionUUID->"60264606-de89-42e1-9a72-04a147c1c974",
 CellOpen->False]
}, Open  ]]
}
]
*)

